[
    {
        "id": "425c2d210e2ada1e",
        "type": "tab",
        "label": "DAYWISE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dbb1dbaace426118",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7a9e29a90dd7dbe",
        "type": "tab",
        "label": "BREAK DOWN",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0934a0e5582d224f",
        "type": "tab",
        "label": "HISTORY",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac76d9a325ed7956",
        "type": "tab",
        "label": "MACHINE_SETT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8e16e90ee80d1796",
        "type": "tab",
        "label": "DATA_UPDATE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e30eb1ab591daa50",
        "type": "tab",
        "label": "GAS_PRODUCTION",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "abb6305e8142e8fe",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "65e97843b2a58628",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3cb915a0b2d8453d",
        "type": "tab",
        "label": "Multiple Bar Charts",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n- support for nested columns [(column groups)](http://tabulator.info/examples/4.7#column-groups)\n- support for child rows (_children) [(nested data trees)](http://tabulator.info/examples/4.7#tree)\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\n- sending an `array` as discribed in ui-table will replace the complete table and delete all table edits\n  \n  if `msg.keepEdits=true` is added the existing edits will be kept.\n- send an `object` containing the updated properties of a table row by sending msg.<tableDataProp>.\n\n  The table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. For this to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `object` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `object` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `object` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `object` matching column field\n- `columnUnHide` unhide a column. `object` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore` set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n- `getTable` get table data (as displayed) as an array (on 2nd output)\n \n## background\nui-table warps the powerfull tabluator library.  This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e17ce82ab2b40f56",
        "type": "ui_group",
        "name": "Flipping Dashboard",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "eae82cd6ac94db65",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#00cc47",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#357709",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#357709",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#357709",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#55be0e",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#357709",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "LINE-1",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c74e474b1bf5bfb4",
        "type": "ui_group",
        "name": "DAYWISE OEE",
        "tab": "8eb2a6212d706466",
        "order": 1,
        "disp": true,
        "width": "29",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6b3d74596f197c2f",
        "type": "MC Protocol Connection",
        "name": "MITS",
        "host": "192.168.94.11",
        "port": "3001",
        "protocol": "UDP",
        "frame": "3E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "2000"
    },
    {
        "id": "39fa26a578f7c269",
        "type": "ui_group",
        "name": "CELL CURRENT STATUS",
        "tab": "fd8307a3a0930bfa",
        "order": 1,
        "disp": true,
        "width": "19",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8eb2a6212d706466",
        "type": "ui_tab",
        "d": true,
        "name": "DAYWISE SUMMARY",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "63c67740abac5291",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "NodeRedSQLClient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "15",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8f4a7ba99bc88fdf",
        "type": "telegram bot",
        "botname": "NodeRedBot",
        "usernames": "",
        "chatids": "5925505238",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "ee44f80040ede62c",
        "type": "ui_tab",
        "name": "BREAKDOWN ENTRY",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b612597af736eb57",
        "type": "ui_group",
        "name": "BREAKDOWN ENTERY",
        "tab": "ee44f80040ede62c",
        "order": 1,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5fa3731ec8f2ae78",
        "type": "ui_tab",
        "name": "HISTORY",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c21e9f42e5f4c40a",
        "type": "ui_group",
        "name": "REPORT",
        "tab": "5fa3731ec8f2ae78",
        "order": 1,
        "disp": true,
        "width": 22,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0a5b6862d498fe15",
        "type": "telegram bot",
        "botname": "NodeRedBot",
        "usernames": "",
        "chatids": "5925505238",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "a43d83579d45c0c0",
        "type": "ui_tab",
        "name": "MACHINE SETTING",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8cd8e17387ed76d7",
        "type": "ui_group",
        "name": "MACHINE INFORMATION",
        "tab": "a43d83579d45c0c0",
        "order": 1,
        "disp": true,
        "width": 14,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f4bbf2fbc011660c",
        "type": "ui_group",
        "name": "MACHINE QUALITY",
        "tab": "a43d83579d45c0c0",
        "order": 2,
        "disp": true,
        "width": 15,
        "collapse": false,
        "className": ""
    },
    {
        "id": "53828e52e3fdf2d0",
        "type": "ui_tab",
        "d": true,
        "name": "MONTHWISE SUMMARY",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7d424c3483352a72",
        "type": "ui_group",
        "name": "MONTHWISE OEE",
        "tab": "53828e52e3fdf2d0",
        "order": 1,
        "disp": true,
        "width": 29,
        "collapse": false,
        "className": ""
    },
    {
        "id": "701b0ff3730656ae",
        "type": "MC Protocol Connection",
        "name": "MITS_2",
        "host": "192.168.3.120",
        "port": "9000",
        "protocol": "TCP",
        "frame": "1E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "4000"
    },
    {
        "id": "74f93483324904c5",
        "type": "MC Protocol Connection",
        "name": "mits_3",
        "host": "192.168.94.1",
        "port": "3001",
        "protocol": "UDP",
        "frame": "3E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "4000"
    },
    {
        "id": "879de5f30639dce9",
        "type": "ui_group",
        "name": "PRODUCTION LOSS",
        "tab": "a43d83579d45c0c0",
        "order": 3,
        "disp": true,
        "width": 29,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1cd76d9576ea63de",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "ceaa8cf7da044584",
        "type": "MSSQL-CN",
        "name": "CLOUD",
        "server": "ep-floral-violet-a8geanhi-pooler.eastus2.azure.neon.tech",
        "encyption": false,
        "database": "Furnace"
    },
    {
        "id": "f7f926047d187624",
        "type": "ui_group",
        "name": "CELL CURRENT STATUS.",
        "tab": "fd8307a3a0930bfa",
        "order": 2,
        "disp": true,
        "width": "19",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e73023265f122261",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "9f7647d407a450e3",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "1e3ed18947407828",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "e73023265f122261",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "9f7647d407a450e3",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "1bc9f435f03f95af",
        "type": "ui-group",
        "name": "LINE-1",
        "page": "1e3ed18947407828",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "316239f8f5f18954",
        "type": "telegram bot",
        "botname": "@machine_A_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "d52e7c870f57ca08",
        "type": "MC Protocol Connection",
        "name": "MKSG",
        "host": "192.168.1.2",
        "port": "3001",
        "protocol": "TCP",
        "frame": "1E",
        "plcType": "L",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "1000"
    },
    {
        "id": "05232980edaa8bee",
        "type": "MC Protocol Connection",
        "name": "MBS",
        "host": "192.168.94.61",
        "port": "4001",
        "protocol": "UDP",
        "frame": "3E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "1000"
    },
    {
        "id": "f16e6fab0419806e",
        "type": "serial-port",
        "name": "",
        "serialport": "COM9",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "f318ca3fdcf693e5",
        "type": "MC Protocol Connection",
        "name": "MBS2",
        "host": "192.168.94.52",
        "port": "3010",
        "protocol": "UDP",
        "frame": "3E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "1000"
    },
    {
        "id": "dfc9f0bd29cf530d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "NodeRedSQLClient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "15",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "19c53b663a7b2c36",
        "type": "telegram bot",
        "botname": "NodeRedBot",
        "usernames": "",
        "chatids": "5925505238",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "ff0995ede09ac098",
        "type": "telegram bot",
        "botname": "NodeRedBot",
        "usernames": "",
        "chatids": "5925505238",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "adec0378cc7acece",
        "type": "MC Protocol Connection",
        "name": "MITS_2",
        "host": "192.168.94.4",
        "port": "3001",
        "protocol": "UDP",
        "frame": "3E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "4000"
    },
    {
        "id": "d748562131228f9e",
        "type": "MC Protocol Connection",
        "name": "mits_3",
        "host": "192.168.94.1",
        "port": "3001",
        "protocol": "UDP",
        "frame": "3E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "4000"
    },
    {
        "id": "98e12ea272f89384",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "9c332921d88cdcee",
        "type": "MSSQL-CN",
        "name": "DESKTOP-DKIMA66\\SQLEXPRESS",
        "server": "127.0.0.1",
        "encyption": false,
        "database": "Furnace"
    },
    {
        "id": "ae450d68ef8eaff8",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "5aa08c9f41ec970a",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "1ca2fb6c5cff0247",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "4432faf83a3b34e6",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 7,
        "width": 29,
        "height": 1
    },
    {
        "id": "97f05e78e8f85a5e",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "1a6164e45d83dc98",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "e0264823b6449d31",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "735d4ab48b80daa4",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "bdc57b8b77ecd0fb",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "8ef5fc89ff787a41",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "d9783e708192a14d",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "0fd86929ab7412b1",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "6f851ba53c8fd999",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "ebe7f97ad3dd6eb9",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "aa0aeae955688e3e",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "354b5a99b7e4e397",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "571fec578bdb433a",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "95167d97f5d11e23",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "d6667207d61ecb9e",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "d9ca9b2f14740a6f",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "cd09c70629f56ea8",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "88c44807f83661cc",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "eecf532848e01ee5",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 28,
        "width": 29,
        "height": 1
    },
    {
        "id": "4d78a73331525320",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "28aeb33fbb27fe44",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 31,
        "width": 1,
        "height": 1
    },
    {
        "id": "686186e9b6f073b0",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "876c23a910fb16a9",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "0a2b8f465876d7d8",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "b6e84706fa2fc80c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 36,
        "width": 1,
        "height": 1
    },
    {
        "id": "9e98520844f8a281",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 37,
        "width": 1,
        "height": 1
    },
    {
        "id": "ad78389a9fdebefc",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 38,
        "width": 1,
        "height": 1
    },
    {
        "id": "460e53e7a92cb2fa",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 39,
        "width": 1,
        "height": 1
    },
    {
        "id": "6d392de844a01814",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 40,
        "width": 1,
        "height": 1
    },
    {
        "id": "044c6d945e4079e9",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 41,
        "width": 1,
        "height": 1
    },
    {
        "id": "a3baefd615a9e133",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 42,
        "width": 1,
        "height": 1
    },
    {
        "id": "685f9228a762ab6c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 43,
        "width": 1,
        "height": 1
    },
    {
        "id": "570c51bc709a2c28",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 44,
        "width": 1,
        "height": 1
    },
    {
        "id": "d58ef1e50bbf77ae",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 45,
        "width": 1,
        "height": 1
    },
    {
        "id": "b2546628dfa1d009",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 46,
        "width": 1,
        "height": 1
    },
    {
        "id": "871d936ef6b6c61b",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 47,
        "width": 1,
        "height": 1
    },
    {
        "id": "6eb2927cb39fb45f",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 48,
        "width": 1,
        "height": 1
    },
    {
        "id": "4917bc595e4bf60a",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 49,
        "width": 29,
        "height": 1
    },
    {
        "id": "d8fdb355945a159d",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 50,
        "width": 1,
        "height": 1
    },
    {
        "id": "18d88a104cb5a3f5",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 52,
        "width": 1,
        "height": 1
    },
    {
        "id": "d2bb211eb33bcf4e",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 54,
        "width": 1,
        "height": 1
    },
    {
        "id": "9df6c5faa3775422",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 55,
        "width": 1,
        "height": 1
    },
    {
        "id": "3abd10a74386a6ef",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 56,
        "width": 1,
        "height": 1
    },
    {
        "id": "b1bb5e2827e98512",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 57,
        "width": 1,
        "height": 1
    },
    {
        "id": "d725c961609766e6",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 58,
        "width": 1,
        "height": 1
    },
    {
        "id": "c67f19cd697571c6",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 59,
        "width": 1,
        "height": 1
    },
    {
        "id": "731956148067ba39",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 60,
        "width": 1,
        "height": 1
    },
    {
        "id": "6e6be9438c538cee",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 61,
        "width": 1,
        "height": 1
    },
    {
        "id": "f90235de011f62e4",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 62,
        "width": 1,
        "height": 1
    },
    {
        "id": "76611ff919c195da",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 63,
        "width": 1,
        "height": 1
    },
    {
        "id": "75f57d6412183a5a",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 64,
        "width": 1,
        "height": 1
    },
    {
        "id": "da0a900ca052762c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 65,
        "width": 1,
        "height": 1
    },
    {
        "id": "ec50056324d24a12",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 66,
        "width": 1,
        "height": 1
    },
    {
        "id": "6ccffece035c900e",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 67,
        "width": 1,
        "height": 1
    },
    {
        "id": "f4a5fc240b498abb",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 68,
        "width": 1,
        "height": 1
    },
    {
        "id": "4c1b4e42c791633a",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "7d424c3483352a72",
        "order": 69,
        "width": 1,
        "height": 1
    },
    {
        "id": "95374e7065643c41",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": 14,
        "height": 1
    },
    {
        "id": "ce18b459e6efa41f",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 4,
        "height": 1
    },
    {
        "id": "ef422129d58ebf81",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 4,
        "height": 1
    },
    {
        "id": "83b4b167d1d5b3df",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 2,
        "width": 8,
        "height": 1
    },
    {
        "id": "941576bef92553b8",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 4,
        "width": 7,
        "height": 1
    },
    {
        "id": "61b8c47b8247b107",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "43e8a4604f194910",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "5743c311271f241c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "780712aff4bae009",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "bdc96fb1659d31ad",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "e73805f2ada9a599",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "ee225e4ce47bc42c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "1a515f97d4f5c091",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "4c85ee09063fb27b",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 16,
        "width": 8,
        "height": 1
    },
    {
        "id": "8c1e02fe83155290",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 18,
        "width": 7,
        "height": 1
    },
    {
        "id": "8227e9189f428050",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "40308c88c26a60bd",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "232c09a2cde5b5d4",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "723e937e0db8d2ce",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "7e7db480b553f3f1",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "d8e5983eb1af4215",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "c6842337d96df2d6",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "b07c5b449a49c872",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "164b3a49d8213c07",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 29,
        "width": 8,
        "height": 1
    },
    {
        "id": "bbd4d4f0ad5ce870",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 31,
        "width": 7,
        "height": 1
    },
    {
        "id": "d0a007d8108b5ccb",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 32,
        "width": 1,
        "height": 1
    },
    {
        "id": "e35540d109b6f3e6",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "dda23e08eea75f8b",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 36,
        "width": 1,
        "height": 1
    },
    {
        "id": "a3fd939fb88c5725",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 37,
        "width": 1,
        "height": 1
    },
    {
        "id": "df18c6359c461af4",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 38,
        "width": 1,
        "height": 1
    },
    {
        "id": "3886227d7a5ff3a9",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 39,
        "width": 1,
        "height": 1
    },
    {
        "id": "e555ef94bd41d47f",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 40,
        "width": 1,
        "height": 1
    },
    {
        "id": "b2c651a725808272",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 41,
        "width": 1,
        "height": 1
    },
    {
        "id": "3c30cfe8feb203a9",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 42,
        "width": 1,
        "height": 1
    },
    {
        "id": "2ee5396ab521b9aa",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 43,
        "width": 1,
        "height": 1
    },
    {
        "id": "d11592c37a3e0e58",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 44,
        "width": 8,
        "height": 1
    },
    {
        "id": "5a48fd40404b235a",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 46,
        "width": 7,
        "height": 1
    },
    {
        "id": "ac251fba46822713",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 48,
        "width": 1,
        "height": 1
    },
    {
        "id": "7069f93e83f31516",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 50,
        "width": 1,
        "height": 1
    },
    {
        "id": "8031b92c289c8e9c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 51,
        "width": 1,
        "height": 1
    },
    {
        "id": "f750c836b7f98625",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 52,
        "width": 1,
        "height": 1
    },
    {
        "id": "4bb9c3e34c52cfcf",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 53,
        "width": 1,
        "height": 1
    },
    {
        "id": "215c139952f31176",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 54,
        "width": 1,
        "height": 1
    },
    {
        "id": "e6c79ea67dad5700",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 55,
        "width": 1,
        "height": 1
    },
    {
        "id": "d90d96f556492332",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 56,
        "width": 1,
        "height": 1
    },
    {
        "id": "7b2266685a768b01",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 57,
        "width": 1,
        "height": 1
    },
    {
        "id": "ee4b0fb56bd498b9",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 58,
        "width": 1,
        "height": 1
    },
    {
        "id": "0dfc7c8d06afbfb4",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 60,
        "width": 23,
        "height": 1
    },
    {
        "id": "0aa04e5ac75db80d",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 61,
        "width": 23,
        "height": 1
    },
    {
        "id": "d9f58189ec714f39",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 62,
        "width": 23,
        "height": 1
    },
    {
        "id": "bc6f344b05c9550c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 63,
        "width": 23,
        "height": 1
    },
    {
        "id": "fdb12e56941c8dc7",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 64,
        "width": 23,
        "height": 1
    },
    {
        "id": "bcc1ff88cbcf220b",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 66,
        "width": 23,
        "height": 1
    },
    {
        "id": "19788edfd0a4d928",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 67,
        "width": 23,
        "height": 1
    },
    {
        "id": "9fb0b613991cd036",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 68,
        "width": 23,
        "height": 1
    },
    {
        "id": "3ff3eb3e0b23526c",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 69,
        "width": 23,
        "height": 1
    },
    {
        "id": "c9dec36bb9587664",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "c74e474b1bf5bfb4",
        "order": 70,
        "width": 23,
        "height": 1
    },
    {
        "id": "8e8d1114020fdbf4",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "8cd8e17387ed76d7",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "52b488974fe5c43d",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "8cd8e17387ed76d7",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "d913764e5aa063c4",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "8cd8e17387ed76d7",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "690ae2a082504d16",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "8cd8e17387ed76d7",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "1eac4845c3fe54c9",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "f4bbf2fbc011660c",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "e805b32a0edafe95",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "f4bbf2fbc011660c",
        "order": 4,
        "width": 15,
        "height": 1
    },
    {
        "id": "01e33f81045a8ec3",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "f4bbf2fbc011660c",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "1de14c623285c77f",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "879de5f30639dce9",
        "order": 1,
        "width": 9,
        "height": 1
    },
    {
        "id": "db7ecfbe092c6c6b",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "879de5f30639dce9",
        "order": 3,
        "width": 8,
        "height": 1
    },
    {
        "id": "ca380e40a761ce9d",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "879de5f30639dce9",
        "order": 5,
        "width": 9,
        "height": 1
    },
    {
        "id": "9160c6b0a474c209",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "879de5f30639dce9",
        "order": 8,
        "width": 9,
        "height": 1
    },
    {
        "id": "95517a48d6ea28a0",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "879de5f30639dce9",
        "order": 11,
        "width": 9,
        "height": 1
    },
    {
        "id": "6d69274a985516e5",
        "type": "ui_spacer",
        "z": "ac76d9a325ed7956",
        "name": "spacer",
        "group": "879de5f30639dce9",
        "order": 14,
        "width": 9,
        "height": 1
    },
    {
        "id": "fd8307a3a0930bfa",
        "type": "ui_tab",
        "name": "LINE-1",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "989e7a30a0c97c7f",
        "type": "ui_spacer",
        "z": "425c2d210e2ada1e",
        "name": "spacer",
        "group": "e17ce82ab2b40f56",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "e2bef973c39c7171",
        "type": "ui_group",
        "name": "LAST 8 HOURS DATA (CELL-1)",
        "tab": "fd8307a3a0930bfa",
        "order": 3,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "94b8548fd1d1ae9e",
        "type": "ui_group",
        "name": "LAST 8 HOURS DATA (CELL-2)",
        "tab": "fd8307a3a0930bfa",
        "order": 4,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f3d9296fe3a7547",
        "type": "ui-group",
        "name": "Group Name",
        "page": "1e3ed18947407828",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "383f5adc87347f2b",
        "type": "ui_group",
        "name": "LAST WEEK SUMMARY (CELL-1)",
        "tab": "fd8307a3a0930bfa",
        "order": 5,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "eac6a34a2d19ae0e",
        "type": "ui_group",
        "name": "LAST WEEK SUMMARY (CELL-2)",
        "tab": "fd8307a3a0930bfa",
        "order": 6,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "dcab96ebc240fe47",
        "type": "ui_group",
        "name": "Production",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "aeac0e8870380e31",
        "type": "ui_group",
        "name": "hidden_group",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "124fec707e10b8e3",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "64fae91ec85ab0a7",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "4239d33d82d9b915",
        "type": "ui_group",
        "name": "Test Group",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b31b4291cc276330",
        "type": "ui_group",
        "name": "Charts",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e74e51ecdce38eb9",
        "type": "ui_group",
        "name": "Login Group",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "b4e123430ceff207",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "19ff1b05b6145e53",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "789072742ae5f0ae",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "fb55d42f140de62f",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "ce431943ebcbfa4f",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "478099204e800d12",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "70dd6e8cdc15d497",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "f0c0b63a54b49af7",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "48a96b9a89a8cfbb",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "3c3c3340d2fa8fe1",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "898f6710dc7c19f2",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "bfdcaf50957455e9",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "a3398350e6eef77e",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "115983944dc7754f",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "118a9d44ba6df585",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "fef962e1fd88d608",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "39fa26a578f7c269",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "6d2e3cab2d79f59b",
        "type": "ui_spacer",
        "z": "dbb1dbaace426118",
        "name": "spacer",
        "group": "f7f926047d187624",
        "order": 4,
        "width": 19,
        "height": 1
    },
    {
        "id": "731e2ac7ebc3802d",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "ep-floral-violet-a8geanhi-pooler.eastus2.azure.neon.tech",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "Furnace",
        "databaseFieldType": "str",
        "ssl": "true",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "Furnace_owner",
        "userFieldType": "str",
        "password": "npg_0LsukecvrRU8",
        "passwordFieldType": "str"
    },
    {
        "id": "be8d26a7941d5db5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "03701c89bca626fe",
        "type": "MC Protocol Connection",
        "name": "FX5U_01",
        "host": "192.168.3.250",
        "port": "9000",
        "protocol": "UDP",
        "frame": "4E",
        "plcType": "Q",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "1000"
    },
    {
        "id": "54894031e6ebdd05",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "aab697dc095d5abc",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 4,
        "width": 7,
        "height": 1
    },
    {
        "id": "d7425f1d65aba2fb",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "8858141caa7db93e",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "96d516ae2cf807d3",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "4839fac0abd2f2dd",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "8155417bb9ecdf95",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "eb48ea7b392cf2e6",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "0d0b81effb16eeee",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "7c845668677f371b",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "2549a446e6fc07f0",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "1ab2b064d78b99f3",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "ac23760ea0e2bbf7",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "ed75e66efc79367a",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 24,
        "width": 5,
        "height": 1
    },
    {
        "id": "b530ed086b2bc6e5",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 26,
        "width": 5,
        "height": 1
    },
    {
        "id": "5ddd37e2e158ab8a",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "953fe9eea61feab9",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 30,
        "width": 1,
        "height": 1
    },
    {
        "id": "ee89565005eaba92",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 32,
        "width": 1,
        "height": 1
    },
    {
        "id": "e2c9687f56fb8ee0",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "b55c558d998a2eb2",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "16589b374104f1d4",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 36,
        "width": 1,
        "height": 1
    },
    {
        "id": "0612f53411d58b43",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 38,
        "width": 1,
        "height": 1
    },
    {
        "id": "7eecbdb227c5484b",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 39,
        "width": 1,
        "height": 1
    },
    {
        "id": "69bf63c37de1cfa1",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 41,
        "width": 1,
        "height": 1
    },
    {
        "id": "f86c4f1533c65cf7",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 42,
        "width": 1,
        "height": 1
    },
    {
        "id": "c85305f4bd820e9a",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 43,
        "width": 7,
        "height": 1
    },
    {
        "id": "466028cd06334eb0",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 44,
        "width": 1,
        "height": 1
    },
    {
        "id": "71b6c977a6b6ce66",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 45,
        "width": 7,
        "height": 1
    },
    {
        "id": "629052bfd180ab49",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 46,
        "width": 1,
        "height": 1
    },
    {
        "id": "5fe1b86f5d7e6eab",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 47,
        "width": 7,
        "height": 1
    },
    {
        "id": "11411d6ed60663a4",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 48,
        "width": 1,
        "height": 1
    },
    {
        "id": "01e8bdad34dfc4d9",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 49,
        "width": 7,
        "height": 1
    },
    {
        "id": "4e45213589f05874",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 50,
        "width": 1,
        "height": 1
    },
    {
        "id": "e9a6cf1d7bbf8b95",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 51,
        "width": 7,
        "height": 1
    },
    {
        "id": "5323a77ab63baf6c",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 52,
        "width": 1,
        "height": 1
    },
    {
        "id": "fe65a3474e0212fe",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 53,
        "width": 7,
        "height": 1
    },
    {
        "id": "c40b8f19e8efd361",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 54,
        "width": 1,
        "height": 1
    },
    {
        "id": "841fdd3707254309",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 55,
        "width": 7,
        "height": 1
    },
    {
        "id": "12b7a3dc63a9811d",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 56,
        "width": 1,
        "height": 1
    },
    {
        "id": "e7e53b99a193fade",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 57,
        "width": 7,
        "height": 1
    },
    {
        "id": "28284b2b357f1d2e",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 58,
        "width": 1,
        "height": 1
    },
    {
        "id": "d0af6597137622f3",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 59,
        "width": 7,
        "height": 1
    },
    {
        "id": "6340822309953d56",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 60,
        "width": 1,
        "height": 1
    },
    {
        "id": "e6a1934361c376a7",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 61,
        "width": 7,
        "height": 1
    },
    {
        "id": "de29a004802d7ade",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 62,
        "width": 1,
        "height": 1
    },
    {
        "id": "10ebbfce8c5d7ca6",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 63,
        "width": 7,
        "height": 1
    },
    {
        "id": "d48b0459e76b48cd",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 64,
        "width": 1,
        "height": 1
    },
    {
        "id": "c82707132fc20e14",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 65,
        "width": 7,
        "height": 1
    },
    {
        "id": "eaca2dceecae16d5",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 66,
        "width": 1,
        "height": 1
    },
    {
        "id": "12f18c2e9ec98e37",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 67,
        "width": 7,
        "height": 1
    },
    {
        "id": "17b997baecad4006",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "b612597af736eb57",
        "order": 68,
        "width": 1,
        "height": 1
    },
    {
        "id": "fa0a65a6d00da36f",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 1,
        "width": 4,
        "height": 1
    },
    {
        "id": "ced9ee97028d00b8",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "cd4150ca602c1eeb",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "3bf9c385b4ddec80",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "db0c3fe096925d07",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "f5fc5c82ec1c30a2",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 10,
        "width": 14,
        "height": 1
    },
    {
        "id": "8ef871512a707ba0",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "5da68e32104fb282",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "517eb0ad3b29640f",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "3ed2915cf6f88772",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "b1ec37c73b3f121a",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "88b85893a1499e32",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "b8a37662b055a613",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "652ad2c9404a242c",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "82a51751c6b85707",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "a04d9baebfb0a8dd",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "274391b7f234d6b2",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "caec502917aa795d",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "508f198313f36304",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "53d9e303ec3f5f5f",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "9d74dcde7fb818f6",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "07fb32985127df6a",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "5ae3605607f4ac78",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "204ad361e9edf00c",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 30,
        "width": 1,
        "height": 1
    },
    {
        "id": "33ad14b8deb83c9a",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 31,
        "width": 1,
        "height": 1
    },
    {
        "id": "750fe77f6897f27e",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 32,
        "width": 1,
        "height": 1
    },
    {
        "id": "ec8f41e65fe73b9c",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "844af19785911e54",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "d9c9a1bed688bfd7",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 35,
        "width": 1,
        "height": 1
    },
    {
        "id": "4de0c599cc056578",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 36,
        "width": 1,
        "height": 1
    },
    {
        "id": "a2c3b17320309776",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 37,
        "width": 1,
        "height": 1
    },
    {
        "id": "30964473ebc8182c",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 38,
        "width": 1,
        "height": 1
    },
    {
        "id": "0de3d11f6772c676",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 39,
        "width": 1,
        "height": 1
    },
    {
        "id": "ad577d1a76f5b570",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 40,
        "width": 1,
        "height": 1
    },
    {
        "id": "164d8d39fecfbcbe",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 41,
        "width": 1,
        "height": 1
    },
    {
        "id": "4acf3c5591f6e35f",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 42,
        "width": 1,
        "height": 1
    },
    {
        "id": "f139b2a28083b836",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 43,
        "width": 1,
        "height": 1
    },
    {
        "id": "b8987a8026a34782",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 44,
        "width": 1,
        "height": 1
    },
    {
        "id": "41ec26fad2e7a7d7",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 45,
        "width": 1,
        "height": 1
    },
    {
        "id": "0e07523433f43c7c",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 46,
        "width": 1,
        "height": 1
    },
    {
        "id": "1d45b278c2f418b4",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 47,
        "width": 1,
        "height": 1
    },
    {
        "id": "6b1b66c8edd410d9",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 48,
        "width": 1,
        "height": 1
    },
    {
        "id": "9dec31eca62e66a7",
        "type": "ui_spacer",
        "z": "f7a9e29a90dd7dbe",
        "name": "spacer",
        "group": "c21e9f42e5f4c40a",
        "order": 49,
        "width": 1,
        "height": 1
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n\n// merge edits into a destination object respecting _children\nvar mergeEdits = function(destination) {\n    \n    var mergeChildEdits = function(children) {\n        children.forEach(child => {\n            if (child.hasOwnProperty(tableIndex) && tableEdit.hasOwnProperty(child[tableIndex])) {\n//                node.warn([\"mergeChild\",child])\n                Object.keys(tableEdit[child[tableIndex]]).forEach(edit => {\n                    if (child.hasOwnProperty(edit)) {\n                        child[edit]=tableEdit[child[tableIndex]][edit];\n//                        node.warn([\"mergeChild edit \",edit,child[edit]])\n                    }\n                });\n            }\n            if (child.hasOwnProperty(\"_children\")) {\n                mergeChildEdits(child._children);\n            }\n        })\n    }\n    \n\n    Object.keys(destination).forEach(row => {\n        if (destination[row].hasOwnProperty(tableIndex)) {\n            if (tableEdit.hasOwnProperty(row)) {\n                Object.keys(tableEdit[row]).forEach(edit => {\n                    destination[row][edit]=tableEdit[row][edit];\n                });\n            }\n            if (destination[row].hasOwnProperty(\"_children\")) {\n                mergeChildEdits(destination[row]._children);\n            }\n       }\n    });\n}\n\n// deep search for a column including nested columns\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).lenght===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && msg.topic-maxRows>0) {\n        node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [msg.topic-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\") && msg.payload.command!=='getTable') {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                var deleteRow = function(id) {\n                    // check if row is in root\n                    if (tableData.hasOwnProperty(id)) {\n                        delete tableData[id]\n                        return true;\n                    }\n                    // check if row is a child\n                    let deleteChildRow = function(children, id) {\n                        for(let i = 0; i < children.length; i++){\n                            if (children[i].hasOwnProperty(tableIndex) && children[i][tableIndex]===id) {\n                                children.splice(i, 1); \n                                return true; \n                            }\n                            if (children[i].hasOwnProperty(\"_children\")) {\n                                if (deleteChildRow(children[i]._children,id)) {\n                                    if (children[i]._children.length === 0) {\n                                        delete children[i]._children;\n                                    }\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    };\n                    \n                    for (let row in tableData) {\n                        if (tableData[row].hasOwnProperty(\"_children\")) {\n                            if (deleteChildRow(tableData[row]._children,id)) return true;\n                        }\n                    }\n                    return false;\n                }\n                \n                if (deleteRow(msg.payload.object)) {\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                delete msg.ui_control;\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.payload.object;\n                maxStore=msg.payload.object;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.payload.object;\n                maxRows=msg.payload.object;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n\n    let command = msg.payload.command;\n    var tableArray;\n    if (command===\"getTable\") {\n        msg.payload.tableArray=[];\n        tableArray=msg.payload.tableArray\n    } else {\n        msg.payload=[];\n        tableArray=msg.payload;\n    }\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                tableArray.push(tableRow);\n            } else {\n                tableArray.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    \n    if (command=='getTable'){\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows emitted\";\n        return [{payload:status},null,msg];\n    } else {\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows restored\";\n        return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n    }\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                mergeEdits(tableData);\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},null,msg]); // was node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n} \nif (Array.isArray(msg.payload)) {\n    tableData={};\n    \n    msg.payload.forEach((row) => {\n        if (row.hasOwnProperty(tableIndex)) {\n            tableData[row[tableIndex]]=row;\n        }\n    });\n    if (msg.keepEdits) {\n        mergeEdits(tableData);\n    }\n\n    \n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n    if (tableContext.hasOwnProperty(\"tableEdit\") && !msg.keepEdits) {\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n    status.fill=\"blue\"\n    status.text=\"table replaced \"+msg.payload.length+\" rows\";\n    return [{payload:status},msg,null];\n}    \n    \n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "760c2fbc7cc334ab",
        "type": "debug",
        "z": "425c2d210e2ada1e",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 770,
        "y": 1580,
        "wires": []
    },
    {
        "id": "c62b52b561cc93bf",
        "type": "inject",
        "z": "425c2d210e2ada1e",
        "d": true,
        "name": "Select",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "SELECT TOP (1) [Topic]       ,[Payload]   FROM [Dev].[dbo].[MQTTData]",
        "payloadType": "str",
        "x": 171.00000381469727,
        "y": 1513.9999980926514,
        "wires": [
            [
                "41da0856e2e6b0ca"
            ]
        ]
    },
    {
        "id": "41da0856e2e6b0ca",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 540,
        "y": 1580,
        "wires": [
            [
                "760c2fbc7cc334ab",
                "b2bacd808c6061be"
            ]
        ]
    },
    {
        "id": "26a466c1634623a3",
        "type": "inject",
        "z": "425c2d210e2ada1e",
        "name": "Insert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "INSERT INTO [node_red].[dbo].[mytable] (Age, M) VALUES (100, 'Erichsen' )",
        "payloadType": "str",
        "x": 170,
        "y": 1700,
        "wires": [
            [
                "41da0856e2e6b0ca"
            ]
        ]
    },
    {
        "id": "58958f766d18c9d9",
        "type": "inject",
        "z": "425c2d210e2ada1e",
        "name": "Update",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1600,
        "wires": [
            [
                "a96a64c4c8b03e8f"
            ]
        ]
    },
    {
        "id": "a96a64c4c8b03e8f",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var d = new Date,\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar gk = global.get(\"count\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[mytable](Age,Timestamp)\"      \npld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1616,
        "wires": [
            [
                "41da0856e2e6b0ca"
            ]
        ]
    },
    {
        "id": "786a4d66209f0874",
        "type": "inject",
        "z": "425c2d210e2ada1e",
        "name": "Select",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 170,
        "y": 1660,
        "wires": [
            [
                "d95860718b9d659a"
            ]
        ]
    },
    {
        "id": "d95860718b9d659a",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var pld  = \"SELECT BREAKDOWN \"\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[DOWN_TIME_1] \"\npld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 311,
        "y": 1672,
        "wires": [
            [
                "41da0856e2e6b0ca"
            ]
        ]
    },
    {
        "id": "69fce6c6ed27cccf",
        "type": "mqtt in",
        "z": "425c2d210e2ada1e",
        "name": "",
        "topic": "SQLTest/#",
        "qos": "0",
        "broker": "63c67740abac5291",
        "inputs": 0,
        "x": 162,
        "y": 1722,
        "wires": [
            [
                "1eb7322f4ec31adf"
            ]
        ]
    },
    {
        "id": "1eb7322f4ec31adf",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var d = new Date()\nvar dformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n\nvar pld =       \"INSERT INTO [Dev].[dbo].[MQTTData] \"\npld = pld + \"(Topic, Payload, Timestamp) \"\npld = pld + \"VALUES ('\" + msg.topic + \"', '\" + msg.payload + \"', '\" + dformat + \"')\"\n\nmsg.topic = ''\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 304,
        "y": 1722,
        "wires": [
            [
                "41da0856e2e6b0ca",
                "760c2fbc7cc334ab"
            ]
        ]
    },
    {
        "id": "cd3a049985db023b",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "INSERT INTO [node_red].[dbo].[mytable] (Age, M) VALUES (100, global.get(\"count\") )",
        "outField": "payload",
        "x": 580,
        "y": 1660,
        "wires": [
            [
                "760c2fbc7cc334ab"
            ]
        ]
    },
    {
        "id": "b2bacd808c6061be",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 19",
        "func": "var test = msg.payload[0].BREAKDOWN;\nvar tag1 = test \nmsg.payload = tag1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "3764baf6ad98126e",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar gk = global.get(\"counter\");\nvar gk_1 = 1\nvar pld = \"UPDATE [node_red].[dbo].[DOWN_TIME_1] \"      \n\n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + gk_1 + \"')\"\n\npld = pld + \"SET BREAKDOWN = \" + gk \n\npld = pld + \" WHERE ID = 1 \"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 160,
        "wires": [
            [
                "786ec71671bd186f"
            ]
        ]
    },
    {
        "id": "786ec71671bd186f",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 740,
        "y": 140,
        "wires": [
            [
                "6a6e6dcabdd74311"
            ]
        ]
    },
    {
        "id": "6a6e6dcabdd74311",
        "type": "delay",
        "z": "425c2d210e2ada1e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "085cd34b8fec3eba",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_2\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT DATE,FINAL_OEE,TOTAL_DOWN,PRODUCTION_COUNT,PRODUCTION_PLAN_TIME,BREAKDWON,NOLOAD,GAS_CONSUMPTION,POWER_CONSUMPTION,BREAKDOWN_LOSS,POWER_LOSS,ORGANIZATION_LOSS,QUALITY_LOSS,SETUP_LOSS,NOLOAD_LOSS,SAMPLE_LOSS,LIFTER_LOSS,TECHNICAL_LOSS,UNACCOUNT_LOSS \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[MC_DAILY_PRODUCTION_HISTORY] \"\n\npld = pld + \"WHERE DATE = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 440,
        "wires": [
            [
                "62307c62d046060e"
            ]
        ]
    },
    {
        "id": "62307c62d046060e",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1060,
        "y": 440,
        "wires": [
            [
                "635568064e4f1c09",
                "82efbc7a7b243331",
                "82aae71d13c0a592",
                "02a050fb9fba0c50",
                "c5ed576ebf58157e",
                "8a10104c511f15f3",
                "144eb6c499eebf4a",
                "0998c6d01c19614f",
                "765b8d5474e6008f",
                "afadfbe319b7c238",
                "e87233562e9a233d"
            ]
        ]
    },
    {
        "id": "c842ebeeba0b91b2",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "set_date_off",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "set_date_off",
                "pt": "global",
                "to": "payload",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 540,
        "wires": [
            [
                "085cd34b8fec3eba"
            ]
        ]
    },
    {
        "id": "84284496fe5d4c01",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[   {   \"labels\": [$$.payload.TIME],   \"data\":[[$$.payload.TOTAL_DOWN_TIME]],   \"series\":[]     } ]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1700,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0998c6d01c19614f",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[   {   \"labels\": [\"BREAKDWON\",\"NOLOAD\"],   \"data\":[$$.payload.BREAKDWON,$$.payload.NOLOAD],   \"series\":[$split($moment($$.payload.DATE).tz(\"Asia/Calcutta\").format(\"YYYY-MM-DD\"),\"T\")]  } ]\t\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 580,
        "wires": [
            [
                "c837bb21cb9be6b6"
            ]
        ]
    },
    {
        "id": "3bd67a961eb7c327",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[   {   \"labels\": [$$.payload.TIME],   \"data\":[$$.payload.NO_LOAD,$$.payload.BREAK_DOWN],   \"series\":[]  } ]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1720,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "687ed41872cdce97",
        "type": "ui_date_picker",
        "z": "425c2d210e2ada1e",
        "name": "",
        "label": "DATE",
        "group": "c74e474b1bf5bfb4",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "6d4457cd9566070f"
            ]
        ]
    },
    {
        "id": "9ded08af6daf6ad9",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "set_date_on_2",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "set_date_on_2",
                "pt": "global",
                "to": "payload",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "c837bb21cb9be6b6",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "c74e474b1bf5bfb4",
        "order": 47,
        "width": 6,
        "height": 5,
        "label": "DOWN TIME (Sec.)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1590,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "c97512623ec38c0c",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "set_date_on",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "set_date_on",
                "pt": "global",
                "to": "payload",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 500,
        "wires": [
            [
                "085cd34b8fec3eba"
            ]
        ]
    },
    {
        "id": "762b8059b9eec883",
        "type": "ui_button",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "c74e474b1bf5bfb4",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "ENTER",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 660,
        "y": 420,
        "wires": [
            [
                "085cd34b8fec3eba"
            ]
        ]
    },
    {
        "id": "82efbc7a7b243331",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[   {   \"labels\": [\"PRODUCTION-\"+$$.payload.PRODUCTION_COUNT],   \"data\":[$$.payload.PRODUCTION_COUNT],   \"series\":[]  } ]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "635568064e4f1c09",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 44",
        "func": "var oee = msg.payload[0].FINAL_OEE;\nmsg.payload = oee\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 720,
        "wires": [
            [
                "2d225043f8e3d056"
            ]
        ]
    },
    {
        "id": "2d225043f8e3d056",
        "type": "ui_gauge",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "c74e474b1bf5bfb4",
        "order": 9,
        "width": 6,
        "height": 5,
        "gtype": "donut",
        "title": "OEE %",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#00b500",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1400,
        "y": 720,
        "wires": []
    },
    {
        "id": "250e327f4a701bf7",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "c74e474b1bf5bfb4",
        "order": 35,
        "width": 6,
        "height": 5,
        "label": "TOTAL PRODUCTION (No's.)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#ddec09",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1470,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "82aae71d13c0a592",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 45",
        "func": "var gas = msg.payload[0].GAS_CONSUMPTION;\nmsg.payload = gas\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 760,
        "wires": [
            [
                "734568277648b9b0"
            ]
        ]
    },
    {
        "id": "02a050fb9fba0c50",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 46",
        "func": "var pwr = msg.payload[0].POWER_CONSUMPTION;\nmsg.payload = pwr\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 820,
        "wires": [
            [
                "2236fe2b0cbdf6b8"
            ]
        ]
    },
    {
        "id": "734568277648b9b0",
        "type": "ui_gauge",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "c74e474b1bf5bfb4",
        "order": 59,
        "width": 6,
        "height": 5,
        "gtype": "gage",
        "title": "GAS CONSUMPTION (m³/h)",
        "label": "m³/h)",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#09f6f2",
            "#09f6f2",
            "#09f6f2"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1460,
        "y": 760,
        "wires": []
    },
    {
        "id": "2236fe2b0cbdf6b8",
        "type": "ui_gauge",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "c74e474b1bf5bfb4",
        "order": 65,
        "width": 6,
        "height": 5,
        "gtype": "gage",
        "title": "ELECTRICITY CONSUMPTION (Kwh)",
        "label": "Kwh",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#f27907",
            "#f27907",
            "#f27907"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1490,
        "y": 820,
        "wires": []
    },
    {
        "id": "e81a4c146b28eaa5",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_2\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT TIME,MACHINE_NAME,MODEL_NAME,OPERATOR_NAME,INSPECTOR_NAME,LEAF_NO,SECTION,WEIGHT,QTY,TOTAL_WEIGHT,DEFECT \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[QT_DAILY_REJECTION_HISTORY_1] \"\n\npld = pld + \"WHERE SELECTED_DATE = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 320,
        "wires": [
            [
                "5cfd133776311e6b"
            ]
        ]
    },
    {
        "id": "c5ed576ebf58157e",
        "type": "delay",
        "z": "425c2d210e2ada1e",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1220,
        "y": 320,
        "wires": [
            [
                "e81a4c146b28eaa5"
            ]
        ]
    },
    {
        "id": "39c4b942c125bd5f",
        "type": "ui_table",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "name": "REJECTION",
        "order": 33,
        "width": 21,
        "height": 5,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1670,
        "y": 280,
        "wires": []
    },
    {
        "id": "5cfd133776311e6b",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1500,
        "y": 320,
        "wires": [
            [
                "39c4b942c125bd5f"
            ]
        ]
    },
    {
        "id": "fe7b6646c6aa1401",
        "type": "ui_text",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "order": 30,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "REJECTION",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1670,
        "y": 240,
        "wires": []
    },
    {
        "id": "8a10104c511f15f3",
        "type": "delay",
        "z": "425c2d210e2ada1e",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1220,
        "y": 360,
        "wires": [
            [
                "b199eeea592827ed"
            ]
        ]
    },
    {
        "id": "b199eeea592827ed",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_2\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT TIME,PROBLEM,AREA,ACTION,FREQUENT,LOSS \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[break_down_history_1] \"\n\npld = pld + \"WHERE SLECTED_DATE = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 360,
        "wires": [
            [
                "c7910b7df8fb5a02"
            ]
        ]
    },
    {
        "id": "c7910b7df8fb5a02",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1500,
        "y": 360,
        "wires": [
            [
                "6395e3926b8d250c"
            ]
        ]
    },
    {
        "id": "6395e3926b8d250c",
        "type": "ui_table",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "name": "BREAKDOWN",
        "order": 49,
        "width": 21,
        "height": 5,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1680,
        "y": 360,
        "wires": []
    },
    {
        "id": "37b276e2b0eb7e9b",
        "type": "ui_text",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "order": 45,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "BREAKDOWN",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1680,
        "y": 320,
        "wires": []
    },
    {
        "id": "144eb6c499eebf4a",
        "type": "delay",
        "z": "425c2d210e2ada1e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 520,
        "wires": [
            [
                "480bd9fdf1444f8c"
            ]
        ]
    },
    {
        "id": "480bd9fdf1444f8c",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_2\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT DATE,PRODUCT_NAME,PRODUCT_QTY,PRODUCTION_COUNT,PRODUCTION_PLAN_TIME,MACHINE_CYCLE_TIME,ACTUAL_OEE,OPERATOR_NAME \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[MC_DAILY_PRODUCTION_1] \"\n\npld = pld + \"WHERE DATE = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 520,
        "wires": [
            [
                "923fb7fa55e63bbb"
            ]
        ]
    },
    {
        "id": "923fb7fa55e63bbb",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1580,
        "y": 520,
        "wires": [
            [
                "1a753379cce33329"
            ]
        ]
    },
    {
        "id": "1a753379cce33329",
        "type": "ui_table",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "name": "PRODUCTION",
        "order": 7,
        "width": 21,
        "height": 4,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1760,
        "y": 520,
        "wires": []
    },
    {
        "id": "0c7d1930a46842fb",
        "type": "ui_text",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "order": 3,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "PRODUCTION",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1760,
        "y": 480,
        "wires": []
    },
    {
        "id": "b56b3e2b1730fed0",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "from_dte_moth",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "from_dte_moth",
                "pt": "global",
                "to": "payload",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "15163ab1787e9dc3",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "to_dte_moth",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "to_dte_moth",
                "pt": "global",
                "to": "payload",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "02f589e677a5a70e",
        "type": "ui_date_picker",
        "z": "425c2d210e2ada1e",
        "name": "",
        "label": "FROM DATE",
        "group": "7d424c3483352a72",
        "order": 1,
        "width": 9,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 170,
        "y": 1120,
        "wires": [
            [
                "e3f61c4bda8701d5"
            ]
        ]
    },
    {
        "id": "b78bdda5f00aeee1",
        "type": "ui_date_picker",
        "z": "425c2d210e2ada1e",
        "name": "",
        "label": "TO DATE",
        "group": "7d424c3483352a72",
        "order": 3,
        "width": 9,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "d26f4b31a57279b0"
            ]
        ]
    },
    {
        "id": "750f93ce4a60e519",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var ontime = flow.get(\"from_dte_moth\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"to_dte_moth\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT DATE,FINAL_OEE,TOTAL_DOWN,PRODUCTION_COUNT,PRODUCTION_PLAN_TIME,BREAKDWON,NOLOAD,GAS_CONSUMPTION,POWER_CONSUMPTION,BREAKDOWN_LOSS,POWER_LOSS,ORGANIZATION_LOSS,QUALITY_LOSS,SETUP_LOSS,NOLOAD_LOSS \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[MC_DAILY_PRODUCTION_HISTORY] \"\n\n//pld = pld + \"WHERE DATE = '\" + ontime + \" ' \";\npld = pld + \"WHERE DATE BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY DATE \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1000,
        "wires": [
            [
                "f53bc16851e1966f"
            ]
        ]
    },
    {
        "id": "7e58f0b9aa72c896",
        "type": "ui_button",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "7d424c3483352a72",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "ENTER",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 680,
        "y": 1000,
        "wires": [
            [
                "750f93ce4a60e519"
            ]
        ]
    },
    {
        "id": "f53bc16851e1966f",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1060,
        "y": 1000,
        "wires": [
            [
                "dfe7119c816f3cf4",
                "c7c69dd174244668",
                "c86b58c188f4b14b",
                "1d63e36e9bdf0a9b",
                "88e5590727b8394b",
                "8be9304b9340f9e2",
                "cbabba9f3c5b485b"
            ]
        ]
    },
    {
        "id": "84afa2947c5b3305",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "7d424c3483352a72",
        "order": 30,
        "width": 13,
        "height": 6,
        "label": "DOWN TIME BREAKDWON (Sec.)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "no data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1580,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "935d5bb8ead95cc5",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 47",
        "func": "var v = Object.keys(msg.payload).length;\n\nvar k = msg.payload\nvar data = [];\nvar date = [];\nvar date_1 = [];\nvar data_1 = [];\n\nfor (let i = 0; i < v; i++) {\n\n    //msg.payload = [{ \"labels\": [date], \"data\": [data], \"series\": [] }] \n    //momv(date.push(k[i].DATE));\n    //var obj = momv(date)\n\n    data.push(k[i].FINAL_OEE)\n    date.push(k[i].DATE)\n    data_1[i] = data[i];\n    console.log(data_1)\n}\n//var msgPayload = msg.payload;\nmsg.payload = [{ \"series\": [], \"data\": [data_1], \"labels\": date }]\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f33c8c6731ceaec7",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "7d424c3483352a72",
        "order": 11,
        "width": 13,
        "height": 6,
        "label": "TOTAL PRODUCTION (No's.)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#ddec09",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1590,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "51ad18ac50696776",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 48",
        "func": "var v = Object.keys(msg.payload).length;\n\nvar k = msg.payload\nvar data = [];\nvar date = [];\nvar date_1 = [];\nvar data_1 = [];\n\nfor (let i = 0; i < v; i++) {\n\n    //msg.payload = [{ \"labels\": [date], \"data\": [data], \"series\": [] }] \n    //momv(date.push(k[i].DATE));\n    //var obj = momv(date)\n\n    data.push(k[i].GAS_CONSUMPTION)\n    date.push(k[i].DATE)\n    data_1[i] = data[i];\n    console.log(data_1)\n}\n//var msgPayload = msg.payload;\nmsg.payload = [{ \"series\": [], \"data\": [data_1], \"labels\": date }]\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "21147bc2e28f7673",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 49",
        "func": "var v = Object.keys(msg.payload).length;\n\nvar k = msg.payload\nvar data = [];\nvar date = [];\nvar date_1 = [];\nvar data_1 = [];\n\nfor (let i = 0; i < v; i++) {\n\n    //msg.payload = [{ \"labels\": [date], \"data\": [data], \"series\": [] }] \n    //momv(date.push(k[i].DATE));\n    //var obj = momv(date)\n\n    data.push(k[i].POWER_CONSUMPTION)\n    date.push(k[i].DATE)\n    data_1[i] = data[i];\n    console.log(data_1)\n}\n//var msgPayload = msg.payload;\nmsg.payload = [{ \"series\": [], \"data\": [data_1], \"labels\": date }]\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "dfe7119c816f3cf4",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 51",
        "func": "var v = Object.keys(msg.payload).length;\n\nvar k = msg.payload\nvar data = [];\nvar date = [];\nvar date_1 = [];\nvar data_1 = [];\n\nfor (let i=0;i<v;i++){\n     \n    //msg.payload = [{ \"labels\": [date], \"data\": [data], \"series\": [] }] \n    //momv(date.push(k[i].DATE));\n    //var obj = momv(date)\n    \n    data.push(k[i].BREAKDWON)\n    date.push(k[i].DATE)\n    data_1[i]= data[i];\n    console.log(data_1)\n}\n//var msgPayload = msg.payload;\nmsg.payload = [{ \"series\": [], \"data\": [data_1], \"labels\": date }]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "c5421951fc3b2f5c",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 52",
        "func": "var v = Object.keys(msg.payload).length;\n\nvar k = msg.payload\nvar data = [];\nvar date = [];\nvar date_1 = [];\nvar data_1 = [];\n\nfor (let i=0;i<v;i++){\n     \n    //msg.payload = [{ \"labels\": [date], \"data\": [data], \"series\": [] }] \n    //momv(date.push(k[i].DATE));\n    //var obj = momv(date)\n    \n    data.push(k[i].PRODUCTION_COUNT)\n    date.push(k[i].DATE)\n    data_1[i]= data[i];\n    console.log(data_1)\n}\n//var msgPayload = msg.payload;\nmsg.payload = [{ \"series\": [], \"data\": [data_1], \"labels\": date }]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "05772cc3a1c50ff7",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "7d424c3483352a72",
        "order": 9,
        "width": 13,
        "height": 6,
        "label": "OEE %",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#ff7f0e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1520,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "e65b5ec995b6ed36",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "7d424c3483352a72",
        "order": 51,
        "width": 13,
        "height": 6,
        "label": "GAS CONSUMPTION (m³/h)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#0fefff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1580,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "87283c87773f09b4",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "7d424c3483352a72",
        "order": 53,
        "width": 13,
        "height": 6,
        "label": "ELECTRICITY CONSUMPTION (Kwh)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#ff0f3f",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1610,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "c7c69dd174244668",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\t\"labels\":[],\t\"series\":$distinct(*.$substring($string(DATE),1, 10)),\t\"data\":$each(payload{$string(DATE):BREAKDWON}, function($val){[$val]})\t}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 940,
        "wires": [
            [
                "84afa2947c5b3305"
            ]
        ]
    },
    {
        "id": "c86b58c188f4b14b",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "function 52",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\t\"labels\":[],\t\"series\":$distinct(*.$substring($string(DATE),1, 10)),\t\"data\":$each(payload{$string(DATE):PRODUCTION_COUNT}, function($val){[$val]})\t}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 1020,
        "wires": [
            [
                "f33c8c6731ceaec7"
            ]
        ]
    },
    {
        "id": "1d63e36e9bdf0a9b",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "function 47",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\t\"labels\":[],\t\"series\":$distinct(*.$substring($string(DATE),1, 10)),\t\"data\":$each(payload{$string(DATE):FINAL_OEE}, function($val){[$val]})\t}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 1060,
        "wires": [
            [
                "05772cc3a1c50ff7"
            ]
        ]
    },
    {
        "id": "88e5590727b8394b",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "function 48",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\t\"labels\":[],\t\"series\":$distinct(*.$substring($string(DATE),1, 10)),\t\"data\":$each(payload{$string(DATE):GAS_CONSUMPTION}, function($val){[$val]})\t}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 1100,
        "wires": [
            [
                "e65b5ec995b6ed36"
            ]
        ]
    },
    {
        "id": "8be9304b9340f9e2",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "function 49",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\t\"labels\":[],\t\"series\":$distinct(*.$substring($string(DATE),1, 10)),\t\"data\":$each(payload{$string(DATE):POWER_CONSUMPTION}, function($val){[$val]})\t}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 1140,
        "wires": [
            [
                "87283c87773f09b4"
            ]
        ]
    },
    {
        "id": "cbabba9f3c5b485b",
        "type": "change",
        "z": "425c2d210e2ada1e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[{\t\"labels\":[],\t\"series\":$distinct(*.$substring($string(DATE),1, 10)),\t\"data\":$each(payload{$string(DATE):NOLOAD}, function($val){[$val]})\t}]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 980,
        "wires": [
            [
                "cd2c411bbda2a580"
            ]
        ]
    },
    {
        "id": "cd2c411bbda2a580",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "7d424c3483352a72",
        "order": 32,
        "width": 13,
        "height": 6,
        "label": "DOWN TIME NOLOAD (Sec.)",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "no data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1570,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "765b8d5474e6008f",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 127",
        "func": "var labels = msg.payload[0].DATE;\nvar production = msg.payload[0].PRODUCTION_COUNT;\n\n\nmsg.payload = [\n    {\n        \"series\": [],\n        \"data\": [production],\n        \"labels\": [\"PRODUCTION--\" + production + \" NO'S\"]\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "250e327f4a701bf7"
            ]
        ]
    },
    {
        "id": "29c8413636bfe5a4",
        "type": "ui_chart",
        "z": "425c2d210e2ada1e",
        "name": "",
        "group": "c74e474b1bf5bfb4",
        "order": 22,
        "width": 6,
        "height": 5,
        "label": "OEE VS LOSSES %",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "no data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#ff7f0e",
            "#aec7e8",
            "#0fefff",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1120,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "3f7be705b178ba0b",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "month oee vs loss",
        "func": "var labels = [\"OEE\", \"BREAKDOWN\", \"POWER\", \"ORGANIZATION\", \"QUALITY\", \"SETUP\", \"NOLOAD\"];\nvar oee = [];\nvar production = [[oee, breakdown, power, organization, quality, setup, no_load]];\nvar breakdown = [];\nvar power = [];\nvar organization = [];\nvar quality = [];\nvar setup = [];\nvar no_load = [];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    //labels.push[i];\n    oee.push(msg.payload[i].FINAL_OEE);\n    breakdown.push(msg.payload[i].BREAKDOWN_LOSS);\n    power.push(msg.payload[i].POWER_LOSS);\n    organization.push(msg.payload[i].ORGANIZATION_LOSS);\n    quality.push(msg.payload[i].QUALITY_LOSS);\n    setup.push(msg.payload[i].SETUP_LOSS);\n    no_load.push(msg.payload[i].NOLOAD_LOSS);\n}\n\nmsg.payload = [\n    {\n        \"series\":[],\n        \"data\": [12,11.0,12.0,1.0,12.3,12.0,20.0],\n        \"labels\": [\"OEE %\", \"BREAKDOWN %\", \"POWER %\", \"ORGANIZATION %\", \"QUALITY %\", \"SETUP %\", \"NOLOAD %\"]\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "eea3916d0781600e",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "month oee vs loss",
        "func": "var labels = [\"OEE\", \"BREAKDOWN\", \"POWER\", \"ORGANIZATION\", \"QUALITY\", \"SETUP\", \"NOLOAD\"];\nvar oee = [];\nvar production = [[oee, breakdown, power, organization, quality, setup, no_load]];\nvar breakdown = [];\nvar power = [];\nvar organization = [];\nvar quality = [];\nvar setup = [];\nvar no_load = [];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    //labels.push[i];\n    oee.push(msg.payload[i].FINAL_OEE);\n    breakdown.push(msg.payload[i].BREAKDOWN_LOSS);\n    power.push(msg.payload[i].POWER_LOSS);\n    organization.push(msg.payload[i].ORGANIZATION_LOSS);\n    quality.push(msg.payload[i].QUALITY_LOSS);\n    setup.push(msg.payload[i].SETUP_LOSS);\n    no_load.push(msg.payload[i].NOLOAD_LOSS);\n}\n\nmsg.payload = [\n    {\n        \"series\":[],\n        \"data\": [12,11.0,12.0,1.0,12.3,12.0,20.0],\n        \"labels\": [\"OEE %\", \"BREAKDOWN %\", \"POWER %\", \"ORGANIZATION %\", \"QUALITY %\", \"SETUP %\", \"NOLOAD %\"]\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "afadfbe319b7c238",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 128",
        "func": "var labels = msg.payload[0].DATE;\nvar oee = msg.payload[0].FINAL_OEE;\nvar production = [];\n//var breakdown = msg.payload[0].BREAKDOWN_LOSS;\n//var power = msg.payload[0].POWER_LOSS;\nvar organization = msg.payload[0].ORGANIZATION_LOSS;\nvar quality = msg.payload[0].QUALITY_LOSS;\nvar setup = msg.payload[0].SETUP_LOSS;\nvar technical = msg.payload[0].TECHNICAL_LOSS;\nvar uncount = msg.payload[0].UNACCOUNT_LOSS;\n//var no_load = msg.payload[0].NOLOAD_LOSS;\n\nmsg.payload = [\n    {\n        \"series\": [],\n        \"data\": [[oee, organization, quality, setup, technical, uncount]],\n        \"labels\": [\"OEE-\" + oee + \" %\", \"ORGANIZATION-\" + organization + \" %\", \"QUALITY-\" + quality + \" %\", \"SETUP-\" + setup + \" %\", \"TECHNICAL-\" + technical + \" %\", \"UNACCOUNTABLE-\" + uncount + \" %\"]\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 820,
        "wires": [
            [
                "29c8413636bfe5a4"
            ]
        ]
    },
    {
        "id": "8d584be13088fe52",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 133",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "6d4457cd9566070f",
        "type": "moment",
        "z": "425c2d210e2ada1e",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Asia/Calcutta",
        "adjAmount": 0,
        "adjType": "years",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD",
        "locale": "en-US",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Asia/Calcutta",
        "x": 360,
        "y": 700,
        "wires": [
            [
                "9ded08af6daf6ad9"
            ]
        ]
    },
    {
        "id": "e3f61c4bda8701d5",
        "type": "moment",
        "z": "425c2d210e2ada1e",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Asia/Calcutta",
        "adjAmount": 0,
        "adjType": "years",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD",
        "locale": "en-US",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Asia/Calcutta",
        "x": 360,
        "y": 1120,
        "wires": [
            [
                "b56b3e2b1730fed0"
            ]
        ]
    },
    {
        "id": "d26f4b31a57279b0",
        "type": "moment",
        "z": "425c2d210e2ada1e",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Asia/Calcutta",
        "adjAmount": 0,
        "adjType": "years",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD",
        "locale": "en-US",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Asia/Calcutta",
        "x": 360,
        "y": 1180,
        "wires": [
            [
                "15163ab1787e9dc3"
            ]
        ]
    },
    {
        "id": "7f3e8e46c6e4a2fd",
        "type": "inject",
        "z": "425c2d210e2ada1e",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 890,
        "y": 500,
        "wires": [
            [
                "62307c62d046060e"
            ]
        ]
    },
    {
        "id": "26bc3dca037a0d82",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "function 151",
        "func": "var labels = msg.payload[0].DATE;\nvar oee = msg.payload[0].FINAL_OEE;\nvar production = [];\nvar breakdown = msg.payload[0].BREAKDOWN_LOSS;\nvar power = msg.payload[0].POWER_LOSS;\nvar organization = msg.payload[0].ORGANIZATION_LOSS;\nvar quality = msg.payload[0].QUALITY_LOSS;\nvar setup = msg.payload[0].SETUP_LOSS;\nvar no_load = msg.payload[0].NOLOAD_LOSS;\n\nmsg.payload = [\n    {\n        \"series\": [],\n        \"data\": [[oee, breakdown, power, organization, quality, setup, no_load]],\n        \"labels\": [\"OEE-\" + oee + \" %\", \"BREAKDOWN-\" + breakdown + \" %\", \"POWER-\" + power + \" %\", \"ORGANIZATION-\" + organization + \" %\", \"QUALITY-\" + quality + \" %\", \"SETUP-\" + setup + \" %\", \"NOLOAD-\" + no_load + \" %\"]\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e87233562e9a233d",
        "type": "delay",
        "z": "425c2d210e2ada1e",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1240,
        "y": 440,
        "wires": [
            [
                "49d1e88b91a79ba3"
            ]
        ]
    },
    {
        "id": "49d1e88b91a79ba3",
        "type": "function",
        "z": "425c2d210e2ada1e",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_2\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT DATE,BREAKDOWN_LOSS,POWER_LOSS,NOLOAD_LOSS,SAMPLE_LOSS,LIFTER_LOSS,MANPOWER_LOSS \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[MC_DAILY_PRODUCTION_HISTORY] \"\n\npld = pld + \"WHERE DATE = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 440,
        "wires": [
            [
                "de52a4f045768549"
            ]
        ]
    },
    {
        "id": "de52a4f045768549",
        "type": "MSSQL",
        "z": "425c2d210e2ada1e",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1560,
        "y": 440,
        "wires": [
            [
                "b2b539e4e5961aab"
            ]
        ]
    },
    {
        "id": "b2b539e4e5961aab",
        "type": "ui_table",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "name": "PRODUCTION LOSS",
        "order": 20,
        "width": 21,
        "height": 4,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1760,
        "y": 440,
        "wires": []
    },
    {
        "id": "d0c71a6679117e99",
        "type": "ui_text",
        "z": "425c2d210e2ada1e",
        "group": "c74e474b1bf5bfb4",
        "order": 17,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "PRODUCTION LOSS",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1760,
        "y": 400,
        "wires": []
    },
    {
        "id": "7eb451d0b43903cc",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1370,
        "y": 960,
        "wires": [
            [
                "912bd156ee286acd",
                "cf951ad19b905b6f",
                "431262c1bd93411f",
                "8fc843f101c6f6ed",
                "987e4cc7b470b98f"
            ]
        ]
    },
    {
        "id": "47158ee4761e1e39",
        "type": "debug",
        "z": "dbb1dbaace426118",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 4880,
        "wires": []
    },
    {
        "id": "c2b47220d65b585f",
        "type": "debug",
        "z": "dbb1dbaace426118",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 5080,
        "wires": []
    },
    {
        "id": "df57e4613b7a983a",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 1",
        "func": "if (msg.originalMessage.command === \"parabolic-3\") {\n    // check if the user has access to execute this function\n         \n     return [msg, null];\n    \n    \n    } else {\n        return [null, msg];\n    }",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 5060,
        "wires": [
            [
                "53e9dd80ef26a6fc"
            ],
            [
                "a7f6223074c33966"
            ]
        ]
    },
    {
        "id": "54ef6a4f9f2e49d8",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 2",
        "func": "var mes = msg.payload;\n\nvar a  =  mes.object.chatId;\n\n\n\nmsg.payload = a ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 4900,
        "wires": [
            [
                "c2b47220d65b585f"
            ]
        ]
    },
    {
        "id": "53e9dd80ef26a6fc",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 3",
        "func": "var ms = global.get('D100');\nvar mf = global.get('D102');\nvar ma = global.get('D104');\nvar gk = \"HI.. PARABOLIC-3 OEE\" + \"\\r\\n\";\n    gk += \"TOTAL PRODUCTION:\" + ms + \" NO.\" + \"\\r\\n\";\n    gk += \"DOWN TIME:\" + mf + \" min\" + \"\\r\\n\";\n    gk += \"RUNNING PRODUCT:\" + ma;\nmsg.payload.content = gk;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 4960,
        "wires": [
            [
                "b8efc76d4b5e0c50",
                "ca6fcb1922622aa8"
            ]
        ]
    },
    {
        "id": "a7f6223074c33966",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 4",
        "func": "var ms = \"Kindly Type Correct Word\";\nmsg.payload.content = ms;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 5040,
        "wires": [
            [
                "b8efc76d4b5e0c50"
            ]
        ]
    },
    {
        "id": "0bc560edda8a296a",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "Language processing",
        "func": "\nvar commands = [\"parabolic-3\" ];\n\nvar temp = msg.payload.content.toLowerCase();\nvar arr = temp.split(\" \");\n\n\nfor (var i = 0; i < commands.length; i++) {\n    for (var j = 0; j < arr.length; j++) {\n        if (arr[j] === commands[i]) {\n            msg.originalMessage.command = commands[i];\n            return msg;\n        }\n    }\n}\n\n\ntemp = temp.replace(\"a \", \"\");\ntemp = temp.replace(\"the \", \"\");\ntemp = temp.replace(\"what \", \"\");\ntemp = temp.replace(\"is \", \"\");\ntemp = temp.replace(\"to \", \"\");\ntemp = temp.replace(\"lights\", \"light\");\ntemp = temp.replace(\"light \", \"\");\ntemp = temp.replace(\"light\", \"\");\n\n\n\n\nif (temp.indexOf(\"turn\") > -1) {\n    temp = temp.replace(\"turn \", \"\");\n    msg.originalMessage.command = \"switch\";\n}\nif (temp.indexOf(\"switch\") > -1) {\n    temp = temp.replace(\"switch \", \"\");\n    msg.originalMessage.command = \"switch\";\n}\n\n\nvar lastIndex = temp.indexOf(\" \");\nvar voice_state = temp.substring(0, lastIndex).trim();\nvar voice_thing = temp.substring(lastIndex + 1, temp.length).trim();\n\n\n\nif (voice_state === \"on\") {\n    msg.originalMessage.state = \"1\";\n}\nif (voice_state === \"off\") {\n    msg.originalMessage.state = \"0\";\n}\n\n\nmsg.originalMessage.thing = voice_thing;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 4960,
        "wires": [
            [
                "df57e4613b7a983a"
            ]
        ]
    },
    {
        "id": "639a0125ecacb6c8",
        "type": "debug",
        "z": "dbb1dbaace426118",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 5140,
        "wires": []
    },
    {
        "id": "ca6fcb1922622aa8",
        "type": "debug",
        "z": "dbb1dbaace426118",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 4840,
        "wires": []
    },
    {
        "id": "2969f1103597ca86",
        "type": "ui_button",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "group": "",
        "order": 2,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "BreakDown",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "maintenance",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 4200,
        "wires": [
            [
                "dafb4e90cf805ecc",
                "d066f1935ff868bc"
            ]
        ]
    },
    {
        "id": "a9e1a9c33f577c94",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "order": 8,
        "width": 1,
        "height": 1,
        "name": "",
        "label": "TOTAL DOWN TIME (Sec) :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1200,
        "y": 4540,
        "wires": []
    },
    {
        "id": "de232135632b2dce",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "BREAK_COUNT",
        "func": "var counter = global.get(\"counter\") || 0\ncounter ++ \nglobal.set(\"counter\",counter)\nmsg.payload = counter\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 4620,
        "wires": [
            [
                "fe255b148caf1d08"
            ]
        ]
    },
    {
        "id": "0e7630bf8c662674",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 9",
        "func": "var k = \"NOT SELECTED\";\nmsg.payload = k;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 4220,
        "wires": [
            []
        ]
    },
    {
        "id": "6b63231416bbb876",
        "type": "ui_button",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "group": "",
        "order": 6,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "NOT SELECTION",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 4340,
        "wires": [
            [
                "44f65d37c49677aa"
            ]
        ]
    },
    {
        "id": "dafb4e90cf805ecc",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "main",
                "pt": "global",
                "to": "maintenance",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 4180,
        "wires": [
            []
        ]
    },
    {
        "id": "92fae9456fec488a",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 4720,
        "wires": [
            [
                "8cb91f1542e14aa2",
                "182c36cbf9985d77"
            ]
        ]
    },
    {
        "id": "a59bd931f036fe83",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "main",
                "pt": "global",
                "to": "lk",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 4300,
        "wires": [
            []
        ]
    },
    {
        "id": "d066f1935ff868bc",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 12",
        "func": "if (msg.payload == \"maintenance\") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4220,
        "wires": [
            [],
            [
                "0e7630bf8c662674"
            ]
        ]
    },
    {
        "id": "fe255b148caf1d08",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "count",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "count",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 4720,
        "wires": [
            [
                "757e584080a3f975"
            ]
        ]
    },
    {
        "id": "8cb91f1542e14aa2",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 10",
        "func": "var m = global.get(\"main\");\n\nif (m == \"maintenance\") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 4720,
        "wires": [
            [
                "de232135632b2dce",
                "71b4accdb58faea9"
            ],
            []
        ]
    },
    {
        "id": "5224f9a18181814d",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 4420,
        "wires": [
            [
                "719d8063ca8795e8",
                "6d39af96fd660f73"
            ]
        ]
    },
    {
        "id": "719d8063ca8795e8",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 14",
        "func": "var md = global.get(\"main\");\nif (md != \"maintenance\") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 4420,
        "wires": [
            [
                "d075028a62c16d48",
                "5409e3e09a2bdb4b"
            ],
            []
        ]
    },
    {
        "id": "a371565fda65856e",
        "type": "comment",
        "z": "dbb1dbaace426118",
        "name": "BREAKDOWN AND NO LOAD COUNT",
        "info": "",
        "x": 590,
        "y": 4680,
        "wires": []
    },
    {
        "id": "0855caae1db635ef",
        "type": "ui_button",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "group": "",
        "order": 4,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "NO LOAD",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "no_load",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 4280,
        "wires": [
            [
                "951c7187fcdb57a8",
                "d066f1935ff868bc"
            ]
        ]
    },
    {
        "id": "951c7187fcdb57a8",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "no_load",
                "pt": "global",
                "to": "no load",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 4260,
        "wires": [
            []
        ]
    },
    {
        "id": "182c36cbf9985d77",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 15",
        "func": "var nold = global.get(\"no_load\");\n\nif (nold == \"no load\") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 4780,
        "wires": [
            [
                "941338e6571adca7",
                "75ba268413a4e99b"
            ],
            []
        ]
    },
    {
        "id": "941338e6571adca7",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "NO LOAD_COUNT",
        "func": "var counter_1 = global.get(\"counter_1\") || 0\ncounter_1 ++\nglobal.set(\"counter_1\",counter_1)\nmsg.payload = counter_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 4740,
        "wires": [
            [
                "c811bc888ea0337e"
            ]
        ]
    },
    {
        "id": "c811bc888ea0337e",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "count_1",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "count_1",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 4780,
        "wires": [
            [
                "1a68a46c47f513dc"
            ]
        ]
    },
    {
        "id": "338db5cebc4944a5",
        "type": "comment",
        "z": "dbb1dbaace426118",
        "name": "BREAKDOWN AND NO LOAD COUNT RESET AND LOG",
        "info": "",
        "x": 750,
        "y": 4380,
        "wires": []
    },
    {
        "id": "6d39af96fd660f73",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 16",
        "func": "var md = global.get(\"no_load\");\nif (md != \"no_load\") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 4460,
        "wires": [
            [
                "b9b3caec591b62f9",
                "5409e3e09a2bdb4b"
            ],
            []
        ]
    },
    {
        "id": "b9b3caec591b62f9",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "counter_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 4440,
        "wires": [
            [
                "1a68a46c47f513dc"
            ]
        ]
    },
    {
        "id": "3c9f6715482a38cb",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 4480,
        "wires": [
            [
                "99d533f981dd685c"
            ]
        ]
    },
    {
        "id": "99d533f981dd685c",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "TOTAL",
        "func": "var brk = global.get(\"counter\");\nvar no_lod = global.get(\"counter_1\");\nvar ful =  global.get(\"full_1\")\n\nvar totl = brk+no_lod+ful;\n\nglobal.set (\"totl\",totl)\n\nmsg.payload = totl;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 4500,
        "wires": [
            [
                "a9e1a9c33f577c94",
                "e5acc886a3c4ff8a",
                "6a9b772b0899c5a6",
                "4d43b2e7ecf4494f"
            ]
        ]
    },
    {
        "id": "757e584080a3f975",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "order": 14,
        "width": 1,
        "height": 1,
        "name": "",
        "label": "BREAK DOWN (Sec) :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1540,
        "y": 4720,
        "wires": []
    },
    {
        "id": "1a68a46c47f513dc",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "order": 16,
        "width": 1,
        "height": 1,
        "name": "",
        "label": "NO LOAD (Sec)   :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1530,
        "y": 4780,
        "wires": []
    },
    {
        "id": "7d82be5484ddcf37",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "no_load",
                "pt": "global",
                "to": "lk",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 4340,
        "wires": [
            []
        ]
    },
    {
        "id": "6a9b772b0899c5a6",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "Function",
        "func": "var d = new Date,\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar brkdwn = global.get(\"counter\");\nvar nolod = global.get(\"counter_1\");\nvar tol = global.get(\"FULL\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[DOWN_TIME](TIME,NO_LOAD,BREAKDOWN,TOTAL_DOWN_TIME)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + brkdwn + \"','\" + nolod + \"','\" + tol + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 4340,
        "wires": [
            [
                "f412538363b4047e"
            ]
        ]
    },
    {
        "id": "f412538363b4047e",
        "type": "MSSQL",
        "z": "dbb1dbaace426118",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1760,
        "y": 4380,
        "wires": [
            []
        ]
    },
    {
        "id": "d075028a62c16d48",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "counter",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 4360,
        "wires": [
            []
        ]
    },
    {
        "id": "e5acc886a3c4ff8a",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "FULL",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "FULL",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 4500,
        "wires": [
            []
        ]
    },
    {
        "id": "5409e3e09a2bdb4b",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "TOTAL_HOLD",
        "func": "var ful =  global.get(\"FULL\");\n\n//var full_1 = ful;\n\nglobal.set(\"full_1\", ful);\n\nmsg.payload = ful;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 4320,
        "wires": [
            []
        ]
    },
    {
        "id": "4340d22f6a4b8483",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 17",
        "func": "var md = global.get(\"FULL\");\nif (isNaN(md)) {\n     //check if the user has access to execute this function\n\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n\n\n\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 4560,
        "wires": [
            [
                "0055f9b33e4888b1",
                "40934e746b19903f"
            ],
            []
        ]
    },
    {
        "id": "0055f9b33e4888b1",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "full_1",
                "pt": "global",
                "to": "0",
                "tot": "num",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 4580,
        "wires": [
            []
        ]
    },
    {
        "id": "8ac9e0cd251fa265",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 4540,
        "wires": [
            [
                "4340d22f6a4b8483"
            ]
        ]
    },
    {
        "id": "40934e746b19903f",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "FULL",
                "pt": "global",
                "to": "0",
                "tot": "num",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 4540,
        "wires": [
            []
        ]
    },
    {
        "id": "2d32fd549c53838b",
        "type": "telegram receiver",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "NodeRedBot",
        "bot": "8f4a7ba99bc88fdf",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 330,
        "y": 5100,
        "wires": [
            [
                "639a0125ecacb6c8",
                "0bc560edda8a296a"
            ],
            []
        ]
    },
    {
        "id": "0030db66df048a3d",
        "type": "telegram receiver",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "HK",
        "bot": "8f4a7ba99bc88fdf",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 250,
        "y": 4900,
        "wires": [
            [
                "54ef6a4f9f2e49d8"
            ],
            [
                "54ef6a4f9f2e49d8"
            ]
        ]
    },
    {
        "id": "0146074a7016c0c1",
        "type": "telegram command",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "command": "/start",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "8f4a7ba99bc88fdf",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 230,
        "y": 4960,
        "wires": [
            []
        ]
    },
    {
        "id": "412b4c03ebc3d88c",
        "type": "telegram sender",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "bot": "8f4a7ba99bc88fdf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 530,
        "y": 4880,
        "wires": [
            [
                "47158ee4761e1e39"
            ]
        ]
    },
    {
        "id": "b8efc76d4b5e0c50",
        "type": "telegram sender",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "bot": "8f4a7ba99bc88fdf",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1070,
        "y": 4960,
        "wires": [
            []
        ]
    },
    {
        "id": "b1c0e3749eb60d2c",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "order": 10,
        "width": 1,
        "height": 1,
        "name": "",
        "label": "TOTAL BREAK DOWN (Sec) :",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1330,
        "y": 4600,
        "wires": []
    },
    {
        "id": "790c077a89c17eee",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "order": 12,
        "width": 1,
        "height": 1,
        "name": "",
        "label": "TOTAL NO LOAD (Sec)  :         ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1310,
        "y": 4880,
        "wires": []
    },
    {
        "id": "71b4accdb58faea9",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "TOTAL_BREAK_COUNT",
        "func": "var break_count_t_1 = global.get(\"break_count_t_1\") || 0\nbreak_count_t_1 ++\nglobal.set(\"break_count_t_1\", break_count_t_1)\nmsg.payload = break_count_t_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 4660,
        "wires": [
            [
                "b1c0e3749eb60d2c"
            ]
        ]
    },
    {
        "id": "75ba268413a4e99b",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "TOTAL_NO_LOAD_COUNT",
        "func": "var total_NO_LOAD = global.get(\"total_NO_LOAD\") || 0\ntotal_NO_LOAD ++\nglobal.set(\"total_NO_LOAD\", total_NO_LOAD)\nmsg.payload = total_NO_LOAD\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 4780,
        "wires": [
            [
                "790c077a89c17eee"
            ]
        ]
    },
    {
        "id": "88a3c0f808115450",
        "type": "comment",
        "z": "dbb1dbaace426118",
        "name": "CELL CURRENT STATUS",
        "info": "",
        "x": 290,
        "y": 20,
        "wires": []
    },
    {
        "id": "1fef5766a7d6322e",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "RUNNING",
        "func": "var run = \"MACHINE RUNNING\";\nmsg.payload = run ;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "5874c36bb501b92c",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "STOP",
        "func": "var stop = \"MACHINE STOP\";\nmsg.payload = stop;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "0427d93ad55b8fb6",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "Function",
        "func": "\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar brkdwn = global.get(\"break_count_t_1\");\nvar nolod = global.get(\"total_NO_LOAD\");\nvar tol = global.get(\"FULL\");\n//var dtstmp = new Date().toString();\nvar pld = \"UPDATE [node_red].[dbo].[record_1] \"      \npld = pld + \"SET TOTAL_DWN = '\" + tol + \"' , BREAKDOWN = '\" + brkdwn + \"' ,NOLOAD = '\" + nolod + \"'\"\n\npld = pld + \"WHERE ID = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 4460,
        "wires": [
            [
                "f412538363b4047e"
            ]
        ]
    },
    {
        "id": "4d43b2e7ecf4494f",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 4440,
        "wires": [
            [
                "0427d93ad55b8fb6"
            ]
        ]
    },
    {
        "id": "43026a2fcf425aa0",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 103",
        "func": "var m = global.get(\"machine_data_update\");\n;\n\nif (m == 0) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 4440,
        "wires": [
            [
                "d066f1935ff868bc",
                "a59bd931f036fe83",
                "7d82be5484ddcf37",
                "5224f9a18181814d",
                "3c9f6715482a38cb",
                "8ac9e0cd251fa265"
            ],
            []
        ]
    },
    {
        "id": "44f65d37c49677aa",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 102",
        "func": "var m = global.get(\"del_data_chking\");\n;\n\nif (m == 0) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 4440,
        "wires": [
            [
                "43026a2fcf425aa0"
            ],
            []
        ]
    },
    {
        "id": "97ae04bd53718f56",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "",
        "props": [],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 50,
        "y": 400,
        "wires": [
            [
                "d7565360cfc55f07",
                "bc6c9f5caf089408",
                "08d4c7f6d263a757",
                "9b318b7a18341b71",
                "a599101ada712095"
            ]
        ]
    },
    {
        "id": "568353d1b5b0d756",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "group": "f7f926047d187624",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "MACHINE RUNNING STATUS :",
        "format": "<font face='arial'><font size=4><font color={{fcolor}}>{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "d7565360cfc55f07",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "WIRE CONSUM CELL-1",
        "func": "var cell_1_wire = global.get(\"wire_cell_1_line_1\")\n//msg.payload = cell_1_wire\n\nmsg.payload = 50\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "303614aedcf4d351"
            ]
        ]
    },
    {
        "id": "9b318b7a18341b71",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "MC_STATUS CELL-1",
        "func": "var mc_status = global.get(\"mc_status_cell_1_line_1\");\n\nif (mc_status == 1) {\n    // check if the user has access to execute this function\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn msg;\n//var t_cyl = global.get(\"CY_TIM\");\nmsg.payload = mc_status;\nreturn msg;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 540,
        "wires": [
            [
                "cda0a322fe8503f5"
            ],
            [
                "68054ca49367548a"
            ]
        ]
    },
    {
        "id": "cda0a322fe8503f5",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "RUNNING",
        "func": "var run = \"MACHINE RUNNING\";\nmsg.payload = run ;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 520,
        "wires": [
            [
                "72b458e1a875dae6"
            ]
        ]
    },
    {
        "id": "68054ca49367548a",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "STOP",
        "func": "var stop = \"MACHINE STOP\";\nmsg.payload = stop;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "0d3e0e75790110e0"
            ]
        ]
    },
    {
        "id": "0d3e0e75790110e0",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fcolor",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 520,
        "wires": [
            [
                "568353d1b5b0d756"
            ]
        ]
    },
    {
        "id": "72b458e1a875dae6",
        "type": "change",
        "z": "dbb1dbaace426118",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fcolor",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 500,
        "wires": [
            [
                "568353d1b5b0d756"
            ]
        ]
    },
    {
        "id": "303614aedcf4d351",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "group": "f7f926047d187624",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "WIRE CONSUME:-",
        "format": "{{msg.payload}} Gram",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1170,
        "y": 380,
        "wires": []
    },
    {
        "id": "912bd156ee286acd",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "(ENERGY)",
        "func": "var cell_1_energy = global.get(\"energy_cell_1_line_1\");\nglobal.set(\"cell_1_energy\", cell_1_energy);\nmsg.payload = cell_1_energy\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "cf951ad19b905b6f",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "GAS FLOW",
        "func": "var cell_1_gasflow = global.get(\"flow_cell_1_line_1\")\nmsg.payload = cell_1_gasflow\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "431262c1bd93411f",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "WIRE CONSUM",
        "func": "var cell_1_wire = global.get(\"wire_cell_1_line_1\")\nmsg.payload = cell_1_wire\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "987e4cc7b470b98f",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "PRODUCTION",
        "func": "var production_cell_1_line_1 = global.get(\"production_cell_1_line_1\");\nmsg.payload = production_cell_1_line_1;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "8fc843f101c6f6ed",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "MC_STATUS",
        "func": "var mc_status = global.get(\"mc_status_cell_1_line_1\");\n\nif (mc_status == 1) {\n    // check if the user has access to execute this function\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn msg;\n//var t_cyl = global.get(\"CY_TIM\");\nmsg.payload = mc_status;\nreturn msg;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1060,
        "wires": [
            [
                "1fef5766a7d6322e"
            ],
            [
                "5874c36bb501b92c"
            ]
        ]
    },
    {
        "id": "ddb7f5f3d3075794",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 110,
        "y": 1760,
        "wires": [
            [
                "21e61be26d3157c0"
            ]
        ]
    },
    {
        "id": "21e61be26d3157c0",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "LAST 8 HOURS DATA",
        "func": "var tus = \"'tus'\"; // or whatever value you want\nvar pld = \"UPDATE test SET data = 500 \";\npld += \"WHERE days = \" + tus;\nmsg.payload = pld;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1700,
        "wires": [
            [
                "487fcb5d54b8af44"
            ]
        ]
    },
    {
        "id": "487fcb5d54b8af44",
        "type": "MSSQL",
        "z": "dbb1dbaace426118",
        "mssqlCN": "9c332921d88cdcee",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 560,
        "y": 1640,
        "wires": [
            [
                "764da04ec2c76d12",
                "f3ce329f60bdf2f4",
                "e865f18bf261ca8d"
            ]
        ]
    },
    {
        "id": "7c781f5c6b833523",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 110,
        "y": 2200,
        "wires": [
            [
                "3e6cbe2e3ec6dc98"
            ]
        ]
    },
    {
        "id": "3e6cbe2e3ec6dc98",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "LAST 8 HOURS DATA",
        "func": "var pld = \" SELECT TIME,PROBLEM,AREA,ACTION,FREQUENT,LOSS\" \n    pld = pld+ \" FROM [node_red].[dbo].[break_down] \"\n    pld    = pld + \"ORDER BY TIME\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2200,
        "wires": [
            [
                "7d893b03e4557188"
            ]
        ]
    },
    {
        "id": "7d893b03e4557188",
        "type": "MSSQL",
        "z": "dbb1dbaace426118",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 480,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "5155fcfb021828d2",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 740,
        "wires": [
            [
                "959c55031bba28b8",
                "11d3abb3fc262706"
            ]
        ]
    },
    {
        "id": "ee78a0157f3e56b4",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "h_1_update",
        "func": "msg.ui_control = { tabulator: { columns: [] } };\nmsg.payload = [];\n\nmsg.ui_control = {\n    tabulator: {\n        columns: [\n            { title: \"TIME\", field: \"TIME\", width: 80 },\n            { title: \"PRODUCTION\", field: \"PRODUCTION\", width: 180 },\n            { title: \"ENERGY (Kwh)\", field: \"ENERGY (Kwh)\", width: 200 },\n            { title: \"GAS (CPM)\", field: \"GAS (CPM)\", width: 180 },\n            { title: \"WIRE\", field: \"WIRE\", width: 180 },\n            { title: \"PART NAME\", field: \"PART NAME\", width: 180 }\n        ]\n    }\n};\n\nmsg.payload = [\n    {\n        \"TIME\": \"9:00\",\n        \"PRODUCTION\": \"35\",\n        \"ENERGY (Kwh)\": \"123\",\n        \"GAS (CPM)\": \"120\",\n        \"PART NAME\": \"ABCD\",\n        \"WIRE\": 5\n    },\n    \n    {\n        \"TIME\": \"10:00\",\n        \"PRODUCTION\": \"70\",\n        \"ENERGY (Kwh)\": \"203\",\n        \"GAS (CPM)\": \"220\",\n        \"PART NAME\": \"ABCD\",\n        \"WIRE\": 20\n    },\n    {\n        \"TIME\": \"11:00\",\n        \"PRODUCTION\": \"140\",\n        \"ENERGY (Kwh)\": \"303\",\n        \"GAS (CPM)\": \"320\",\n        \"PART NAME\": \"ANCD\",\n        \"WIRE\": 20\n    },\n    {\n        \"TIME\": \"12:00\",\n        \"PRODUCTION\": \"210\",\n        \"ENERGY (Kwh)\": \"403\",\n        \"GAS (CPM)\": \"420\",\n        \"PART NAME\": \"ANCD\",\n        \"WIRE\": 20\n    },\n    {\n        \"TIME\": \"13:00\",\n        \"PRODUCTION\": \"310\",\n        \"ENERGY (Kwh)\": \"503\",\n        \"GAS (CPM)\": \"520\",\n        \"PART NAME\": \"ABCD\",\n        \"WIRE\": 20\n    },\n    {\n        \"TIME\": \"14:00\",\n        \"PRODUCTION\": \"410\",\n        \"ENERGY (Kwh)\": \"603\",\n        \"GAS (CPM)\": \"620\",\n        \"PART NAME\": \"ABCD\",\n        \"WIRE\": 20\n    },\n    {\n        \"TIME\": \"15:00\",\n        \"PRODUCTION\": \"510\",\n        \"ENERGY (Kwh)\": \"703\",\n        \"GAS (CPM)\": \"720\",\n        \"PART NAME\": \"ANCD\",\n        \"WIRE\": 20\n    },\n    {\n        \"TIME\": \"16:00\",\n        \"PRODUCTION\": \"610\",\n        \"ENERGY (Kwh)\": \"803\",\n        \"GAS (CPM)\": \"920\",\n        \"PART NAME\": \"ANCD\",\n        \"WIRE\": 20\n    },\n    {\n        \"TIME\": \"17:00\",\n        \"PRODUCTION\": \"710\",\n        \"ENERGY (Kwh)\": \"903\",\n        \"GAS (CPM)\": \"1020\",\n        \"PART NAME\": \"ANCD\",\n        \"WIRE\": 20\n    }\n];\n\nglobal.set(\"h_1\",1)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 720,
        "wires": [
            [
                "f8462cdb90a98da7",
                "918f01d8ef866bb0"
            ]
        ]
    },
    {
        "id": "e46aaf2503af1137",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "h_2_update",
        "func": "msg.ui_control = { tabulator: { columns: [] } };\nmsg.payload = [];\n\nmsg.ui_control = {\n    tabulator: {\n        columns: [\n            { title: \"TIME\", field: \"TIME\", width: 80 },\n            { title: \"OEE(%)\", field: \"OEE(%)\", width: 150 },\n            { title: \"PRODUCTIVITY(%)\", field: \"PRODUCTIVITY(%)\", width: 200 },\n            { title: \"QUALITY(%)\", field: \"QUALITY(%)\", width: 180 },\n            { title: \"UTILZATION(%)\", field: \"UTILZATION(%)\", width: 180 },\n            { title: \"LOSS\", field: \"LOSS\", width: 180 }\n        ]\n    }\n};\n\nmsg.payload = [\n    {\n        \"TIME\": \"9:00\",\n        \"OEE(%)\": \"35\",\n        \"PRODUCTIVITY(%)\": \"95\",\n        \"QUALITY(%)\": \"10\",\n        \"UTILZATION(%)\": \"20\",\n        \"LOSS\": 5\n    },\n    \n    {\n        \"TIME\": \"10:00\",\n        \"OEE(%)\": \"40\",\n        \"PRODUCTIVITY(%)\": \"95\",\n        \"QUALITY(%)\": \"20\",\n        \"UTILZATION(%)\": \"30\",\n        \"LOSS\": 20\n    },\n    {\n        \"TIME\": \"11:00\",\n        \"OEE(%)\": \"50\",\n        \"PRODUCTIVITY(%)\": \"90\",\n        \"QUALITY(%)\": \"80\",\n        \"UTILZATION(%)\": \"50\",\n        \"LOSS\": 20\n    },\n    {\n        \"TIME\": \"12:00\",\n        \"OEE(%)\": \"70\",\n        \"PRODUCTIVITY(%)\": \"90\",\n        \"QUALITY(%)\": \"90\",\n        \"UTILZATION(%)\": \"70\",\n        \"LOSS\": 20\n    },\n    {\n        \"TIME\": \"13:00\",\n        \"OEE(%)\": \"80\",\n        \"PRODUCTIVITY(%)\": \"95\",\n        \"QUALITY(%)\": \"45\",\n        \"UTILZATION(%)\": \"40\",\n        \"LOSS\": 20\n    },\n    {\n        \"TIME\": \"14:00\",\n        \"OEE(%)\": \"90\",\n        \"PRODUCTIVITY(%)\": \"96\",\n        \"QUALITY(%)\": \"60\",\n        \"UTILZATION(%)\": \"50\",\n        \"LOSS\": 20\n    },\n    {\n        \"TIME\": \"15:00\",\n        \"OEE(%)\": \"97\",\n        \"PRODUCTIVITY(%)\": \"96\",\n        \"QUALITY(%)\": \"80\",\n        \"UTILZATION(%)\": \"70\",\n        \"LOSS\": 20\n    },\n    {\n        \"TIME\": \"16:00\",\n        \"OEE(%)\": \"95\",\n        \"PRODUCTIVITY(%)\": \"80\",\n        \"QUALITY(%)\": \"94\",\n        \"UTILZATION(%)\": \"90\",\n        \"LOSS\": 20\n    },\n    {\n        \"TIME\": \"17:00\",\n        \"OEE(%)\": \"100\",\n        \"PRODUCTIVITY(%)\": \"20\",\n        \"QUALITY(%)\": \"30\",\n        \"UTILZATION(%)\": \"45\",\n        \"LOSS\": 20\n    }\n];\n\nglobal.set(\"h_1\", 0)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 780,
        "wires": [
            [
                "f8462cdb90a98da7",
                "918f01d8ef866bb0"
            ]
        ]
    },
    {
        "id": "959c55031bba28b8",
        "type": "switch",
        "z": "dbb1dbaace426118",
        "name": "h_1",
        "property": "h_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 720,
        "wires": [
            [
                "746038c5c9671493",
                "9283b7cd39218a25"
            ],
            [
                "746038c5c9671493",
                "9283b7cd39218a25"
            ]
        ]
    },
    {
        "id": "11d3abb3fc262706",
        "type": "switch",
        "z": "dbb1dbaace426118",
        "name": "h_2",
        "property": "h_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 780,
        "wires": [
            [
                "21293d5bb3c8f14f",
                "7766c598271d2c39"
            ]
        ]
    },
    {
        "id": "746038c5c9671493",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "errase",
        "func": "msg.ui_control = { tabulator: { columns: [] } };\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 700,
        "wires": [
            [
                "f8462cdb90a98da7",
                "918f01d8ef866bb0"
            ]
        ]
    },
    {
        "id": "21293d5bb3c8f14f",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "errase",
        "func": "msg.ui_control = { tabulator: { columns: [] } };\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 760,
        "wires": [
            [
                "f8462cdb90a98da7",
                "918f01d8ef866bb0"
            ]
        ]
    },
    {
        "id": "9283b7cd39218a25",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 720,
        "wires": [
            [
                "ee78a0157f3e56b4"
            ]
        ]
    },
    {
        "id": "7766c598271d2c39",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 780,
        "wires": [
            [
                "e46aaf2503af1137"
            ]
        ]
    },
    {
        "id": "f8462cdb90a98da7",
        "type": "ui_table",
        "z": "dbb1dbaace426118",
        "group": "e2bef973c39c7171",
        "name": "LINE_1_CELL_1_8_HOUR",
        "order": 1,
        "width": 19,
        "height": 5,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1080,
        "y": 720,
        "wires": []
    },
    {
        "id": "a5df202b80366a7f",
        "type": "ui_chart",
        "z": "dbb1dbaace426118",
        "name": "",
        "group": "eac6a34a2d19ae0e",
        "order": 2,
        "width": 19,
        "height": 5,
        "label": "",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "04ef0a5d02d43b24",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_production",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_production_mon\"), global.get(\"week_production_Tue\"), global.get(\"week_production_Wed\"), global.get(\"week_production_Thu\"), global.get(\"week_production_Fri\"), global.get(\"week_production_Sat\") ];\n\nlet chartMsgs = [];\nfor (let i = 0; i < labels.length; i++) {\n    chartMsgs.push({\n        topic: labels[i],\n        payload: values[i]\n    });\n}\n\nglobal.set(\"week_chart_1\", 1)\n// Output 1: Chart data\n// Output 2: Title text\nreturn [chartMsgs, { payload: \"📊 Production Chart (Mon–Sat)\" }];\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "fd054ac609a04e26",
                "a5df202b80366a7f"
            ],
            [
                "b6c4b349b3e213c0",
                "c297b60aeeee4d23"
            ]
        ]
    },
    {
        "id": "b6c4b349b3e213c0",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "group": "383f5adc87347f2b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "18",
        "color": "#f5f5f5",
        "x": 710,
        "y": 1200,
        "wires": []
    },
    {
        "id": "764da04ec2c76d12",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 160",
        "func": "global.set (\"week_mon\" , msg.payload[0].days)\nglobal.set(\"week_production_mon\", msg.payload[0].production)\nglobal.set(\"week_oee_mon\", msg.payload[0].oee)\nglobal.set(\"week_energy_mon\", msg.payload[0].energy)\nglobal.set(\"week_gas_mon\", msg.payload[0].gas)\nglobal.set(\"week_wire_mon\", msg.payload[0].wire)\nglobal.set(\"week_loss_mon\", msg.payload[0].loss)\n\nglobal.set(\"week_Tue\", msg.payload[1].days)\nglobal.set(\"week_production_Tue\", msg.payload[1].production)\nglobal.set(\"week_oee_Tue\", msg.payload[1].oee)\nglobal.set(\"week_energy_Tue\", msg.payload[1].energy)\nglobal.set(\"week_gas_Tue\", msg.payload[1].gas)\nglobal.set(\"week_wire_Tue\", msg.payload[1].wire)\nglobal.set(\"week_loss_Tue\", msg.payload[1].loss)\n\nglobal.set(\"week_Wed\", msg.payload[2].days )\nglobal.set(\"week_production_Wed\", msg.payload[2].production)\nglobal.set(\"week_oee_Wed\", msg.payload[2].oee)\nglobal.set(\"week_energy_Wed\", msg.payload[2].energy)\nglobal.set(\"week_gas_Wed\", msg.payload[2].gas)\nglobal.set(\"week_wire_Wed\", msg.payload[2].wire)\nglobal.set(\"week_loss_Wed\", msg.payload[2].loss)\n\nglobal.set(\"week_Thu\", msg.payload[3].days )\nglobal.set(\"week_production_Thu\", msg.payload[3].production)\nglobal.set(\"week_oee_Thu\", msg.payload[3].oee)\nglobal.set(\"week_energy_Thu\", msg.payload[3].energy)\nglobal.set(\"week_gas_Thu\", msg.payload[3].gas)\nglobal.set(\"week_wire_Thu\", msg.payload[3].wire)\nglobal.set(\"week_loss_Thu\", msg.payload[3].loss)\n\nglobal.set(\"week_Fri\", msg.payload[4].days )\nglobal.set(\"week_production_Fri\", msg.payload[4].production)\nglobal.set(\"week_oee_Fri\", msg.payload[4].oee)\nglobal.set(\"week_energy_Fri\", msg.payload[4].energy)\nglobal.set(\"week_gas_Fri\", msg.payload[4].gas)\nglobal.set(\"week_wire_Fri\", msg.payload[4].wire)\nglobal.set(\"week_loss_Fri\", msg.payload[4].loss)\n\nglobal.set(\"week_Sat\", msg.payload[5].days )\nglobal.set(\"week_production_Sat\", msg.payload[5].production)\nglobal.set(\"week_oee_Sat\", msg.payload[5].oee)\nglobal.set(\"week_energy_Sat\", msg.payload[5].energy)\nglobal.set(\"week_gas_Sat\", msg.payload[5].gas)\nglobal.set(\"week_wire_Sat\", msg.payload[5].wire)\nglobal.set(\"week_loss_Sat\", msg.payload[5].loss)\n\nmsg.payload = global.get(\"prd_production_Sat\")\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "9aed16c24ec9922f",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1700,
        "wires": [
            [
                "21e61be26d3157c0"
            ]
        ]
    },
    {
        "id": "8703ae7cb7419a48",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "LAST 8 HOURS DATA",
        "func": "var pld = \" SELECT days,production,oee,energy,gas,wire,loss\" \n    pld = pld+ \" FROM [Furnace].[dbo].[test_1] \"\n    msg.payload = pld\n    return msg;\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1640,
        "wires": [
            [
                "487fcb5d54b8af44"
            ]
        ]
    },
    {
        "id": "f2c06336c5cea8b1",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1640,
        "wires": [
            [
                "8703ae7cb7419a48"
            ]
        ]
    },
    {
        "id": "8cc94dcb23cc3fd9",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_oee",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_oee_mon\"), global.get(\"week_oee_Tue\"), global.get(\"week_oee_Wed\"), global.get(\"week_oee_Thu\"), global.get(\"week_oee_Fri\"), global.get(\"week_oee_Sat\") ];\n\nlet chartMsgs = [];\nfor (let i = 0; i < labels.length; i++) {\n    chartMsgs.push({\n        topic: labels[i],\n        payload: values[i]\n    });\n}\n\nglobal.set(\"week_chart_2\", 1)\n\n\n// Output 1: Chart data\n// Output 2: Title text\nreturn [chartMsgs, { payload: \"📊 OEE (%) Chart (Mon–Sat)\" }];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "fd054ac609a04e26",
                "a5df202b80366a7f"
            ],
            [
                "b6c4b349b3e213c0",
                "c297b60aeeee4d23"
            ]
        ]
    },
    {
        "id": "470ec64725538387",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_energy",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_energy_mon\"), global.get(\"week_energy_Tue\"), global.get(\"week_energy_Wed\"), global.get(\"week_energy_Thu\"), global.get(\"week_energy_Fri\"), global.get(\"week_energy_Sat\") ];\n\nlet chartMsgs = [];\nfor (let i = 0; i < labels.length; i++) {\n    chartMsgs.push({\n        topic: labels[i],\n        payload: values[i]\n    });\n}\n\n// Output 1: Chart data\n// Output 2: Title text\nreturn [chartMsgs, { payload: \"📊 Energy (Kwh) Chart (Mon–Sat)\" }];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1220,
        "wires": [
            [
                "fd054ac609a04e26",
                "a5df202b80366a7f"
            ],
            [
                "b6c4b349b3e213c0",
                "c297b60aeeee4d23"
            ]
        ]
    },
    {
        "id": "13174420e311fe43",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_gas",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_gas_mon\"), global.get(\"week_gas_Tue\"), global.get(\"week_gas_Wed\"), global.get(\"week_gas_Thu\"), global.get(\"week_gas_Fri\"), global.get(\"week_gas_Sat\") ];\n\nlet chartMsgs = [];\nfor (let i = 0; i < labels.length; i++) {\n    chartMsgs.push({\n        topic: labels[i],\n        payload: values[i]\n    });\n}\n\n// Output 1: Chart data\n// Output 2: Title text\nreturn [chartMsgs, { payload: \"📊 Gas (CPM) Chart (Mon–Sat)\" }];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1240,
        "wires": [
            [
                "fd054ac609a04e26",
                "a5df202b80366a7f"
            ],
            [
                "b6c4b349b3e213c0",
                "c297b60aeeee4d23"
            ]
        ]
    },
    {
        "id": "8e2b733e698380a0",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_wire",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_wire_mon\"), global.get(\"week_wire_Tue\"), global.get(\"week_wire_Wed\"), global.get(\"week_wire_Thu\"), global.get(\"week_wire_Fri\"), global.get(\"week_wire_Sat\") ];\n\nlet chartMsgs = [];\nfor (let i = 0; i < labels.length; i++) {\n    chartMsgs.push({\n        topic: labels[i],\n        payload: values[i]\n    });\n}\n\n// Output 1: Chart data\n// Output 2: Title text\nreturn [chartMsgs, { payload: \"📊 Wire Consume Chart (Mon–Sat)\" }];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1260,
        "wires": [
            [
                "fd054ac609a04e26",
                "a5df202b80366a7f"
            ],
            [
                "b6c4b349b3e213c0",
                "c297b60aeeee4d23"
            ]
        ]
    },
    {
        "id": "804a3734d3b468d1",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_loss",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_loss_mon\"), global.get(\"week_loss_Tue\"), global.get(\"week_loss_Wed\"), global.get(\"week_loss_Thu\"), global.get(\"week_loss_Fri\"), global.get(\"week_loss_Sat\") ];\n\nlet chartMsgs = [];\nfor (let i = 0; i < labels.length; i++) {\n    chartMsgs.push({\n        topic: labels[i],\n        payload: values[i]\n    });\n}\n\n// Output 1: Chart data\n// Output 2: Title text\nreturn [chartMsgs, { payload: \"📊 loss (Sec.) Chart (Mon–Sat)\" }];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1300,
        "wires": [
            [
                "fd054ac609a04e26",
                "a5df202b80366a7f"
            ],
            [
                "b6c4b349b3e213c0",
                "c297b60aeeee4d23"
            ]
        ]
    },
    {
        "id": "b77f8d9373bdf3b2",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 840,
        "wires": [
            [
                "30d33af24c549101",
                "0b085e5970d9e72e",
                "ad23f6efaebd77cc",
                "b12e803efa15fd46",
                "65873e9f1baa7ee7",
                "35bf462a4972c1f7"
            ]
        ]
    },
    {
        "id": "0b085e5970d9e72e",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 880,
        "wires": [
            [
                "671052210c08e579"
            ]
        ]
    },
    {
        "id": "ad23f6efaebd77cc",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 920,
        "wires": [
            [
                "c65007b53aa5b31c"
            ]
        ]
    },
    {
        "id": "b12e803efa15fd46",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 960,
        "wires": [
            [
                "46239ca9eec8cfc3"
            ]
        ]
    },
    {
        "id": "65873e9f1baa7ee7",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 980,
        "wires": [
            [
                "de6cd62691356cfa"
            ]
        ]
    },
    {
        "id": "35bf462a4972c1f7",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "84105890551d4a09"
            ]
        ]
    },
    {
        "id": "918f01d8ef866bb0",
        "type": "ui_table",
        "z": "dbb1dbaace426118",
        "group": "94b8548fd1d1ae9e",
        "name": "LINE_1_CELL_2_8_HOUR",
        "order": 1,
        "width": 19,
        "height": 5,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1080,
        "y": 680,
        "wires": []
    },
    {
        "id": "fd054ac609a04e26",
        "type": "ui_chart",
        "z": "dbb1dbaace426118",
        "name": "",
        "group": "383f5adc87347f2b",
        "order": 2,
        "width": 19,
        "height": 5,
        "label": "",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "c297b60aeeee4d23",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "group": "eac6a34a2d19ae0e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "18",
        "color": "#f5f5f5",
        "x": 710,
        "y": 1280,
        "wires": []
    },
    {
        "id": "39c4a82036774993",
        "type": "ui_gauge",
        "z": "dbb1dbaace426118",
        "name": "",
        "group": "39fa26a578f7c269",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "PRODUCTION",
        "label": "NO'S",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#00b400",
            "#00b438"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "263a2941e46de066",
        "type": "ui_gauge",
        "z": "dbb1dbaace426118",
        "name": "",
        "group": "39fa26a578f7c269",
        "order": 5,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "GAS",
        "label": "CPM",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#00b400",
            "#00b400"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 830,
        "y": 60,
        "wires": []
    },
    {
        "id": "1cec690b78179572",
        "type": "ui_gauge",
        "z": "dbb1dbaace426118",
        "name": "",
        "group": "39fa26a578f7c269",
        "order": 7,
        "width": 5,
        "height": 4,
        "gtype": "donut",
        "title": "ENERGY",
        "label": "Kwh",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#00b400",
            "#00b400"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 840,
        "y": 100,
        "wires": []
    },
    {
        "id": "8991ed3435605b3d",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "",
        "props": [],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "f23561680909a679",
                "33671ff499d280be",
                "95f55b226b613d6f",
                "de091d298d24a755",
                "fa7393810b918faf"
            ]
        ]
    },
    {
        "id": "f23561680909a679",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-1 GAS",
        "func": "var cell_1_gasflow = global.get(\"flow_cell_1_line_1\")\n//msg.payload = cell_2_gasflow\n\n\n\n\n\nmsg.payload = 50\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 60,
        "wires": [
            [
                "263a2941e46de066"
            ]
        ]
    },
    {
        "id": "33671ff499d280be",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-1 ENERGY",
        "func": "var cell_1_energy = global.get(\"energy_cell_1_line_1\");\nglobal.set(\"cell_1_energy\", cell_1_energy);\n//msg.payload = cell_2_energy\n\n\n\nmsg.payload = 90\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "1cec690b78179572"
            ]
        ]
    },
    {
        "id": "95f55b226b613d6f",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-1 PRODUCTION",
        "func": "var production_cell_1_line_1 = global.get(\"production_cell_1_line_1\");\n//msg.payload = production_cell_1_line_1;\nmsg.payload = 60\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "39c4a82036774993"
            ]
        ]
    },
    {
        "id": "10dd6ff4247ac2a9",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "group": "aeac0e8870380e31",
        "name": "Clock Toolbar",
        "order": 2,
        "width": "0",
        "height": "0",
        "format": "<script id=\"titleScript\" type=\"text/javascript\">\n\n$(function() {\n    if($('.md-toolbar-tools').length != 0){\n        loadClock();\n    }else setTimeout(loadClock, 500)\n});\n\nfunction loadClock(){\n    $('#clock').remove();\n    var toolbar = $('.md-toolbar-tools');\n    \n    var div = $('<div/>');\n    var p = $('<p/ id=\"clock\">');\n    \n    div.append(p);\n    div[0].style.margin = '5px 5px 5px auto';\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n    \n    function upTime() {\n        var d = new Date();\n        p.text(d.toLocaleString());\n    }\n\n    if(document.clockInterval){ \n            clearInterval(document.clockInterval);\n            document.clockInterval = null;\n    }\n        \n    document.clockInterval = setInterval(upTime,1000);\n}\n\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 1480,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "0fe1beb19a51387f",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "group": "39fa26a578f7c269",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n  .dynamic-title {\n    position: relative;\n    text-align: center;\n    font-weight: bold;\n    color: #00ff00;\n    font-size: 16px;\n    margin-top: -5px;\n    margin-bottom: 10px;\n  }\n</style>\n\n<div class=\"dynamic-title\">\n  {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a845b47d57007bdd",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-2 GAS",
        "func": "var cell_2_gasflow = global.get(\"flow_cell_2_line_1\")\n//msg.payload = cell_2_gasflow\n\nmsg.payload = 700\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "263a2941e46de066"
            ]
        ]
    },
    {
        "id": "d3223632d4f51d9a",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-2 ENERGY",
        "func": "var cell_2_energy = global.get(\"energy_cell_2_line_1\");\nglobal.set(\"cell_2_energy\", cell_2_energy);\n//msg.payload = cell_2_energy\n\n\nmsg.payload = 1000\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 200,
        "wires": [
            [
                "1cec690b78179572"
            ]
        ]
    },
    {
        "id": "7e5d084c31693310",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-2 PRODUCTION",
        "func": "var production_cell_2_line_1 = global.get(\"production_cell_2_line_1\");\n//msg.payload = production_cell_2_line_1;\n\nmsg.payload = 1200\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "39c4a82036774993"
            ]
        ]
    },
    {
        "id": "de091d298d24a755",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 180,
        "wires": [
            [
                "a845b47d57007bdd",
                "d3223632d4f51d9a",
                "7e5d084c31693310",
                "d8f50ce9ffd817b7"
            ]
        ]
    },
    {
        "id": "fa7393810b918faf",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-1 NAME",
        "func": "msg.payload =\"ROBOTICS CELL-1\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "0fe1beb19a51387f"
            ]
        ]
    },
    {
        "id": "d8f50ce9ffd817b7",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-2 NAME",
        "func": "msg.payload = \"ROBOTICS CELL-2\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 240,
        "wires": [
            [
                "0fe1beb19a51387f"
            ]
        ]
    },
    {
        "id": "c87791194d7c300f",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "group": "",
        "name": "",
        "order": 1,
        "width": 19,
        "height": 5,
        "format": "<canvas id=\"chartGroup1\" style=\"width:100%; height:100%;\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n<script>\n    (function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (!data || !data.labels || !data.values) return;\n\n        const canvasId = 'chartGroup1';\n        const chartVar = 'myChartGroup1';\n        const canvas = document.getElementById(canvasId);\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n\n        if (window[chartVar]) {\n            window[chartVar].destroy();\n        }\n\n        window[chartVar] = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: data.labels,\n                datasets: [{\n                    label: data.label || 'Production',\n                    data: data.values,\n                    backgroundColor: data.colors || [\n                        '#4285F4', '#AECBFA', '#FB8C00', '#34A853', '#A8DAB5', '#EA4335'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                title: {\n                    display: !!data.title,\n                    text: data.title || '',\n                    fontColor: '#ffffff',\n                    fontSize: 20\n                },\n                plugins: {\n                    datalabels: {\n                        color: '#fff',\n                        anchor: 'end',\n                        align: 'start',\n                        font: {\n                            weight: 'bold',\n                            size: 18\n                        },\n                        formatter: function(value) {\n                            return value;\n                        }\n                    }\n                },\n                legend: { display: false },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            fontColor: '#ffffff'\n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: '#ffffff'\n                        }\n                    }]\n                }\n            },\n            plugins: [ChartDataLabels]\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "30d33af24c549101",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_production",
        "func": "\nconst labels = [\n    global.get(\"week_mon\"),\n    global.get(\"week_Tue\"),\n    global.get(\"week_Wed\"),\n    global.get(\"week_Thu\"),\n    global.get(\"week_Fri\"),\n    global.get(\"week_Sat\")\n];\n\nconst values = [\n    global.get(\"week_production_mon\"),\n    global.get(\"week_production_Tue\"),\n    global.get(\"week_production_Wed\"),\n    global.get(\"week_production_Thu\"),\n    global.get(\"week_production_Fri\"),\n    global.get(\"week_production_Sat\")\n];\n\nmsg.payload = {\n    title: \"📊 Weekly Production (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 840,
        "wires": [
            [
                "a3b970a70347c7d7"
            ]
        ]
    },
    {
        "id": "671052210c08e579",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_oee",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_oee_mon\"), global.get(\"week_oee_Tue\"), global.get(\"week_oee_Wed\"), global.get(\"week_oee_Thu\"), global.get(\"week_oee_Fri\"), global.get(\"week_oee_Sat\") ];\n\n\nmsg.payload = {\n    title: \"📊 OEE (%) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "a3b970a70347c7d7"
            ]
        ]
    },
    {
        "id": "c65007b53aa5b31c",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_energy",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_energy_mon\"), global.get(\"week_energy_Tue\"), global.get(\"week_energy_Wed\"), global.get(\"week_energy_Thu\"), global.get(\"week_energy_Fri\"), global.get(\"week_energy_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 Energy (Kwh) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 920,
        "wires": [
            [
                "a3b970a70347c7d7"
            ]
        ]
    },
    {
        "id": "46239ca9eec8cfc3",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_gas",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_gas_mon\"), global.get(\"week_gas_Tue\"), global.get(\"week_gas_Wed\"), global.get(\"week_gas_Thu\"), global.get(\"week_gas_Fri\"), global.get(\"week_gas_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 Gas (CPM) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 940,
        "wires": [
            [
                "a3b970a70347c7d7"
            ]
        ]
    },
    {
        "id": "de6cd62691356cfa",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_wire",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_wire_mon\"), global.get(\"week_wire_Tue\"), global.get(\"week_wire_Wed\"), global.get(\"week_wire_Thu\"), global.get(\"week_wire_Fri\"), global.get(\"week_wire_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 Wire Consume Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "84105890551d4a09",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_loss",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_loss_mon\"), global.get(\"week_loss_Tue\"), global.get(\"week_loss_Wed\"), global.get(\"week_loss_Thu\"), global.get(\"week_loss_Fri\"), global.get(\"week_loss_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 loss (Sec.) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "b5925edfd7bfec92",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1160,
        "wires": [
            [
                "04ef0a5d02d43b24",
                "f749a0b7ff2b27e5",
                "be974e107722449c",
                "421857e453a18b90",
                "d9f50b0294039120",
                "0a7e7cc16f72446e"
            ]
        ]
    },
    {
        "id": "f749a0b7ff2b27e5",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "8cc94dcb23cc3fd9"
            ]
        ]
    },
    {
        "id": "be974e107722449c",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 1240,
        "wires": [
            [
                "470ec64725538387"
            ]
        ]
    },
    {
        "id": "421857e453a18b90",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 1280,
        "wires": [
            [
                "13174420e311fe43"
            ]
        ]
    },
    {
        "id": "d9f50b0294039120",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "40",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 1320,
        "wires": [
            [
                "8e2b733e698380a0"
            ]
        ]
    },
    {
        "id": "0a7e7cc16f72446e",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 1360,
        "wires": [
            [
                "804a3734d3b468d1"
            ]
        ]
    },
    {
        "id": "3c7b3b659cc09543",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_production",
        "func": "\nconst labels = [\n    global.get(\"week_mon\"),\n    global.get(\"week_Tue\"),\n    global.get(\"week_Wed\"),\n    global.get(\"week_Thu\"),\n    global.get(\"week_Fri\"),\n    global.get(\"week_Sat\")\n];\n\nconst values = [\n    global.get(\"week_production_mon\"),\n    global.get(\"week_production_Tue\"),\n    global.get(\"week_production_Wed\"),\n    global.get(\"week_production_Thu\"),\n    global.get(\"week_production_Fri\"),\n    global.get(\"week_production_Sat\")\n];\n\nmsg.payload = {\n    title: \"📊 Weekly Production (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "a2861f19f9751a08",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_oee",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_oee_mon\"), global.get(\"week_oee_Tue\"), global.get(\"week_oee_Wed\"), global.get(\"week_oee_Thu\"), global.get(\"week_oee_Fri\"), global.get(\"week_oee_Sat\") ];\n\n\nmsg.payload = {\n    title: \"📊 OEE (%) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "2a302e82d3cdb399",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_energy",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_energy_mon\"), global.get(\"week_energy_Tue\"), global.get(\"week_energy_Wed\"), global.get(\"week_energy_Thu\"), global.get(\"week_energy_Fri\"), global.get(\"week_energy_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 Energy (Kwh) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "9c092c35310169ab",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_gas",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_gas_mon\"), global.get(\"week_gas_Tue\"), global.get(\"week_gas_Wed\"), global.get(\"week_gas_Thu\"), global.get(\"week_gas_Fri\"), global.get(\"week_gas_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 Gas (CPM) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "b2a4c583121f6388",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_wire",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_wire_mon\"), global.get(\"week_wire_Tue\"), global.get(\"week_wire_Wed\"), global.get(\"week_wire_Thu\"), global.get(\"week_wire_Fri\"), global.get(\"week_wire_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 Wire Consume Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "ec063cbaecc21ff2",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "week_loss",
        "func": "const labels = [global.get(\"week_mon\"), global.get(\"week_Tue\"), global.get(\"week_Wed\"), global.get(\"week_Thu\"), global.get(\"week_Fri\"), global.get(\"week_Sat\")];\nconst values = [global.get(\"week_loss_mon\"), global.get(\"week_loss_Tue\"), global.get(\"week_loss_Wed\"), global.get(\"week_loss_Thu\"), global.get(\"week_loss_Fri\"), global.get(\"week_loss_Sat\") ];\n\nmsg.payload = {\n    title: \"📊 loss (Sec.) Chart (Mon–Sat)\",\n    labels: labels,\n    values: values\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "0efa8d54d492c66e",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "group": "",
        "name": "",
        "order": 1,
        "width": 19,
        "height": 7,
        "format": "<div style=\"position: relative; width: 100%; height: 300px; background-color: #222;\">\n    <canvas id=\"chartGroup2\" style=\"width: 100%; height: 100%;\"></canvas>\n    <div id=\"chartReloadBtn\" style=\"position: absolute; top: 10px; right: 10px; z-index: 10;\">\n        <button onclick=\"refreshChart()\" style=\"padding: 5px 10px;\">Reload Chart</button>\n    </div>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n\n<script>\n    (function(scope) {\n  let chart;\n\n  function renderChart(data) {\n    const ctx = document.getElementById('chartGroup2').getContext('2d');\n    if (chart) chart.destroy();\n\n    chart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: data.label || 'Production',\n          data: data.values,\n          backgroundColor: data.colors || [\n            '#4285F4', '#AECBFA', '#FB8C00', '#34A853', '#A8DAB5', '#EA4335'\n          ]\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: !!data.title,\n          text: data.title || '',\n          fontColor: '#ffffff',\n          fontSize: 20\n        },\n        plugins: {\n          datalabels: {\n            color: '#fff',\n            anchor: 'end',\n            align: 'start',\n            font: {\n              weight: 'bold',\n              size: 18\n            },\n            formatter: function(value) {\n              return value;\n            }\n          }\n        },\n        legend: { display: false },\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              fontColor: '#ffffff'\n            },\n            gridLines: {\n              color: 'rgba(255,255,255,0.1)'  // Light white grid\n            }\n          }],\n          xAxes: [{\n            ticks: {\n              fontColor: '#ffffff'\n            },\n            gridLines: {\n              color: 'rgba(255,255,255,0.1)'  // Light white grid\n            }\n          }]\n        }\n      },\n      plugins: [ChartDataLabels]\n    });\n  }\n\n  // Watch msg.payload changes\n  scope.$watch('msg.payload', function(data) {\n    if (!data || !data.labels || !data.values) return;\n    setTimeout(() => renderChart(data), 300); // Helps with mobile rendering\n  });\n\n  // Manual reload function for the button\n  window.refreshChart = function() {\n    if (scope.msg && scope.msg.payload) {\n      renderChart(scope.msg.payload);\n    }\n  };\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1460,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "d11bbaa1daed4541",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "name": "",
        "order": 1,
        "width": 19,
        "height": 7,
        "format": "<canvas id=\"myBarChart\" width=\"930\" height=\"330\"></canvas>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n\n<script>\n    (function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (!data || !data.labels || !data.values) return;\n\n        const ctx = document.getElementById('myBarChart').getContext('2d');\n\n        // Destroy previous chart if exists\n        if (window.myBarChart) {\n            window.myBarChart.destroy();\n        }\n\n        window.myBarChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: data.labels,\n                datasets: [{\n                    label: 'Production',\n                    data: data.values,\n                    backgroundColor: [\n                        '#4285F4', '#AECBFA', '#FB8C00', '#34A853', '#A8DAB5', '#EA4335'\n                    ]\n                }]\n            },\n            options: {\n                title: {\n                    display: !!data.title, // show title only if it exists\n                    text: data.title || '',\n                    fontColor: '#ffffff',\n                    fontSize: 18\n                },\n                plugins: {\n                    datalabels: {\n                        color: '#fff',\n                        anchor: 'end',\n                        align: 'start',\n                        font: {\n                            weight: 'bold',\n                            size: 14\n                        },\n                        formatter: function(value) {\n                            return value;\n                        }\n                    }\n                },\n                legend: {\n                    display: false\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            fontColor: '#ffffff'\n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: '#ffffff'\n                        }\n                    }]\n                }\n            },\n            plugins: [ChartDataLabels]\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1240,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "c53d3ac00ad84c9d",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "Group 1 Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"Group 1 Production\",\"labels\":[\"Line A\",\"Line B\"],\"values\":[100,150]}",
        "payloadType": "json",
        "x": 1030,
        "y": 2160,
        "wires": [
            [
                "7fb0674a5bb2c65a"
            ]
        ]
    },
    {
        "id": "5dbd281adf2852db",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "Group 2 Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"Group 2 Production\",\"labels\":[\"Line X\",\"Line Y\",\"Line Z\"],\"values\":[90,120,80]}",
        "payloadType": "json",
        "x": 1030,
        "y": 2240,
        "wires": [
            [
                "0c673e48972b49c3"
            ]
        ]
    },
    {
        "id": "7fb0674a5bb2c65a",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "name": "Bar Chart - Group 1",
        "order": 1,
        "width": 12,
        "height": 7,
        "format": "<canvas id=\"chartGroup1\" width=\"930\" height=\"330\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (!data || !data.labels || !data.values) return;\n\n        const canvasId = 'chartGroup1';\n        const chartVar = 'myChartGroup1';\n\n        const ctx = document.getElementById(canvasId).getContext('2d');\n\n        if (window[chartVar]) {\n            window[chartVar].destroy();\n        }\n\n        window[chartVar] = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: data.labels,\n                datasets: [{\n                    label: data.label || 'Production',\n                    data: data.values,\n                    backgroundColor: data.colors || [\n                        '#4285F4', '#FB8C00', '#34A853'\n                    ]\n                }]\n            },\n            options: {\n                title: {\n                    display: !!data.title,\n                    text: data.title || '',\n                    fontColor: '#ffffff',\n                    fontSize: 18\n                },\n                plugins: {\n                    datalabels: {\n                        color: '#fff',\n                        anchor: 'end',\n                        align: 'start',\n                        font: {\n                            weight: 'bold',\n                            size: 14\n                        },\n                        formatter: function(value) {\n                            return value;\n                        }\n                    }\n                },\n                legend: {\n                    display: false\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            fontColor: '#ffffff'\n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: '#ffffff'\n                        }\n                    }]\n                }\n            },\n            plugins: [ChartDataLabels]\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "0c673e48972b49c3",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "d": true,
        "group": "",
        "name": "Bar Chart - Group 2",
        "order": 1,
        "width": 12,
        "height": 7,
        "format": "<canvas id=\"chartGroup2\" width=\"930\" height=\"330\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (!data || !data.labels || !data.values) return;\n\n        const canvasId = 'chartGroup2';\n        const chartVar = 'myChartGroup2';\n\n        const ctx = document.getElementById(canvasId).getContext('2d');\n\n        if (window[chartVar]) {\n            window[chartVar].destroy();\n        }\n\n        window[chartVar] = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: data.labels,\n                datasets: [{\n                    label: data.label || 'Production',\n                    data: data.values,\n                    backgroundColor: data.colors || [\n                        '#AECBFA', '#EA4335', '#34A853'\n                    ]\n                }]\n            },\n            options: {\n                title: {\n                    display: !!data.title,\n                    text: data.title || '',\n                    fontColor: '#ffffff',\n                    fontSize: 18\n                },\n                plugins: {\n                    datalabels: {\n                        color: '#fff',\n                        anchor: 'end',\n                        align: 'start',\n                        font: {\n                            weight: 'bold',\n                            size: 14\n                        },\n                        formatter: function(value) {\n                            return value;\n                        }\n                    }\n                },\n                legend: {\n                    display: false\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            fontColor: '#ffffff'\n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: '#ffffff'\n                        }\n                    }]\n                }\n            },\n            plugins: [ChartDataLabels]\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "960f837cab5a184c",
        "type": "comment",
        "z": "dbb1dbaace426118",
        "name": "CELL CURRENT STATUS.",
        "info": "",
        "x": 270,
        "y": 300,
        "wires": []
    },
    {
        "id": "bc6c9f5caf089408",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "OP NAME-CELL-1",
        "func": "//msg.payload = global.get(\"op_name\");\n\nmsg.payload = 'MUKESH ID NO-2345'\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "f3066dd89db69bf1"
            ]
        ]
    },
    {
        "id": "f3066dd89db69bf1",
        "type": "ui_text",
        "z": "dbb1dbaace426118",
        "group": "f7f926047d187624",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "OPERATOR NAME",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1170,
        "y": 300,
        "wires": []
    },
    {
        "id": "c84f257ff8b86106",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "WIRE CONSUM CELL-2",
        "func": "var cell_1_wire = global.get(\"wire_cell_1_line_1\")\n//msg.payload = cell_1_wire\n\nmsg.payload = 100\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "303614aedcf4d351"
            ]
        ]
    },
    {
        "id": "30cfe67f0144abc6",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "OP NAME-CELL-2",
        "func": "//msg.payload = global.get(\"op_name\");\n\nvar op_name = 'JITENDER'\nvar op_id =  'ID NO-2350'\nmsg.payload = op_name +\" \"+ op_id\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "f3066dd89db69bf1"
            ]
        ]
    },
    {
        "id": "56889d365a8171dd",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "MC_STATUS CELL-2",
        "func": "//var mc_status = global.get(\"mc_status_cell_2_line_1\");\nvar mc_status = 1\nif (mc_status == 1) {\n    // check if the user has access to execute this function\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn msg;\n//var t_cyl = global.get(\"CY_TIM\");\nmsg.payload = mc_status;\nreturn msg;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 580,
        "wires": [
            [
                "cda0a322fe8503f5"
            ],
            [
                "68054ca49367548a"
            ]
        ]
    },
    {
        "id": "026855767ce493de",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "group": "f7f926047d187624",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n  .dynamic-title {\n    position: relative;\n    text-align: center;\n    font-weight: bold;\n    color: #00ff00;\n    font-size: 16px;\n    margin-top: -5px;\n    margin-bottom: 10px;\n  }\n</style>\n\n<div class=\"dynamic-title\">\n  {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1140,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "08d4c7f6d263a757",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-1 NAME",
        "func": "msg.payload =\"ROBOTICS CELL-1\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "026855767ce493de"
            ]
        ]
    },
    {
        "id": "ec2be988ce0a6467",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "CELL-2 NAME",
        "func": "msg.payload =\"ROBOTICS CELL-2\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 500,
        "wires": [
            [
                "026855767ce493de"
            ]
        ]
    },
    {
        "id": "a599101ada712095",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 500,
        "wires": [
            [
                "30cfe67f0144abc6",
                "c84f257ff8b86106",
                "ec2be988ce0a6467",
                "56889d365a8171dd"
            ]
        ]
    },
    {
        "id": "a3b970a70347c7d7",
        "type": "ui_template",
        "z": "dbb1dbaace426118",
        "group": "",
        "name": "",
        "order": 1,
        "width": 19,
        "height": 7,
        "format": "<div id=\"chartContainer\" style=\"position: relative; width: 100%; height: 300px; background-color: #222;\">\n  <canvas id=\"chartGroup1\" style=\"width: 100%; height: 100%;\"></canvas>\n  <div id=\"chartReloadBtn\" style=\"position: absolute; top: 10px; right: 10px; z-index: 10;\">\n    <button onclick=\"refreshChart()\" style=\"padding: 5px 10px;\">Reload Chart</button>\n  </div>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n\n<script>\n  (function(scope) {\n  let chart;\n\n  function resizeCanvas() {\n    const canvas = document.getElementById(\"chartGroup1\");\n    if (canvas && canvas.parentElement) {\n      canvas.width = canvas.parentElement.offsetWidth;\n      canvas.height = canvas.parentElement.offsetHeight;\n    }\n  }\n\n  function isVisible(el) {\n    return el.offsetParent !== null;\n  }\n\n  function tryRenderChart(data, retries = 10) {\n    const container = document.getElementById(\"chartContainer\");\n    if (!isVisible(container) && retries > 0) {\n      setTimeout(() => tryRenderChart(data, retries - 1), 300);\n      return;\n    }\n\n    resizeCanvas();\n    const ctx = document.getElementById(\"chartGroup1\").getContext(\"2d\");\n    if (chart) chart.destroy();\n\n    chart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: data.labels,\n        datasets: [{\n          label: data.label || 'Production',\n          data: data.values,\n          backgroundColor: data.colors || [\n            '#4285F4', '#AECBFA', '#FB8C00', '#34A853', '#A8DAB5', '#EA4335'\n          ]\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        title: {\n          display: !!data.title,\n          text: data.title || '',\n          fontColor: '#ffffff',\n          fontSize: 20\n        },\n        plugins: {\n          datalabels: {\n            color: '#fff',\n            anchor: 'end',\n            align: 'start',\n            font: {\n              weight: 'bold',\n              size: 18\n            },\n            formatter: function(value) {\n              return value;\n            }\n          }\n        },\n        legend: { display: false },\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              fontColor: '#ffffff'\n            },\n            gridLines: {\n              color: 'rgba(255,255,255,0.1)'\n            }\n          }],\n          xAxes: [{\n            ticks: {\n              fontColor: '#ffffff'\n            },\n            gridLines: {\n              color: 'rgba(255,255,255,0.1)'\n            }\n          }]\n        }\n      },\n      plugins: [ChartDataLabels]\n    });\n  }\n\n  scope.$watch(\"msg.payload\", function(data) {\n    if (!data || !data.labels || !data.values) return;\n    setTimeout(() => tryRenderChart(data), 200); // Delay to wait for visibility\n  });\n\n  // Manual reload\n  window.refreshChart = function() {\n    if (scope.msg && scope.msg.payload) {\n      tryRenderChart(scope.msg.payload);\n    }\n  };\n\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "d35996da4dd8992c",
        "type": "ui_button",
        "z": "dbb1dbaace426118",
        "name": "Refresh Chart",
        "group": "b31b4291cc276330",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Refresh Chart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 1420,
        "y": 1760,
        "wires": [
            [
                "59e46e1fd3cccbb3"
            ]
        ]
    },
    {
        "id": "48a8c93d24337dcd",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "Store Chart Data",
        "func": "flow.set(\"last_chart_data\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "59e46e1fd3cccbb3",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "Get Last Chart Data",
        "func": "msg.payload = flow.get(\"last_chart_data\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "bce073c2c79a277d",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "name": "Inject Chart Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "{\"labels\":[\"A\",\"B\",\"C\",\"D\"],\"values\":[10,15,7,12],\"label\":\"Sample Data\"}",
        "payloadType": "json",
        "x": 1430,
        "y": 1700,
        "wires": [
            [
                "48a8c93d24337dcd"
            ]
        ]
    },
    {
        "id": "190fdd5952c0991f",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "Get Last Chart Data",
        "func": "msg.payload = flow.get(\"last_chart_data\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "f3ce329f60bdf2f4",
        "type": "debug",
        "z": "dbb1dbaace426118",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1580,
        "wires": []
    },
    {
        "id": "41a1496e57d4dba5",
        "type": "inject",
        "z": "dbb1dbaace426118",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "x": 1130,
        "y": 80,
        "wires": [
            [
                "2b0bbe4b70c7be83",
                "bc950302703a52d1",
                "13a561a4846cd80c",
                "4c4b57677d1b8668"
            ]
        ]
    },
    {
        "id": "4a0a6df5a7d71b93",
        "type": "MC Read",
        "z": "dbb1dbaace426118",
        "name": "192.168.94.11",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "d4000,30",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "output2",
        "outputs": 2,
        "x": 1645,
        "y": 20,
        "wires": [
            [
                "19dde2bfcc2413d1"
            ],
            [
                "89ac2968037daf44"
            ]
        ],
        "l": false
    },
    {
        "id": "19dde2bfcc2413d1",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "plc_to_cell1",
        "func": "var energy_cell_1_line_1 =  msg.payload[0]\nvar flow_cell_1_line_1 = msg.payload[1]\nvar wire_cell_1_line_1 = msg.payload[2]\nvar mc_status_cell_1_line_1 = msg.payload[3]\nvar production_cell_1_line_1 = msg.payload[4]\n\nglobal.set(\"energy_cell_1_line_1\",energy_cell_1_line_1)\nglobal.set(\"flow_cell_1_line_1\",flow_cell_1_line_1)\nglobal.set(\"wire_cell_1_line_1\",wire_cell_1_line_1)\nglobal.set(\"mc_status_cell_1_line_1\",mc_status_cell_1_line_1)\nglobal.set(\"production_cell_1_line_1\",production_cell_1_line_1)\nreturn msg;",
        "outputs": 1,
        "x": 1790,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "cee8997b03d9cd7f",
        "type": "MC Read",
        "z": "dbb1dbaace426118",
        "name": "192.168.94.11",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "d4100,30",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "output2",
        "outputs": 2,
        "x": 1695,
        "y": 100,
        "wires": [
            [
                "2d5d559575030572"
            ],
            [
                "068ecc1c363e9e94"
            ]
        ],
        "icon": "node-red/link-return.svg",
        "l": false
    },
    {
        "id": "2b0bbe4b70c7be83",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1380,
        "y": 100,
        "wires": [
            [
                "cee8997b03d9cd7f"
            ]
        ]
    },
    {
        "id": "2d5d559575030572",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "plc_to_cell2",
        "func": "var energy_cell_2_line_1 =  msg.payload[0]\nvar flow_cell_2_line_1 = msg.payload[1]\nvar wire_cell_2_line_1 = msg.payload[2]\nvar mc_status_cell_2_line_1 = msg.payload[3]\nvar production_cell_2_line_1 = msg.payload[4]\n\nglobal.set(\"energy_cell_2_line_1\",energy_cell_2_line_1)\nglobal.set(\"flow_cell_2_line_1\",flow_cell_2_line_1)\nglobal.set(\"wire_cell_2_line_1\",wire_cell_2_line_1)\nglobal.set(\"mc_status_cell_2_line_1\",mc_status_cell_2_line_1)\nglobal.set(\"production_cell_2_line_1\",production_cell_2_line_1)\nreturn msg;",
        "outputs": 1,
        "x": 1830,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "13a561a4846cd80c",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 163",
        "func": "msg.topic = 'connect'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 20,
        "wires": [
            [
                "4a0a6df5a7d71b93"
            ]
        ]
    },
    {
        "id": "bc950302703a52d1",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1480,
        "y": 60,
        "wires": [
            [
                "4a0a6df5a7d71b93"
            ]
        ]
    },
    {
        "id": "89ac2968037daf44",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "plc cell 1 error",
        "func": "var error = msg.payload;\n\n// Convert to string if not already\nif (typeof error !== \"string\") {\n    error = String(error);\n}\n\n//if (error.trim().startsWith(\"Error:\")) {\n//    msg.payload = \"Error: No data received from PLC\";\n//} else {\n//    msg.payload = \"good\";\n//}\n//return msg;\n\n\n//var error = msg.payload\n\n//if (error == \"Error: \" || error == \"Error: timeout\") {\n//    msg.payload = \"Error: No data received from PLC\";\n//} else {\n//    msg.payload = \"good\";\n//}\n//return msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "4c4b57677d1b8668",
        "type": "delay",
        "z": "dbb1dbaace426118",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1520,
        "y": 140,
        "wires": [
            [
                "cee8997b03d9cd7f"
            ]
        ]
    },
    {
        "id": "9c9d7ce0cd3afb8a",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 164",
        "func": "msg.topic = 'connect'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "068ecc1c363e9e94",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "plc cell 2 error",
        "func": "var error = msg.payload;\n\n// Convert to string if not already\nif (typeof error !== \"string\") {\n    error = String(error);\n}\n\n//if (error.trim().startsWith(\"Error:\")) {\n//    msg.payload = \"Error: No data received from PLC\";\n//} else {\n//    msg.payload = \"good\";\n//}\n//return msg;\n\n\n//var error = msg.payload\n\n//if (error == \"Error: \" || error == \"Error: timeout\") {\n//    msg.payload = \"Error: No data received from PLC\";\n//} else {\n//    msg.payload = \"good\";\n//}\n//return msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e865f18bf261ca8d",
        "type": "function",
        "z": "dbb1dbaace426118",
        "name": "function 166",
        "func": "msg.headers = {\n    \"Content-Type\": \"application/json\"\n};\nmsg.method = \"POST\";\nmsg.url = \"https://iot-adient.onrender.com/api/upload\"; // Cloud endpoint\n\nmsg.payload = msg.payload; // send full result set\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1700,
        "wires": [
            [
                "1f4800090bb2493c"
            ]
        ]
    },
    {
        "id": "1f4800090bb2493c",
        "type": "http request",
        "z": "dbb1dbaace426118",
        "name": "Send to Cloud API",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 1700,
        "wires": [
            [
                "66218257e1195b98"
            ]
        ]
    },
    {
        "id": "66218257e1195b98",
        "type": "debug",
        "z": "dbb1dbaace426118",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1700,
        "wires": []
    },
    {
        "id": "fa731c71642c52b2",
        "type": "ui_text_input",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "Problem*",
        "tooltip": "",
        "group": "b612597af736eb57",
        "order": 17,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 1180,
        "y": 240,
        "wires": [
            [
                "022d81f462595ec1"
            ]
        ]
    },
    {
        "id": "df654658b5df7ae8",
        "type": "ui_text_input",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "Area*",
        "tooltip": "",
        "group": "b612597af736eb57",
        "order": 20,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "D104",
        "sendOnBlur": true,
        "className": "",
        "topicType": "flow",
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "e6aedcd6b28c4821"
            ]
        ]
    },
    {
        "id": "022d81f462595ec1",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "ENTER TOTAL PRODUCTION TIME ",
        "func": "var brk_problem_entery = msg.payload;\nglobal.set(\"brk_problem_entery\", brk_problem_entery);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e6aedcd6b28c4821",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "ENTER OPERATOR NAME",
        "func": "var brk_identification_entery = msg.payload;\nglobal.set(\"brk_identification_entery\", brk_identification_entery);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "ed490e0c57614f0b",
        "type": "ui_text_input",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "Action*",
        "tooltip": "",
        "group": "b612597af736eb57",
        "order": 23,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "D104",
        "sendOnBlur": true,
        "className": "",
        "topicType": "flow",
        "x": 1180,
        "y": 360,
        "wires": [
            [
                "61240c1faf369499"
            ]
        ]
    },
    {
        "id": "61240c1faf369499",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "ENTER RUNNING PRODUCT",
        "func": "var brk_action_entery = msg.payload;\nglobal.set(\"brk_action_entery\", brk_action_entery);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7be0391c80c87db9",
        "type": "ui_text_input",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "Frequent*",
        "tooltip": "",
        "group": "b612597af736eb57",
        "order": 27,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "D104",
        "sendOnBlur": true,
        "className": "",
        "topicType": "flow",
        "x": 1180,
        "y": 420,
        "wires": [
            [
                "85db6b96ffec384a"
            ]
        ]
    },
    {
        "id": "85db6b96ffec384a",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "ENTER RUNNING PRODUCT",
        "func": "var brk_note_entery = msg.payload;\nglobal.set(\"brk_note_entery\", brk_note_entery);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "bab4ccbfcf4e5ddd",
        "type": "ui_button",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "group": "b612597af736eb57",
        "order": 34,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "ENTER",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 920,
        "wires": [
            [
                "28bc93832cdba4ab",
                "235d5093c23fc0d0",
                "d362c666400d4c18",
                "850d234a2e1c7b20",
                "e575693143699ed6",
                "0c326e6897fc6989"
            ]
        ]
    },
    {
        "id": "28bc93832cdba4ab",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "var d = new Date,\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar prblem = global.get(\"brk_problem_entery\");\nvar ident = global.get(\"brk_identification_entery\");\nvar action = global.get(\"brk_action_entery\");\nvar note = global.get(\"brk_note_entery\");\nvar brk_time = global.get(\"brk_loss_time\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[Furnace].[dbo].[break_down](TIME,PROBLEM,AREA,ACTION,FREQUENT,LOSS)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + prblem + \"','\" + ident + \"','\" + action + \"','\" + note + \"','\" + brk_time + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 900,
        "wires": [
            [
                "92f29cbfd63d04a0"
            ]
        ]
    },
    {
        "id": "92f29cbfd63d04a0",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "9c332921d88cdcee",
        "name": "BREAK_DOWN",
        "query": "",
        "outField": "payload",
        "x": 600,
        "y": 900,
        "wires": [
            [
                "accbc8f7f9b4f9f0",
                "2a06232ecfb989ad"
            ]
        ]
    },
    {
        "id": "13ac905ef4920fb9",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "var d = new Date,\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar prblem = global.get(\"brk_problem_entery\");\nvar ident = global.get(\"brk_identification_entery\");\nvar action = global.get(\"brk_action_entery\");\nvar note = global.get(\"brk_note_entery\");\nvar brk_time = global.get(\"brk_loss_time\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[Furnace].[dbo].[break_down_history](TIME,PROBLEM,AREA,ACTION,FREQUENT,LOSS)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + prblem + \"','\" + ident + \"','\" + action + \"','\" + note + \"','\" + brk_time + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "b91ce1b5403fd9e4"
            ]
        ]
    },
    {
        "id": "b91ce1b5403fd9e4",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "9c332921d88cdcee",
        "name": "BREAK_DOWN_HISTORY",
        "query": "",
        "outField": "payload",
        "x": 920,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "8e594771e193376e",
        "type": "ui_table",
        "z": "f7a9e29a90dd7dbe",
        "group": "b612597af736eb57",
        "name": "TODAY BREAKDOWN ENTERY",
        "order": 29,
        "width": 14,
        "height": 18,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 930,
        "y": 1040,
        "wires": []
    },
    {
        "id": "dda4bc1d1b725f1f",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "var pld = \" SELECT TIME,PROBLEM,AREA,ACTION,FREQUENT,LOSS\" \n    pld = pld+ \" FROM [Furnace].[dbo].[break_down] \"\n    pld    = pld + \"ORDER BY TIME\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1040,
        "wires": [
            [
                "d1caf81d1778af70"
            ]
        ]
    },
    {
        "id": "d1caf81d1778af70",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "9c332921d88cdcee",
        "name": "BREAK_DOWN_DISPLAY",
        "query": "",
        "outField": "payload",
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "8e594771e193376e"
            ]
        ]
    },
    {
        "id": "235d5093c23fc0d0",
        "type": "delay",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1040,
        "wires": [
            [
                "dda4bc1d1b725f1f"
            ]
        ]
    },
    {
        "id": "ead6aa34cc31c802",
        "type": "ui_button",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "group": "b612597af736eb57",
        "order": 40,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "DELETE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 1240,
        "wires": [
            [
                "983d0cf7be057008",
                "235d5093c23fc0d0",
                "1f9b66eb6c15e4dd"
            ]
        ]
    },
    {
        "id": "983d0cf7be057008",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "//DELETE FROM table_name WHERE condition\nvar delt_item = global.get(\"erase_selected\");\n\nvar pld = \" DELETE FROM [Furnace].[dbo].[break_down] \" \n    \npld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1240,
        "wires": [
            [
                "3b01a31c2b8f92f9"
            ]
        ]
    },
    {
        "id": "772243d66d55f4e8",
        "type": "ui_text_input",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "DELETE WRONG ENTERY*",
        "tooltip": "",
        "group": "b612597af736eb57",
        "order": 37,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 340,
        "y": 1360,
        "wires": [
            [
                "35c54373e660fbcb"
            ]
        ]
    },
    {
        "id": "35c54373e660fbcb",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "ENTER TOTAL PRODUCTION TIME ",
        "func": "var erase_selected = msg.payload;\nglobal.set(\"erase_selected\", erase_selected);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "3b01a31c2b8f92f9",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "DEL_1",
        "query": "",
        "outField": "payload",
        "x": 490,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "519d20fdd3cac4c9",
        "type": "inject",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1360,
        "wires": [
            [
                "772243d66d55f4e8"
            ]
        ]
    },
    {
        "id": "03ac7c9cbb9142fe",
        "type": "ui_text",
        "z": "f7a9e29a90dd7dbe",
        "group": "b612597af736eb57",
        "order": 25,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "TODAY BREAKDOWN ENTERY",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 990,
        "y": 1000,
        "wires": []
    },
    {
        "id": "33378ab56505f1d5",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "//DELETE FROM table_name WHERE condition\nvar delt_item = global.get(\"erase_selected\");\n\nvar pld = \" DELETE FROM [Furnace].[dbo].[break_down_history] \" \n    \npld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1280,
        "wires": [
            [
                "41d32533a31f4420"
            ]
        ]
    },
    {
        "id": "41d32533a31f4420",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "DEL_HISTRY",
        "query": "",
        "outField": "payload",
        "x": 660,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "d362c666400d4c18",
        "type": "delay",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1100,
        "wires": [
            [
                "13ac905ef4920fb9"
            ]
        ]
    },
    {
        "id": "1f9b66eb6c15e4dd",
        "type": "delay",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1280,
        "wires": [
            [
                "33378ab56505f1d5"
            ]
        ]
    },
    {
        "id": "d66253658a858fa8",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "DELETE_ALL",
        "func": "//DELETE FROM table_name WHERE condition\nvar delt_item = global.get(\"erase_selected\");\n\nvar pld = \" DELETE FROM [node_red].[dbo].[break_down] \" \n    \n//pld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "850d234a2e1c7b20",
        "type": "delay",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1140,
        "wires": [
            [
                "f36810f957b5865d"
            ]
        ]
    },
    {
        "id": "f36810f957b5865d",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "var d = new Date,\n    dformat = [d.getMonth() + 1,\n    d.getDate(),\n    d.getFullYear()].join('/') + ' ' +\n        [0,\n        0,\n        0].join(':');\nvar pervious = global.get(\"pervious_date\")   \n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar prblem = global.get(\"brk_problem_entery\");\nvar ident = global.get(\"brk_identification_entery\");\nvar action = global.get(\"brk_action_entery\");\nvar note = global.get(\"brk_note_entery\");\nvar brk_time = global.get(\"brk_loss_time\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[Furnace].[dbo].[break_down_history_1](TIME,PROBLEM,AREA,ACTION,FREQUENT,SLECTED_DATE,LOSS)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + prblem + \"','\" + ident + \"','\" + action + \"','\" + note + \"','\" + pervious + \"','\" + brk_time + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "f63d11a20a8ad0a1"
            ]
        ]
    },
    {
        "id": "f63d11a20a8ad0a1",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "9c332921d88cdcee",
        "name": "BREAK_DOWN_HISTORY",
        "query": "",
        "outField": "payload",
        "x": 920,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "6f9b856900a0fc50",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "var pld = \" SELECT PROBLEM,AREA,ACTION\" \npld = pld + \" FROM [Furnace].[dbo].[break_down_reference] \"\n    //pld    = pld + \"ORDER BY TIME\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 300,
        "wires": [
            [
                "30683b69327ed96f"
            ]
        ]
    },
    {
        "id": "03701ab92b74a301",
        "type": "ui_button",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "group": "b612597af736eb57",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "SEARCH",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 60,
        "y": 300,
        "wires": [
            [
                "6f9b856900a0fc50"
            ]
        ]
    },
    {
        "id": "30683b69327ed96f",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "BREAK_DOWN",
        "query": "",
        "outField": "payload",
        "x": 400,
        "y": 300,
        "wires": [
            [
                "cfa4cde65c90295f"
            ]
        ]
    },
    {
        "id": "cfa4cde65c90295f",
        "type": "ui_table",
        "z": "f7a9e29a90dd7dbe",
        "group": "b612597af736eb57",
        "name": "BREAKDOWN DATA",
        "order": 9,
        "width": 14,
        "height": 5,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 620,
        "y": 300,
        "wires": [
            [
                "7f94647626b7f182"
            ]
        ]
    },
    {
        "id": "132cbefcf8355abe",
        "type": "ui_text_input",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "Value",
        "tooltip": "",
        "group": "b612597af736eb57",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 50,
        "y": 480,
        "wires": [
            [
                "7e86fe88e6b98c35"
            ]
        ]
    },
    {
        "id": "7e86fe88e6b98c35",
        "type": "change",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filter.value",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "273ae0d878a86ee6",
        "type": "ui_dropdown",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "Field",
        "tooltip": "",
        "place": "Select option",
        "group": "b612597af736eb57",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "PROBLEM",
                "value": "PROBLEM",
                "type": "str"
            },
            {
                "label": "AREA",
                "value": "AREA",
                "type": "str"
            },
            {
                "label": "ACTION",
                "value": "ACTION",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 50,
        "y": 360,
        "wires": [
            [
                "80e1fb16e8dbd3af",
                "7a2c2b2eced34e1e"
            ]
        ]
    },
    {
        "id": "80e1fb16e8dbd3af",
        "type": "change",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filter.field",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7a2c2b2eced34e1e",
        "type": "change",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filter.type",
                "pt": "flow",
                "to": "=",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "65c4adc20732a8dd",
        "type": "ui_button",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "group": "b612597af736eb57",
        "order": 11,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Apply Filter",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-filter",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 660,
        "wires": [
            [
                "10e617fec97a7fe7",
                "9b48d52af002cd03",
                "69031f61669f022d"
            ]
        ]
    },
    {
        "id": "f72cdbd2b1962d2a",
        "type": "ui_button",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "group": "b612597af736eb57",
        "order": 14,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear Filter",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 90,
        "y": 720,
        "wires": [
            [
                "a484fbffa6193341",
                "10e617fec97a7fe7"
            ]
        ]
    },
    {
        "id": "a484fbffa6193341",
        "type": "change",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"command\":\"setFilter\",\"arguments\":[]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "10e617fec97a7fe7",
        "type": "change",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Dashboard_Filter\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "69031f61669f022d",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Construct Filter",
        "func": "// get filter obj\nconst filter = flow.get(\"filter\");\n\n// define payload\nmsg.payload = {\n    command: \"setFilter\",\n    arguments: [\n        filter.field,\n        filter.type,\n        filter.value\n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "cfa4cde65c90295f"
            ]
        ]
    },
    {
        "id": "9b48d52af002cd03",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Construct Filter",
        "func": "// get filter obj\nconst filter = flow.get(\"filter\");\n\n// define payload\nmsg.payload = {\n    command: \"download\",\n    arguments: [\"csv\", \"data.csv\" \n        \n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "7f94647626b7f182",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "function 155",
        "func": "var table_select = msg.payload\nglobal.set(\"TABLE_SELECTED\", table_select)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "c3bf2b690d5fdc2b"
            ]
        ]
    },
    {
        "id": "c3bf2b690d5fdc2b",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "function 157",
        "func": "var selected = global.get(\"TABLE_SELECTED\")\nglobal.set(\"brk_problem_entery\", selected.PROBLEM)\nglobal.set(\"brk_identification_entery\", selected.AREA)\nglobal.set(\"brk_action_entery\", selected.ACTION)\n\nvar problem = selected.PROBLEM;\nmsg.problem = {payload:problem};\nvar area = selected.AREA;\nmsg.area = { payload: area };\n\nvar action = selected.ACTION;\nmsg.action = { payload: action };\n\nreturn [msg.problem,msg.area,msg.action];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 300,
        "wires": [
            [
                "fa731c71642c52b2"
            ],
            [
                "df654658b5df7ae8"
            ],
            [
                "ed490e0c57614f0b"
            ]
        ]
    },
    {
        "id": "58fb79d74a2f1585",
        "type": "ui_button",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "group": "b612597af736eb57",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "NEW ADD",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "b88f5d72afbf3073"
            ]
        ]
    },
    {
        "id": "b88f5d72afbf3073",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "var d = new Date,\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar prblem = global.get(\"brk_problem_entery\");\nvar ident = global.get(\"brk_identification_entery\");\nvar action = global.get(\"brk_action_entery\");\nvar note = global.get(\"brk_note_entery\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[break_down_reference](PROBLEM,AREA,ACTION)\"      \npld = pld + \"VALUES ('\" + prblem + \"','\" + ident + \"','\" + action + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "fbc4f276852fbb77",
        "type": "ui_text_input",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "label": "Loss Time min*",
        "tooltip": "",
        "group": "b612597af736eb57",
        "order": 31,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "D104",
        "sendOnBlur": true,
        "className": "",
        "topicType": "flow",
        "x": 1200,
        "y": 460,
        "wires": [
            [
                "92b6377b76bb362e"
            ]
        ]
    },
    {
        "id": "92b6377b76bb362e",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "ENTER RUNNING PRODUCT",
        "func": "var brk_loss_time = msg.payload;\nglobal.set(\"brk_loss_time\", brk_loss_time);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "24e6ccb1e66f4d65",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "BREAK_DOWN",
        "query": "",
        "outField": "payload",
        "x": 1080,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "e575693143699ed6",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "Function",
        "func": "var d = new Date,\ndformat = [d.getMonth()+1,\n    d.getDate(),\n    d.getFullYear()].join('/')+' '+\n    [d.getHours(),\n    d.getMinutes(),\n    d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar prblem = global.get(\"brk_problem_entery\");\nvar ident = global.get(\"brk_identification_entery\");\nvar action = global.get(\"brk_action_entery\");\nvar note = global.get(\"brk_note_entery\");\nvar brk_time = global.get(\"brk_loss_time\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[para_3].[dbo].[break_down](TIME,PROBLEM,AREA,ACTION,FREQUENT,LOSS)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + prblem + \"','\" + ident + \"','\" + action + \"','\" + note + \"','\" + brk_time + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "2c3f7310cfac2466",
        "type": "MSSQL",
        "z": "f7a9e29a90dd7dbe",
        "mssqlCN": "9c332921d88cdcee",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1060,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "ffb13c10844733c0",
        "type": "postgresql",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "query": "INSERT INTO break_down(\"TIME\", \"PROBLEM\", \"AREA\", \"ACTION\", \"FREQUENT\", \"LOSS\")\nVALUES ($1, $2, $3, $4, $5, $6)",
        "postgreSQLConfig": "731e2ac7ebc3802d",
        "split": false,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 950,
        "y": 740,
        "wires": [
            [
                "17eaa7c604e45244"
            ]
        ]
    },
    {
        "id": "0c326e6897fc6989",
        "type": "delay",
        "z": "f7a9e29a90dd7dbe",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 740,
        "wires": [
            [
                "6a9e96988016bce1"
            ]
        ]
    },
    {
        "id": "17eaa7c604e45244",
        "type": "debug",
        "z": "f7a9e29a90dd7dbe",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 740,
        "wires": []
    },
    {
        "id": "bac3a3631fc3ed5e",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "function 161",
        "func": "msg.payload = `\nINSERT INTO break_down(\"TIME\", \"PROBLEM\", \"AREA\", \"ACTION\", \"FREQUENT\", \"LOSS\")\nVALUES ('2025-05-15 14:30:00', 'DirectTest', 'StationX', 'TestAction', 'Yes', '99')\nRETURNING *;\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6a9e96988016bce1",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "function 162",
        "func": "var d = new Date();\nvar dformat = [\n    d.getFullYear(),\n    (\"0\" + (d.getMonth() + 1)).slice(-2),\n    (\"0\" + d.getDate()).slice(-2)\n].join('-') + ' ' +\n    [\n        (\"0\" + d.getHours()).slice(-2),\n        (\"0\" + d.getMinutes()).slice(-2),\n        (\"0\" + d.getSeconds()).slice(-2)\n    ].join(':');\n\nvar prblem = global.get(\"brk_problem_entery\");\nvar ident = global.get(\"brk_identification_entery\");\nvar action = global.get(\"brk_action_entery\");\nvar note = global.get(\"brk_note_entery\");\nvar brk_time = global.get(\"brk_loss_time\");\n\n\n// Assign SQL and parameters\nmsg.params = [dformat, prblem, ident, action, note, brk_time];\n\n// For debug\nnode.warn(\"Sending query with values: \" + JSON.stringify(msg.payload));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 740,
        "wires": [
            [
                "ffb13c10844733c0"
            ]
        ]
    },
    {
        "id": "ff8991f0bc66b798",
        "type": "debug",
        "z": "f7a9e29a90dd7dbe",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 920,
        "wires": []
    },
    {
        "id": "accbc8f7f9b4f9f0",
        "type": "function",
        "z": "f7a9e29a90dd7dbe",
        "name": "function 165",
        "func": "// Check if rowsAffected exists and is an array\nif (msg.payload && msg.payload.rowsAffected && Array.isArray(msg.payload.rowsAffected)) {\n    var rows = msg.payload.rowsAffected[0];  // Get the first value\n\n    if (rows > 0) {\n        msg.payload = \"✅ Insert Successful. Rows affected: \" + rows;\n    } else {\n        msg.payload = \"⚠️ Insert executed, but no rows affected.\";\n    }\n} else {\n    msg.payload = \"❌ No valid rowsAffected info in response.\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 900,
        "wires": [
            [
                "ff8991f0bc66b798"
            ]
        ]
    },
    {
        "id": "2a06232ecfb989ad",
        "type": "debug",
        "z": "f7a9e29a90dd7dbe",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 860,
        "wires": []
    },
    {
        "id": "e209bfea53544a81",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_1\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off_1\")\nvar db = global.get(\"drop\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT TIME,PROBLEM,AREA,ACTION,FREQUENT,LOSS \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [Furnace].[dbo].\"\npld = pld+db\npld = pld + \" WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 380,
        "wires": [
            [
                "92a5600b7cb52134"
            ]
        ]
    },
    {
        "id": "92a5600b7cb52134",
        "type": "MSSQL",
        "z": "0934a0e5582d224f",
        "mssqlCN": "9c332921d88cdcee",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1300,
        "y": 440,
        "wires": [
            [
                "49a816dbb635c042"
            ]
        ]
    },
    {
        "id": "2a33bf785d6741b8",
        "type": "change",
        "z": "0934a0e5582d224f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "set_date_on_1",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "set_date_on_1",
                "pt": "global",
                "to": "payload",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "d17e68f347bcfa44",
        "type": "change",
        "z": "0934a0e5582d224f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "set_date_off_1",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "set_date_off_1",
                "pt": "global",
                "to": "payload",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "49a816dbb635c042",
        "type": "ui_table",
        "z": "0934a0e5582d224f",
        "group": "c21e9f42e5f4c40a",
        "name": "",
        "order": 14,
        "width": 20,
        "height": 18,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1450,
        "y": 440,
        "wires": []
    },
    {
        "id": "2150b363c044ae19",
        "type": "ui_text_input",
        "z": "0934a0e5582d224f",
        "name": "",
        "label": "FROM DATE/TIME",
        "tooltip": "",
        "group": "c21e9f42e5f4c40a",
        "order": 4,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "datetime-local",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 190,
        "y": 500,
        "wires": [
            [
                "75f11d9a5f13ab58"
            ]
        ]
    },
    {
        "id": "7701ad9ad2d60a6f",
        "type": "ui_text_input",
        "z": "0934a0e5582d224f",
        "name": "",
        "label": "TO DATE/TIME",
        "tooltip": "",
        "group": "c21e9f42e5f4c40a",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "datetime-local",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 200,
        "y": 540,
        "wires": [
            [
                "6a4ff1a5e3ed486e"
            ]
        ]
    },
    {
        "id": "70b9beace8bbf471",
        "type": "ui_dropdown",
        "z": "0934a0e5582d224f",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "c21e9f42e5f4c40a",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "BREAKDOWN HISTORY",
                "value": " break_down_history",
                "type": "str"
            },
            {
                "label": "DAILY REJECTION HISTORY",
                "value": " QT_DAILY_REJECTION_HISTORY",
                "type": "str"
            },
            {
                "label": "DAILY PRODUCTION",
                "value": " MC_DAILY_PRODUCTION_2",
                "type": "str"
            },
            {
                "label": "TOOL LIFE",
                "value": "tool_life",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 660,
        "y": 280,
        "wires": [
            [
                "97f1053215a1a8d7"
            ]
        ]
    },
    {
        "id": "97f1053215a1a8d7",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "function 27",
        "func": "var drop = msg.payload;\nglobal.set(\"drop\",drop)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "531db56cf8eb2a10",
        "type": "inject",
        "z": "0934a0e5582d224f",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "70b9beace8bbf471"
            ]
        ]
    },
    {
        "id": "3b4e41881c4f8be4",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "function 29",
        "func": "var m = global.get(\"drop\");\n\nif (m == \"break_down_history \") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4e8c8bc41bc2bc14",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_1\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off_1\")\nvar db = global.get(\"drop\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT TIME,MACHINE_NAME,MODEL_NAME,OPERATOR_NAME,INSPECTOR_NAME,LEAF_NO,SECTION,WEIGHT,QTY,TOTAL_WEIGHT,DEFECT \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].\"\npld = pld+db\npld = pld + \" WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 420,
        "wires": [
            [
                "92a5600b7cb52134"
            ]
        ]
    },
    {
        "id": "3c7a418d89b02a3a",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "function 30",
        "func": "var m = global.get(\"drop\");\n\nif (m == \"QT_DAILY_REJECTION_HISTORY \") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "478702027a3000e9",
        "type": "ui_button",
        "z": "0934a0e5582d224f",
        "name": "",
        "group": "c21e9f42e5f4c40a",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "ENTER",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 380,
        "wires": [
            [
                "b10a7798adb5091b",
                "89d928da392658e0",
                "13e260bbfdfe8ab7",
                "fe7fbe2afe0d835e"
            ]
        ]
    },
    {
        "id": "11c45b85bea180a9",
        "type": "ui_button",
        "z": "0934a0e5582d224f",
        "name": "",
        "group": "c21e9f42e5f4c40a",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "EXPORT TO Excel",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1010,
        "y": 600,
        "wires": [
            [
                "622bc7209f11ef53"
            ]
        ]
    },
    {
        "id": "a7f03de71fd4bfef",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "function 53",
        "func": "var m = global.get(\"drop\");\n\nif (m == \"MC_DAILY_PRODUCTION_1\") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ac257ad8c442bb40",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_1\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off_1\")\nvar db = global.get(\"drop\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT DATE,PRODUCT_NAME,PRODUCT_QTY,PRODUCTION_COUNT,PRODUCTION_PLAN_TIME,MACHINE_CYCLE_TIME,ACTUAL_OEE,OPERATOR_NAME \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].\"\npld = pld+db\npld = pld + \" WHERE DATE BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY DATE\";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "92a5600b7cb52134"
            ]
        ]
    },
    {
        "id": "6fa542d21598c136",
        "type": "http response",
        "z": "0934a0e5582d224f",
        "name": "",
        "statusCode": "200",
        "headers": {
            "Content-Disposition": "attachment; filename=\"example.csv\"",
            "content-type": "text/csv"
        },
        "x": 1980,
        "y": 860,
        "wires": []
    },
    {
        "id": "75f11d9a5f13ab58",
        "type": "moment",
        "z": "0934a0e5582d224f",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Asia/Calcutta",
        "adjAmount": 0,
        "adjType": "years",
        "adjDir": "subtract",
        "format": "",
        "locale": "en-US",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Asia/Calcutta",
        "x": 400,
        "y": 440,
        "wires": [
            [
                "2a33bf785d6741b8"
            ]
        ]
    },
    {
        "id": "6a4ff1a5e3ed486e",
        "type": "moment",
        "z": "0934a0e5582d224f",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Asia/Calcutta",
        "adjAmount": 0,
        "adjType": "years",
        "adjDir": "subtract",
        "format": "",
        "locale": "en-US",
        "output": "payload",
        "outputType": "msg",
        "outTz": "Asia/Calcutta",
        "x": 400,
        "y": 500,
        "wires": [
            [
                "d17e68f347bcfa44"
            ]
        ]
    },
    {
        "id": "622bc7209f11ef53",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "Construct Filter",
        "func": "// get filter obj\nconst filter = flow.get(\"filter\");\n\n// define payload\nmsg.payload = {\n    command: \"download\",\n    arguments: [\"csv\", \"data.csv\" \n        \n    ]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 600,
        "wires": [
            [
                "49a816dbb635c042"
            ]
        ]
    },
    {
        "id": "b10a7798adb5091b",
        "type": "switch",
        "z": "0934a0e5582d224f",
        "name": "",
        "property": "drop",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": " break_down_history",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 380,
        "wires": [
            [
                "e209bfea53544a81"
            ]
        ]
    },
    {
        "id": "89d928da392658e0",
        "type": "switch",
        "z": "0934a0e5582d224f",
        "name": "",
        "property": "drop",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": " QT_DAILY_REJECTION_HISTORY",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 420,
        "wires": [
            [
                "4e8c8bc41bc2bc14"
            ]
        ]
    },
    {
        "id": "13e260bbfdfe8ab7",
        "type": "switch",
        "z": "0934a0e5582d224f",
        "name": "",
        "property": "drop",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": " MC_DAILY_PRODUCTION_2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 460,
        "wires": [
            [
                "ac257ad8c442bb40"
            ]
        ]
    },
    {
        "id": "fe7fbe2afe0d835e",
        "type": "switch",
        "z": "0934a0e5582d224f",
        "name": "",
        "property": "drop",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "tool_life",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 500,
        "wires": [
            [
                "c9729ebb957c42f7"
            ]
        ]
    },
    {
        "id": "c9729ebb957c42f7",
        "type": "function",
        "z": "0934a0e5582d224f",
        "name": "Function",
        "func": "var ontime = flow.get(\"set_date_on_1\")\n//var ontime_1 = flow.get(\"set_time_on\")\nvar offtime = flow.get(\"set_date_off_1\")\nvar db = global.get(\"drop\")\n//var offtime_1 = flow.get(\"set_time_off\")\n//var ondate = ontime + \" \" + ontime_1;\n//var offdate = offtime + \" \" + offtime_1;\nvar pld = \"SELECT DATE,PUNCHING_BUSH,FORMING_LOADER_FINGER,FORMING_UNLOADER_FINGER_SPRING,FORMING_UNLOADER_FINGER,QUENCHING_LOADER_FINGER,QUENCHING_UNLOADER_FINGER,QUENCHING_UNLOADER_SPRING_PLATE,TEMPERING_LOADER_FINGER,TEMPERING_LOADER_SPRING_PLATE,STRAIGHTING_PLATE \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].\"\npld = pld+db\npld = pld + \" WHERE DATE BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY DATE\";\n//pld = pld + \"WHERE ID = 1 \"  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 500,
        "wires": [
            [
                "92a5600b7cb52134"
            ]
        ]
    },
    {
        "id": "2b2d09a6ab0f35a0",
        "type": "ui_text",
        "z": "ac76d9a325ed7956",
        "group": "8cd8e17387ed76d7",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "ENTER OPERATOR NAME :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 580,
        "y": 240,
        "wires": []
    },
    {
        "id": "2608eb9e480e2e92",
        "type": "ui_text_input",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": ".",
        "tooltip": "",
        "group": "8cd8e17387ed76d7",
        "order": 6,
        "width": 7,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "D104",
        "sendOnBlur": false,
        "className": "",
        "topicType": "flow",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "f33e34c826fd4e6e"
            ]
        ]
    },
    {
        "id": "57a66ec58b6eb5fa",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "ENTER TOTAL PRODUCTION TIME ",
        "func": "var production_time = 1440;\nglobal.set(\"production_time\", production_time);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f33e34c826fd4e6e",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "ENTER OPERATOR NAME",
        "func": "var op_name = msg.payload;\nglobal.set(\"op_name\", op_name);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4775d8a6064580ef",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "ENTER RUNNING PRODUCT",
        "func": "var run_prod = msg.payload;\nglobal.set(\"run_prod\", run_prod);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c97c0bf9819f8f09",
        "type": "inject",
        "z": "ac76d9a325ed7956",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "2a9b249eb2a91869",
                "57a66ec58b6eb5fa"
            ]
        ]
    },
    {
        "id": "ad617dd260e46125",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "ENTER RUNNING PRODUCT QTY(NO'S)",
        "func": "var run_prod_qty = msg.payload;\nglobal.set(\"run_prod_qty\", run_prod_qty);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "4c87e360cbcbcb94",
        "type": "inject",
        "z": "ac76d9a325ed7956",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 570,
        "y": 660,
        "wires": [
            [
                "be76cfdb54b5dc13"
            ]
        ]
    },
    {
        "id": "e1867f870e964664",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "COUNTER",
        "func": "var performance_time = global.get(\"performance_time\") || 0\nperformance_time++\nglobal.set(\"performance_time\", performance_time)\nmsg.payload = performance_time\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 755,
        "y": 660,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "be76cfdb54b5dc13",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 35",
        "func": "var m = global.get(\"performance_time_start\");\n//var m1 = global.get(\"tool1_life_set\");\n\nif (m == \"TRUE\") {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 655,
        "y": 660,
        "wires": [
            [
                "472f118610aade3b"
            ],
            []
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "3579a38399b751c8",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 36",
        "func": "var m = global.get(\"product_check_comp\");\nvar m1 = global.get(\"prodcut_name_pmc\");\nif (m1 != m) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 880,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b1fbfcbbe299b059",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "Function",
        "func": "var pld = \"SELECT PERFORMANCE,RUNNING_PRODUCT \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[record_1] \"\n\n//pld = pld + \"WHERE TIME = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\npld = pld + \"WHERE ID = 1 \";  \n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 755,
        "y": 840,
        "wires": [
            [
                "b722725040c8eaad"
            ]
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "b722725040c8eaad",
        "type": "MSSQL",
        "z": "ac76d9a325ed7956",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 805,
        "y": 840,
        "wires": [
            [
                "54525624a964d7d5"
            ]
        ],
        "icon": "node-red/leveldb.png",
        "l": false
    },
    {
        "id": "0b7615c3c0a21835",
        "type": "delay",
        "z": "ac76d9a325ed7956",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 840,
        "wires": [
            [
                "b196a53ee3d2e281"
            ]
        ]
    },
    {
        "id": "dd0f9956a42bca52",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "MACHINE_STATUS",
        "func": "var m = global.get(\"MC_STATU\");\n//var m1 = global.get(\"tool1_life_set\");\n\nif (m == false) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 800,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "54525624a964d7d5",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 37",
        "func": "var perfor = msg.payload[0].PERFORMANCE.toFixed(1);\nvar running_product_1 = msg.payload[0].RUNNING_PRODUCT\n//var perfor_time = global.get(\"performance_time\");\nvar production_count = global.get(\"individual_counter\");\nvar cycl_time = global.get(\"CY_TIM\");\nvar total_time = global.get(\"production_time\")\nvar actual_oee = (((production_count / (60 / cycl_time))/ total_time)*100).toFixed(1);\n//var data = (actual_time / perfor_time);\nvar final_performance_1 =+ perfor;\nvar final_performance_2 = + actual_oee;\nvar final_performance = (final_performance_1 + final_performance_2).toFixed(1)\nvar running_product_2 =+ running_product_1\nvar running_product = (running_product_2+1)\nmsg.payload = actual_oee\nglobal.set(\"actual_oee\", actual_oee)\nglobal.set(\"final_performance\", final_performance)\nglobal.set(\"running_product\", running_product)\nglobal.set(\"performance_time_start\", \"FALSE\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 855,
        "y": 840,
        "wires": [
            [
                "0b7615c3c0a21835"
            ]
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "b196a53ee3d2e281",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "Function",
        "func": "\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar count = global.get(\"full_day_counter\");\nvar prod_time = global.get(\"production_time\");\nvar perform = global.get(\"final_performance\");\nvar running_p1 = global.get(\"running_product\");\n//var dtstmp = new Date().toString();\nvar pld = \"UPDATE [node_red].[dbo].[record_1] \"      \npld = pld + \"SET TOTAL_COUNT = '\" + count + \"' ,PRODUCTION_TIME = '\" + prod_time + \"',PERFORMANCE = '\" + perform + \"',RUNNING_PRODUCT = '\" + running_p1 + \"'\"\n\npld = pld + \"WHERE ID = 1\"\n\nmsg.payload = pld\nglobal.set(\"performance_time\", 0)             \nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1055,
        "y": 840,
        "wires": [
            [
                "353f7d7cb121b1a7"
            ]
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "353f7d7cb121b1a7",
        "type": "MSSQL",
        "z": "ac76d9a325ed7956",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1105,
        "y": 840,
        "wires": [
            [
                "4bb96f649ecc397c"
            ]
        ],
        "icon": "node-red/redis.png",
        "l": false
    },
    {
        "id": "ffa4ccc7972f7b4a",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 40",
        "func": "msg.payload = global.get(\"performance_time_start\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "343270ce8e1872ac",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 41",
        "func": "var performance_time_start = msg.payload\nglobal.set(\"performance_time_start\", performance_time_start)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 960,
        "wires": [
            [
                "ffa4ccc7972f7b4a"
            ]
        ]
    },
    {
        "id": "17fa641125629558",
        "type": "ui_text",
        "z": "ac76d9a325ed7956",
        "group": "f4bbf2fbc011660c",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "ENTER QUALITY INSPECTOR NAME :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 580,
        "y": 1160,
        "wires": []
    },
    {
        "id": "8f4faa67f15ba978",
        "type": "ui_text_input",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "f4bbf2fbc011660c",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 500,
        "y": 1200,
        "wires": [
            [
                "ff29d2002e35d491"
            ]
        ]
    },
    {
        "id": "5ca6461ff83814ac",
        "type": "ui_text",
        "z": "ac76d9a325ed7956",
        "group": "f4bbf2fbc011660c",
        "order": 5,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "ENTER TODAY NUMBER OF PART REJECT :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 580,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8c67334d28fb2d8c",
        "type": "ui_text_input",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "f4bbf2fbc011660c",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 500,
        "y": 1280,
        "wires": [
            [
                "9c87b959d7e5e05e"
            ]
        ]
    },
    {
        "id": "0ace3c997b334d9e",
        "type": "comment",
        "z": "ac76d9a325ed7956",
        "name": "MC# Q.C",
        "info": "",
        "x": 480,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ff29d2002e35d491",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "ENTER QUALITY INSPECTOR NAME",
        "func": "var qt_opr_name = msg.payload;\nglobal.set(\"qt_opr_name\", qt_opr_name);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "9c87b959d7e5e05e",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "ENTER TODAY NUMBER OF PART REJECT",
        "func": "var rejt_part = msg.payload;\nglobal.set(\"rejt_part\", rejt_part);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "4bb96f649ecc397c",
        "type": "delay",
        "z": "ac76d9a325ed7956",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 840,
        "wires": [
            [
                "2bfbc5cecfc636be"
            ]
        ]
    },
    {
        "id": "2bfbc5cecfc636be",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "Function",
        "func": "var dformat = global.get(\"pervious_date\");\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar oper_name = global.get(\"op_name\");\nvar plan_product_time = global.get(\"production_time\");\nvar running_product_name = global.get(\"product_check_comp\");\nvar plan_product_qty = global.get(\"run_prod_qty\");\nvar actual_oe = global.get(\"actual_oee\");\nvar cyl_count = global.get(\"individual_counter\");\nvar cycl_time = global.get(\"CY_TIM\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[MC_DAILY_PRODUCTION_1](DATE,PRODUCT_NAME,PRODUCT_QTY,PRODUCTION_COUNT,PRODUCTION_PLAN_TIME,MACHINE_CYCLE_TIME,ACTUAL_OEE,OPERATOR_NAME)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + running_product_name + \"','\" + cyl_count + \"','\" + cyl_count + \"','\" + plan_product_time + \"', '\" + cycl_time + \"','\" + actual_oe + \"','\" + oper_name + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1295,
        "y": 840,
        "wires": [
            [
                "73f6feb0bd6c2cae"
            ]
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "73f6feb0bd6c2cae",
        "type": "MSSQL",
        "z": "ac76d9a325ed7956",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1345,
        "y": 840,
        "wires": [
            [
                "4cfbb3852778398c"
            ]
        ],
        "icon": "node-red/leveldb.png",
        "l": false
    },
    {
        "id": "2a9b249eb2a91869",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 77",
        "func": "var prodct_name = global.get(\"prodcut_name_pmc\");\nmsg.payload = prodct_name\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "472f118610aade3b",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 81",
        "func": "var m = global.get(\"product_check_comp\");\nvar m1 = global.get(\"prodcut_name_pmc\");\n\nif (m1 == m) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 705,
        "y": 660,
        "wires": [
            [
                "e1867f870e964664"
            ],
            []
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "53b30531f5803708",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "done_status",
        "func": "var dailyprdt_data_wrte_dne = 1;\nglobal.set(\"dailyprdt_data_wrte_dne\", dailyprdt_data_wrte_dne)\nvar product_check_123 = global.get(\"prodcut_name_pmc\");\nglobal.set(\"product_check_comp\", product_check_123)\nglobal.set(\"machine_data_update\", 1)\nglobal.set(\"bypass_deldata\",0)\nglobal.set(\"machine_counter_reset_1\", 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1625,
        "y": 840,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "a4ea72621f2790ef",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 83",
        "func": "var m = global.get(\"dailyprdt_data_wrte_dne\");\n//var m1 = global.get(\"tool1_life_set\");\n\nif (m == 0) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 800,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "576815375fb79164",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "done_status_1",
        "func": "var product_check_123 = global.get(\"prodcut_name_pmc\");\nglobal.set(\"product_check_comp\", product_check_123)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "672896134b1eea71",
        "type": "comment",
        "z": "ac76d9a325ed7956",
        "name": "MC# LOSS",
        "info": "",
        "x": 910,
        "y": 1540,
        "wires": []
    },
    {
        "id": "7167dec35607f97a",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "BREAKDOWN LOSS ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 4,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 770,
        "y": 2020,
        "wires": [
            [
                "ae1212ecb9b4a521"
            ]
        ]
    },
    {
        "id": "ae1212ecb9b4a521",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 113",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar bd_loss = msg.payload\nvar bd_loss_1 = (bd_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"bd_loss_1\", bd_loss_1);\nglobal.set(\"bd_loss_2\", bd_loss)\nmsg.payload = bd_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "ce6f34c2f17f0c0d",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "POWER LOSS ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 7,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 750,
        "y": 1980,
        "wires": [
            [
                "efb2a838e91840bf"
            ]
        ]
    },
    {
        "id": "efb2a838e91840bf",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 114",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar power_loss = msg.payload\nvar power_loss_1 = (power_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"power_loss_1\", power_loss_1);\nglobal.set(\"power_loss_2\", power_loss)\nmsg.payload = power_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "d024c2f1f0794824",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "QUALITY LOSS ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 6,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 800,
        "y": 1660,
        "wires": [
            [
                "6d699c3a8e9d944d"
            ]
        ]
    },
    {
        "id": "6d699c3a8e9d944d",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 115",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar qualt_loss = msg.payload\nvar qualt_loss_1 = (qualt_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"qualt_loss_1\", qualt_loss_1);\nglobal.set(\"qualt_loss_2\", qualt_loss)\nmsg.payload = qualt_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "ce0b2ac528478c03",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "total_organization",
        "func": "var no_load = global.get(\"noload_loss_1\")\nvar sample_run = global.get(\"nosample_loss_1\")\nvar no_manpower = global.get(\"nomanpower_loss_1\")\nvar no_lifter = global.get(\"nolifter_loss_1\")\n\nvar orginat_loss_1 = no_load + sample_run + no_manpower + no_lifter\nvar orginat_loss = orginat_loss_1\n//var orginat_loss_1 = (orginat_loss*100/1300).toFixed(1)\nglobal.set(\"orginat_loss_1\", orginat_loss_1);\nglobal.set(\"orginat_loss_2\", orginat_loss)\nmsg.payload = orginat_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "b5860a126988089e",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "SETUP LOSS ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 9,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 750,
        "y": 1900,
        "wires": [
            [
                "973831f55c258267"
            ]
        ]
    },
    {
        "id": "973831f55c258267",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 117",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar setup_loss = msg.payload\nvar setup_loss_1 = (setup_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"setup_loss_1\", setup_loss_1);\nglobal.set(\"setup_loss_2\", setup_loss)\nmsg.payload = setup_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "9647ef196bb91c51",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "NOLOAD LOSS ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 10,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 800,
        "y": 1740,
        "wires": [
            [
                "dbb53bb3b131a987"
            ]
        ]
    },
    {
        "id": "dbb53bb3b131a987",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 118",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar noload_loss = msg.payload\nvar noload_loss_1 = (noload_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"noload_loss_1\", noload_loss_1);\nglobal.set(\"noload_loss_2\", noload_loss)\nmsg.payload = noload_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1740,
        "wires": [
            [
                "ce0b2ac528478c03"
            ]
        ]
    },
    {
        "id": "b79629225bf723fc",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "Function",
        "func": "var d = new Date,\n    dformat = [d.getMonth() + 1,\n    d.getDate(),\n    d.getFullYear()].join('/') + ' ' +\n        [d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()].join(':');\n//var dformat = global.get(\"pervious_date\");\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar oper_name = global.get(\"op_name\");\nvar plan_product_time = global.get(\"production_time\");\nvar running_product_name = global.get(\"product_check_comp\");\nvar plan_product_qty = global.get(\"run_prod_qty\");\nvar actual_oe = global.get(\"actual_oee\");\nvar cyl_count = global.get(\"individual_counter\");\nvar cycl_time = global.get(\"CY_TIM\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[MC_DAILY_PRODUCTION_2](DATE,PRODUCT_NAME,PRODUCT_QTY,PRODUCTION_COUNT,PRODUCTION_PLAN_TIME,MACHINE_CYCLE_TIME,ACTUAL_OEE,OPERATOR_NAME)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + running_product_name + \"','\" + cyl_count + \"','\" + cyl_count + \"','\" + plan_product_time + \"', '\" + cycl_time + \"','\" + actual_oe + \"','\" + oper_name + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1525,
        "y": 840,
        "wires": [
            [
                "de4fdca6edaac8f2"
            ]
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "de4fdca6edaac8f2",
        "type": "MSSQL",
        "z": "ac76d9a325ed7956",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1575,
        "y": 840,
        "wires": [
            [
                "53b30531f5803708"
            ]
        ],
        "icon": "node-red/leveldb.png",
        "l": false
    },
    {
        "id": "4cfbb3852778398c",
        "type": "delay",
        "z": "ac76d9a325ed7956",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 840,
        "wires": [
            [
                "b79629225bf723fc"
            ]
        ]
    },
    {
        "id": "d3ae7345c587cd17",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "PRODUCT_NAME",
        "property": "product_check_comp",
        "propertyType": "global",
        "rules": [
            {
                "t": "neq",
                "v": "prodcut_name_pmc",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 840,
        "wires": [
            [
                "f2b02295058b2041"
            ]
        ]
    },
    {
        "id": "f2b02295058b2041",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "MAC_STAUS",
        "property": "MC_STATU",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 840,
        "wires": [
            [
                "cefa0ec519a77628"
            ]
        ]
    },
    {
        "id": "1645f4bc1a191506",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "MAC_STAUS",
        "property": "MC_STATU",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 240,
        "y": 960,
        "wires": [
            [
                "89d6f84e7b42a49c"
            ]
        ]
    },
    {
        "id": "89d6f84e7b42a49c",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "PRODUCT_NAME",
        "property": "product_check_comp",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "prodcut_name_pmc",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 960,
        "wires": [
            [
                "343270ce8e1872ac",
                "8c7f68c0b286547e"
            ]
        ]
    },
    {
        "id": "22687b0e36b83380",
        "type": "inject",
        "z": "ac76d9a325ed7956",
        "name": "",
        "props": [],
        "repeat": "9",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "b1a291086c19bbe6"
            ]
        ]
    },
    {
        "id": "6fe87150b4d5fdeb",
        "type": "delay",
        "z": "ac76d9a325ed7956",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 1080,
        "wires": [
            [
                "d28f5ce3d41f3512"
            ]
        ]
    },
    {
        "id": "b1a291086c19bbe6",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "individual_count_reset",
        "property": "machine_counter_reset_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 1080,
        "wires": [
            [
                "6fe87150b4d5fdeb"
            ]
        ]
    },
    {
        "id": "d28f5ce3d41f3512",
        "type": "change",
        "z": "ac76d9a325ed7956",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "machine_counter_reset_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "cefa0ec519a77628",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "dailyprdt_data_wrte",
        "property": "dailyprdt_data_wrte_dne",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 840,
        "wires": [
            [
                "b1fbfcbbe299b059"
            ]
        ]
    },
    {
        "id": "9e6eaf5cbf571ba0",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 130",
        "func": "var product_check_123 = global.get(\"prodcut_name_pmc\");\nglobal.set(\"product_check_comp\", product_check_123)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "8c7f68c0b286547e",
        "type": "change",
        "z": "ac76d9a325ed7956",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "dailyprdt_data_wrte_dne",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e8ae1d0ffc796b0a",
        "type": "inject",
        "z": "ac76d9a325ed7956",
        "d": true,
        "name": "AT_8.28 AM",
        "props": [],
        "repeat": "",
        "crontab": "20 08 * * *",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 740,
        "y": 740,
        "wires": [
            [
                "b1fbfcbbe299b059"
            ]
        ]
    },
    {
        "id": "9851c723d389a37f",
        "type": "inject",
        "z": "ac76d9a325ed7956",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 960,
        "wires": [
            [
                "1645f4bc1a191506"
            ]
        ]
    },
    {
        "id": "6d6d9aa5fc7d786c",
        "type": "debug",
        "z": "ac76d9a325ed7956",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 920,
        "wires": []
    },
    {
        "id": "d916de8f22c75e77",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 132",
        "func": "msg.payload = global.get(\"dailyprdt_data_wrte_dne\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 920,
        "wires": [
            [
                "6d6d9aa5fc7d786c"
            ]
        ]
    },
    {
        "id": "eecda562f5748340",
        "type": "inject",
        "z": "ac76d9a325ed7956",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 920,
        "wires": [
            [
                "d916de8f22c75e77"
            ]
        ]
    },
    {
        "id": "29c8dbce8f0607e2",
        "type": "moment",
        "z": "ac76d9a325ed7956",
        "name": "",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "",
        "output": "",
        "outputType": "msg",
        "outTz": "",
        "x": 620,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "cc7e9afdd0e5df6f",
        "type": "change",
        "z": "ac76d9a325ed7956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "fcolor",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1660,
        "wires": [
            [
                "d024c2f1f0794824"
            ]
        ]
    },
    {
        "id": "8356eddca6f38d80",
        "type": "debug",
        "z": "ac76d9a325ed7956",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1540,
        "wires": []
    },
    {
        "id": "9ce999b4aa948336",
        "type": "ui_dropdown",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "879de5f30639dce9",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "QUALITY LOSS ",
                "value": 11,
                "type": "num"
            },
            {
                "label": "MANAGMENT LOSS",
                "value": 12,
                "type": "num"
            },
            {
                "label": "SETUP LOSS",
                "value": 13,
                "type": "num"
            },
            {
                "label": "TECHNICAL LOSS",
                "value": 14,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 60,
        "y": 1660,
        "wires": [
            [
                "efccb578e32afcfc",
                "3cbf3fd358667336",
                "72faffcd464fa5d6",
                "e2971faedc9219bc",
                "c11ddc58e0a23882",
                "ea8a0c46fb1b5875",
                "0c36958ed2ac6e07",
                "b61e0d0c68555f20"
            ]
        ]
    },
    {
        "id": "18c147e8e9044558",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 137",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1660,
        "wires": [
            [
                "cc7e9afdd0e5df6f"
            ]
        ]
    },
    {
        "id": "efccb578e32afcfc",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "11",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 1660,
        "wires": [
            [
                "18c147e8e9044558"
            ]
        ]
    },
    {
        "id": "3cbf3fd358667336",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "11",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 1700,
        "wires": [
            [
                "ac7fdb5fd83a0525"
            ]
        ]
    },
    {
        "id": "ac7fdb5fd83a0525",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 138",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1700,
        "wires": [
            [
                "cc7e9afdd0e5df6f"
            ]
        ]
    },
    {
        "id": "403c926c3b4ba715",
        "type": "change",
        "z": "ac76d9a325ed7956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "fcolor",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "9647ef196bb91c51",
                "a84c0ebd063e5754",
                "afe4ec46d583e5ce",
                "810131baa7a39924"
            ]
        ]
    },
    {
        "id": "55a50eaf9a6b1d8b",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 140",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1740,
        "wires": [
            [
                "403c926c3b4ba715"
            ]
        ]
    },
    {
        "id": "72faffcd464fa5d6",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "12",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 1740,
        "wires": [
            [
                "55a50eaf9a6b1d8b"
            ]
        ]
    },
    {
        "id": "e2971faedc9219bc",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "12",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 1780,
        "wires": [
            [
                "fe1a42b911bd7ecc"
            ]
        ]
    },
    {
        "id": "fe1a42b911bd7ecc",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 141",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1780,
        "wires": [
            [
                "403c926c3b4ba715"
            ]
        ]
    },
    {
        "id": "a84c0ebd063e5754",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "SAMPLE RUN ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 12,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 790,
        "y": 1780,
        "wires": [
            [
                "877116649dbe8d15"
            ]
        ]
    },
    {
        "id": "afe4ec46d583e5ce",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "NO MANPOWER ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 13,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 800,
        "y": 1820,
        "wires": [
            [
                "5badaa0fb72710ae"
            ]
        ]
    },
    {
        "id": "810131baa7a39924",
        "type": "ui_numeric",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "NO LIFTER ENTERY in Min.",
        "tooltip": "",
        "group": "879de5f30639dce9",
        "order": 15,
        "width": 10,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": 1,
        "className": "",
        "x": 780,
        "y": 1860,
        "wires": [
            [
                "c03d515c3a9eef37"
            ]
        ]
    },
    {
        "id": "877116649dbe8d15",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 142",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar nosample_loss = msg.payload\nvar nosample_loss_1 = (nosample_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"nosample_loss_1\", nosample_loss_1);\nglobal.set(\"nosample_loss_1\", nosample_loss_1)\nmsg.payload = nosample_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1780,
        "wires": [
            [
                "ce0b2ac528478c03"
            ]
        ]
    },
    {
        "id": "5badaa0fb72710ae",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 143",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar nomanpower_loss = msg.payload\nvar nomanpower_loss_1 = (nomanpower_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"nomanpower_loss_1\", nomanpower_loss_1);\nglobal.set(\"nomanpower_loss_2\", nomanpower_loss);\nmsg.payload = nomanpower_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1820,
        "wires": [
            [
                "ce0b2ac528478c03"
            ]
        ]
    },
    {
        "id": "c03d515c3a9eef37",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 144",
        "func": "var total_prd_time = global.get(\"production_time\")\nvar nolifter_loss = msg.payload\nvar nolifter_loss_1 = (nolifter_loss * 100 / total_prd_time).toFixed(1)\nglobal.set(\"nolifter_loss_1\", nolifter_loss_1);\nglobal.set(\"nolifter_loss_2\", nolifter_loss)\nmsg.payload = nolifter_loss_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1860,
        "wires": [
            [
                "ce0b2ac528478c03"
            ]
        ]
    },
    {
        "id": "b5c6da2e21e1e247",
        "type": "change",
        "z": "ac76d9a325ed7956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "fcolor",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1900,
        "wires": [
            [
                "b5860a126988089e"
            ]
        ]
    },
    {
        "id": "f1dec7f11a641596",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 146",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1900,
        "wires": [
            [
                "b5c6da2e21e1e247"
            ]
        ]
    },
    {
        "id": "c11ddc58e0a23882",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "13",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1900,
        "wires": [
            [
                "f1dec7f11a641596"
            ]
        ]
    },
    {
        "id": "ea8a0c46fb1b5875",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "13",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1940,
        "wires": [
            [
                "59eca6a88b6a5a88"
            ]
        ]
    },
    {
        "id": "59eca6a88b6a5a88",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 147",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1940,
        "wires": [
            [
                "b5c6da2e21e1e247"
            ]
        ]
    },
    {
        "id": "669f2a38174aa2dd",
        "type": "change",
        "z": "ac76d9a325ed7956",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "fcolor",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1980,
        "wires": [
            [
                "ce6f34c2f17f0c0d",
                "7167dec35607f97a"
            ]
        ]
    },
    {
        "id": "7e650df442a24a5a",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 149",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1980,
        "wires": [
            [
                "669f2a38174aa2dd"
            ]
        ]
    },
    {
        "id": "0c36958ed2ac6e07",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "14",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 1980,
        "wires": [
            [
                "7e650df442a24a5a"
            ]
        ]
    },
    {
        "id": "b61e0d0c68555f20",
        "type": "switch",
        "z": "ac76d9a325ed7956",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "14",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2020,
        "wires": [
            [
                "893f532d0c230cee"
            ]
        ]
    },
    {
        "id": "893f532d0c230cee",
        "type": "function",
        "z": "ac76d9a325ed7956",
        "name": "function 150",
        "func": "msg.payload = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2020,
        "wires": [
            [
                "669f2a38174aa2dd"
            ]
        ]
    },
    {
        "id": "fb8109e082c3d7b5",
        "type": "ui_text_input",
        "z": "ac76d9a325ed7956",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "8cd8e17387ed76d7",
        "order": 3,
        "width": 7,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "D104",
        "sendOnBlur": false,
        "className": "",
        "topicType": "flow",
        "x": 660,
        "y": 440,
        "wires": [
            [
                "4775d8a6064580ef"
            ]
        ]
    },
    {
        "id": "86be0829cf636797",
        "type": "ui_text",
        "z": "ac76d9a325ed7956",
        "group": "8cd8e17387ed76d7",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "ENTER RUNNING PRODUCT :",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "914d0f72e94b13e0",
        "type": "ui_button",
        "z": "ac76d9a325ed7956",
        "name": "",
        "group": "8cd8e17387ed76d7",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "ENTER",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 80,
        "y": 840,
        "wires": [
            [
                "d3ae7345c587cd17"
            ]
        ]
    },
    {
        "id": "2049f90ad83fc7b5",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "25 08 * * *",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "3c99af17d0a4df13"
            ]
        ]
    },
    {
        "id": "d2ecae8a561b7627",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 42",
        "func": "var pld = \"SELECT TOTAL_DWN,TOTAL_COUNT,PRODUCTION_TIME,PERFORMANCE,RUNNING_PRODUCT,BREAKDOWN,NOLOAD \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n//var pld =       \"SELECT ID, Topic, Payload, Timestamp \"\npld = pld + \"FROM [node_red].[dbo].[record_1] \"\n\n//pld = pld + \"WHERE TIME = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\npld = pld + \"WHERE ID = 1 \";\n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\nmsg.payload = pld\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 220,
        "wires": [
            [
                "a6650c9b21d1f424"
            ]
        ]
    },
    {
        "id": "a6650c9b21d1f424",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 780,
        "y": 220,
        "wires": [
            [
                "1ad4643b32181e82"
            ]
        ]
    },
    {
        "id": "1ad4643b32181e82",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 43",
        "func": "var perfor = msg.payload[0].PERFORMANCE.toFixed(1);\nvar running_product_1 = msg.payload[0].RUNNING_PRODUCT\nvar total_dwn = msg.payload[0].TOTAL_DWN\nvar total_prod = msg.payload[0].TOTAL_COUNT\nvar production_time = msg.payload[0].PRODUCTION_TIME\nvar brekdwn = msg.payload[0].BREAKDOWN\nvar nold = msg.payload[0].NOLOAD\nvar final_oee = (perfor/1).toFixed(1)\nglobal.set(\"d_final_oee\", final_oee)\nglobal.set(\"d_total_dwn\", total_dwn)\nglobal.set(\"d_total_prod\", total_prod)\nglobal.set(\"d_production_time\", production_time)\nglobal.set(\"d_brekdwn\", brekdwn)\nglobal.set(\"d_nold\", nold)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 220,
        "wires": [
            [
                "30c7dc02c2a6774d"
            ]
        ]
    },
    {
        "id": "30c7dc02c2a6774d",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 220,
        "wires": [
            [
                "62e48441e43223af"
            ]
        ]
    },
    {
        "id": "62e48441e43223af",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "Function",
        "func": "var dformat = global.get(\"pervious_date\");\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar final_oee = global.get(\"d_final_oee\")\nvar total_dwn = global.get(\"d_total_dwn\")\nvar total_prod = global.get(\"d_total_prod\")\nvar production_time = global.get(\"d_production_time\")\nvar brekdwn = global.get(\"d_brekdwn\")\nvar nold = global.get(\"d_nold\")\nvar gas_cons = global.get(\"gas_cons\")\nvar pwer_cons = global.get(\"power_cons\")\nvar bd_loss = global.get(\"bd_loss_1\")\nvar power_loss = global.get(\"power_loss_1\")\nvar qualt_loss = global.get(\"qualt_loss_1\")\nvar orginat_loss = global.get(\"orginat_loss_1\")\nvar setup_loss = global.get(\"setup_loss_1\")\nvar noload_loss = global.get(\"noload_loss_1\")\nvar nosample_loss = global.get(\"nosample_loss_1\")\nvar nomanpower_loss = global.get(\"nomanpower_loss_1\")\nvar nolifter_loss = global.get(\"nolifter_loss_1\")\nvar techial_loss  = bd_loss+power_loss\nvar unaccount_loss = (100 - (techial_loss+qualt_loss+setup_loss+orginat_loss))\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[MC_DAILY_PRODUCTION_HISTORY](DATE,FINAL_OEE,TOTAL_DOWN,PRODUCTION_COUNT,PRODUCTION_PLAN_TIME,BREAKDWON,NOLOAD,GAS_CONSUMPTION,POWER_CONSUMPTION,BREAKDOWN_LOSS,POWER_LOSS,ORGANIZATION_LOSS,QUALITY_LOSS,SETUP_LOSS,SAMPLE_LOSS,MANPOWER_LOSS,LIFTER_LOSS,TECHNICAL_LOSS,UNACCOUNT_LOSS)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + final_oee + \"','\" + total_dwn + \"','\" + total_prod + \"','\" + production_time + \"', '\" + brekdwn + \"','\" + nold + \"','\" + gas_cons + \"','\" + pwer_cons + \"','\" + bd_loss + \"','\" + power_loss + \"','\" + orginat_loss + \"','\" + qualt_loss + \"','\" + setup_loss + \"','\" + noload_loss + \"','\" + nosample_loss + \"','\" + nomanpower_loss + \"','\" + nolifter_loss + \"','\" + techial_loss + \"','\" + unaccount_loss + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 220,
        "wires": [
            [
                "fd0435738886e7d5",
                "bcf12b17dcd1aa09"
            ]
        ]
    },
    {
        "id": "fd0435738886e7d5",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1440,
        "y": 220,
        "wires": [
            [
                "bdeb9fbe28f122c9"
            ]
        ]
    },
    {
        "id": "5406d8fa95b1e64c",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "DELETE_ALL",
        "func": "//DELETE FROM table_name WHERE condition\n//var delt_item = global.get(\"erase_selected\");\n\nvar pld = \" DELETE FROM [node_red].[dbo].[break_down] \" \n    \n//pld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 220,
        "wires": [
            [
                "257d5b621375a4b0"
            ]
        ]
    },
    {
        "id": "bdeb9fbe28f122c9",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 220,
        "wires": [
            [
                "5406d8fa95b1e64c"
            ]
        ]
    },
    {
        "id": "257d5b621375a4b0",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 1920,
        "y": 220,
        "wires": [
            [
                "b05b6e3e6137445d"
            ]
        ]
    },
    {
        "id": "b05b6e3e6137445d",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2060,
        "y": 220,
        "wires": [
            [
                "cc39bcc179a861b4"
            ]
        ]
    },
    {
        "id": "cc39bcc179a861b4",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "DELETE_ALL_1",
        "func": "//DELETE FROM table_name WHERE condition\n//var delt_item = global.get(\"erase_selected\");\n\nvar pld = \" DELETE FROM [node_red].[dbo].[QT_DAILY_REJECTION] \" \n    \n//pld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 220,
        "wires": [
            [
                "b2d1379b56480e64"
            ]
        ]
    },
    {
        "id": "b2d1379b56480e64",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 2380,
        "y": 220,
        "wires": [
            [
                "c0348d8dce407905"
            ]
        ]
    },
    {
        "id": "1a1ed1e098ecbbc0",
        "type": "ui_text_input",
        "z": "8e16e90ee80d1796",
        "name": "",
        "label": "MACHINE NAME*",
        "tooltip": "",
        "group": "",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "5bf0133a602371e9"
            ]
        ]
    },
    {
        "id": "30bf4d332571d39e",
        "type": "ui_text_input",
        "z": "8e16e90ee80d1796",
        "name": "",
        "label": "MODEL/PART NO*",
        "tooltip": "",
        "group": "",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "494cb37db0d9c1bb"
            ]
        ]
    },
    {
        "id": "5bf0133a602371e9",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "MACHINE NAME",
        "func": "var newplan_machine_name = msg.payload;\nglobal.set(\"newplan_machine_name\", newplan_machine_name);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "494cb37db0d9c1bb",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "MODEL/PART NO*",
        "func": "var newplan_model_name = msg.payload;\nglobal.set(\"newplan_model_name\", newplan_model_name);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "6af5cd9900f3eedc",
        "type": "ui_text_input",
        "z": "8e16e90ee80d1796",
        "name": "",
        "label": "QTY*",
        "tooltip": "",
        "group": "",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "d34c54d52505b9e8"
            ]
        ]
    },
    {
        "id": "d34c54d52505b9e8",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "QTY*",
        "func": "var newplan_qty = msg.payload;\nglobal.set(\"newplan_qty\", newplan_qty);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "2f0471dba9af3def",
        "type": "ui_text_input",
        "z": "8e16e90ee80d1796",
        "name": "",
        "label": "CYCLE TIME*",
        "tooltip": "",
        "group": "",
        "order": 12,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "e395ea701b19e1ca"
            ]
        ]
    },
    {
        "id": "e395ea701b19e1ca",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "CYCLE TIME*",
        "func": "var newplan_cycletime = msg.payload;\nglobal.set(\"newplan_cycletime\", newplan_cycletime);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "bae277b0f0b25d49",
        "type": "ui_text_input",
        "z": "8e16e90ee80d1796",
        "name": "",
        "label": "TOTAL TIME*",
        "tooltip": "",
        "group": "",
        "order": 15,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "759adcb53b19d381"
            ]
        ]
    },
    {
        "id": "eacdb4df911ab7c3",
        "type": "ui_text_input",
        "z": "8e16e90ee80d1796",
        "name": "",
        "label": "SHIFT*",
        "tooltip": "",
        "group": "",
        "order": 18,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "24139308facca51b"
            ]
        ]
    },
    {
        "id": "759adcb53b19d381",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "TOTAL TIME*",
        "func": "var newplan_totaltime = msg.payload;\nglobal.set(\"newplan_totaltime\", newplan_totaltime);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "24139308facca51b",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "SHIFT*",
        "func": "var newplan_shift = msg.payload;\nglobal.set(\"newplan_shift\", newplan_shift);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "d3dccfd33eb2ee2e",
        "type": "comment",
        "z": "8e16e90ee80d1796",
        "name": "NEW_PLAN",
        "info": "",
        "x": 150,
        "y": 620,
        "wires": []
    },
    {
        "id": "91c1741fb5873567",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "Function",
        "func": "var d = new Date,\n    dformat = [d.getMonth() + 1,\n    d.getDate(),\n    d.getFullYear()].join('/') + ' ' +\n        [d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar machine_name = global.get(\"newplan_machine_name\");\nvar model_name = global.get(\"newplan_model_name\");\nvar qty = global.get(\"newplan_qty\");\nvar cycle_time = global.get(\"newplan_cycletime\");\nvar totaltime = global.get(\"newplan_totaltime\");\nvar shift = global.get(\"newplan_shift\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[NEW_PRODUCTION_PLAN](TIME,MACHINE_NAME,MODEL_NAME,QTY,CYCLE_TIME,TOTAL_TIME,SHIFT) \"\npld = pld + \"VALUES ('\" + dformat + \"','\" + machine_name + \"','\" + model_name + \"','\" + qty + \"','\" + cycle_time + \"','\" + totaltime + \"','\" + shift + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 920,
        "wires": [
            [
                "d289d903e86d6804"
            ]
        ]
    },
    {
        "id": "d289d903e86d6804",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "NEW_PLAN_PRODUCTION_1",
        "query": "",
        "outField": "payload",
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "6f2a05645b5f7ce3"
            ]
        ]
    },
    {
        "id": "4698b16393cd48cd",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "NEW_PRODUCTION_PLAN_HISTORY",
        "query": "",
        "outField": "payload",
        "x": 700,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "7da1d739fffec91c",
        "type": "ui_table",
        "z": "8e16e90ee80d1796",
        "group": "",
        "name": "NEW PLAN PRODUCTION",
        "order": 7,
        "width": 21,
        "height": 11,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 920,
        "y": 1140,
        "wires": []
    },
    {
        "id": "b8cf966237acff31",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "Function",
        "func": "var pld = \" SELECT TIME,MACHINE_NAME,MODEL_NAME,QTY,CYCLE_TIME,TOTAL_TIME,SHIFT\" \npld = pld + \" FROM [node_red].[dbo].[NEW_PRODUCTION_PLAN]\"\npld = pld+ \"ORDER BY TIME\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1140,
        "wires": [
            [
                "9004f3da9d4afe15"
            ]
        ]
    },
    {
        "id": "9004f3da9d4afe15",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "NEW_PLAN_PRODUCTION",
        "query": "",
        "outField": "payload",
        "x": 640,
        "y": 1140,
        "wires": [
            [
                "7da1d739fffec91c"
            ]
        ]
    },
    {
        "id": "2c99a866baef7de6",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1140,
        "wires": [
            [
                "b8cf966237acff31"
            ]
        ]
    },
    {
        "id": "e99056d88a957ba0",
        "type": "ui_text",
        "z": "8e16e90ee80d1796",
        "group": "",
        "order": 3,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "NEW PLAN PRODUCTION",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 940,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7f6e8adb30b633a7",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "Function",
        "func": "var d = new Date,\n    dformat = [d.getMonth() + 1,\n    d.getDate(),\n    d.getFullYear()].join('/') + ' ' +\n        [d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar machine_name = global.get(\"qt_rej_machine_name\");\nvar model_name = global.get(\"qt_rej_model_name\");\nvar opr_name = global.get(\"qt_rej_operator_name\");\nvar qt_inspect_name = global.get(\"qt_rej_inspector_name\");\nvar leaf_no = global.get(\"qt_rej_leaf_no\");\nvar section = global.get(\"qt_rej_section\");\nvar wt = global.get(\"qt_rej_wt\");\nvar rej_qty = global.get(\"qt_rej_qty\");\nvar total_wt = global.get(\"qt_rej_total_wt\");\nvar defect = global.get(\"qt_rej_defect\");\n\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[QT_DAILY_REJECTION](TIME,MACHINE_NAME )\"\npld = pld + \"VALUES ('\" + dformat + \"','\" + machine_name + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1060,
        "wires": [
            [
                "d289d903e86d6804"
            ]
        ]
    },
    {
        "id": "5126a48c714e48bc",
        "type": "ui_button",
        "z": "8e16e90ee80d1796",
        "name": "",
        "group": "",
        "order": 23,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "ENTER",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 1020,
        "wires": [
            [
                "91c1741fb5873567",
                "2c99a866baef7de6",
                "62f6069f98007298"
            ]
        ]
    },
    {
        "id": "62f6069f98007298",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1200,
        "wires": [
            [
                "47c993e9dc055add"
            ]
        ]
    },
    {
        "id": "47c993e9dc055add",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "Function",
        "func": "var d = new Date,\n    dformat = [d.getMonth() + 1,\n    d.getDate(),\n    d.getFullYear()].join('/') + ' ' +\n        [d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()].join(':');\n//\"UPDATE [node_red].[dbo].[mytable] \"\nvar machine_name = global.get(\"newplan_machine_name\");\nvar model_name = global.get(\"newplan_model_name\");\nvar qty = global.get(\"newplan_qty\");\nvar cycle_time = global.get(\"newplan_cycletime\");\nvar totaltime = global.get(\"newplan_totaltime\");\nvar shift = global.get(\"newplan_shift\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[NEW_PRODUCTION_PLAN_HISTORY](TIME,MACHINE_NAME,MODEL_NAME,QTY,CYCLE_TIME,TOTAL_TIME,SHIFT) \"\npld = pld + \"VALUES ('\" + dformat + \"','\" + machine_name + \"','\" + model_name + \"','\" + qty + \"','\" + cycle_time + \"','\" + totaltime + \"','\" + shift + \"')\"\n\n//pld = pld + \"SET Timestamp = '\" + dformat + \"' \"\n\n//pld = pld + \"WHERE id = 1\"\n\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1240,
        "wires": [
            [
                "4698b16393cd48cd"
            ]
        ]
    },
    {
        "id": "1c750717507d83a1",
        "type": "ui_button",
        "z": "8e16e90ee80d1796",
        "name": "",
        "group": "",
        "order": 31,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "DELETE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TRUE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 1320,
        "wires": [
            [
                "06d1c4a533a6b233",
                "6d7b02cdaa6af706",
                "2c99a866baef7de6"
            ]
        ]
    },
    {
        "id": "06d1c4a533a6b233",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "Function",
        "func": "//DELETE FROM table_name WHERE condition\nvar delt_item = global.get(\"newplan_erase_selected\");\n\nvar pld = \" DELETE FROM [node_red].[dbo].[NEW_PRODUCTION_PLAN] \" \n    \npld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1320,
        "wires": [
            [
                "e81dcd9859688573"
            ]
        ]
    },
    {
        "id": "e81dcd9859688573",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "NEWPLAN_DEL_1",
        "query": "",
        "outField": "payload",
        "x": 530,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "d2d167c174cff3b9",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "Function",
        "func": "//DELETE FROM table_name WHERE condition\nvar delt_item = global.get(\"newplan_erase_selected\");\n\nvar pld = \" DELETE FROM [node_red].[dbo].[NEW_PRODUCTION_PLAN_HISTORY] \"\n\npld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1360,
        "wires": [
            [
                "399392971c861399"
            ]
        ]
    },
    {
        "id": "399392971c861399",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "NEWPLAN_DEL_HISTRY",
        "query": "",
        "outField": "payload",
        "x": 690,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "6d7b02cdaa6af706",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1360,
        "wires": [
            [
                "d2d167c174cff3b9"
            ]
        ]
    },
    {
        "id": "72a01f045843158b",
        "type": "ui_text_input",
        "z": "8e16e90ee80d1796",
        "name": "",
        "label": "DELETE WRONG ENTERY*",
        "tooltip": "",
        "group": "",
        "order": 28,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "payload",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 340,
        "y": 1440,
        "wires": [
            [
                "d1ba5398634171f2"
            ]
        ]
    },
    {
        "id": "d1ba5398634171f2",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "DELET WRONG ENTERY",
        "func": "var newplan_erase_selected = msg.payload;\nglobal.set(\"newplan_erase_selected\", newplan_erase_selected);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "b5cf7f6400cd7a08",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1440,
        "wires": [
            [
                "72a01f045843158b"
            ]
        ]
    },
    {
        "id": "a620df3168cf3f3d",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "91c1741fb5873567",
                "b8cf966237acff31",
                "47c993e9dc055add"
            ]
        ]
    },
    {
        "id": "6f2a05645b5f7ce3",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 87",
        "func": "var k = 1\nmsg.payload = k;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1000,
        "wires": [
            [
                "252fdb1eead975ef"
            ]
        ]
    },
    {
        "id": "252fdb1eead975ef",
        "type": "debug",
        "z": "8e16e90ee80d1796",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3c99af17d0a4df13",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "8.30 AM ACTIVE",
        "func": "var del_data_chking = 1;\nglobal.set(\"del_data_chking\", del_data_chking)\nglobal.set(\"time_count\", 0)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "1b83193074efc9bc",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "8ba749bb31745762"
            ]
        ]
    },
    {
        "id": "87f59c4c863baa1d",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 89",
        "func": "var m = global.get(\"del_data_chking\");\n;\n\nif (m == 1) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 40,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ecf9f8b945cdceab",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 90",
        "func": "var del_data_chking = 0;\nglobal.set(\"del_data_chking\", del_data_chking);\nglobal.set(\"time_count\",0);\nglobal.set(\"data_update_counter_reset\",1);\n\nglobal.set(\"bd_loss_1\",0);\nglobal.set(\"power_loss_1\",0)\nglobal.set(\"qualt_loss_1\",0)\nglobal.set(\"orginat_loss_1\",0)\nglobal.set(\"setup_loss_1\",0)\nglobal.set(\"noload_loss_1\",0)\nglobal.set(\"bd_loss_2\", 0);\nglobal.set(\"power_loss_2\", 0)\nglobal.set(\"qualt_loss_2\", 0)\nglobal.set(\"orginat_loss_2\", 0)\nglobal.set(\"setup_loss_2\", 0)\nglobal.set(\"noload_loss_2\", 0)\n\nvar d = new Date,\n    dformat = [d.getFullYear(),d.getMonth() + 1,\n    d.getDate()].join('/');\n\nvar pervious_date = dformat;\nglobal.set(\"pervious_date\", pervious_date)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4b4d6e063466e4a0",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 94",
        "func": "//\"UPDATE [node_red].[dbo].[mytable] \"\nvar count = 0;\nvar prod_time = 0;\nvar perform = 0;\nvar running_p1 = 0;\nvar brk = 0;\nvar nold = 0;\n//var dtstmp = new Date().toString();\nvar pld = \"UPDATE [node_red].[dbo].[record_1] \"\npld = pld + \"SET TOTAL_COUNT = '\" + count + \"' ,PRODUCTION_TIME = '\" + prod_time + \"',PERFORMANCE = '\" + perform + \"',RUNNING_PRODUCT = '\" + running_p1 + \"' ,BREAKDOWN = 0,NOLOAD = 0,TOTAL_DWN = 0 \"\n\npld = pld + \"WHERE ID = 1\"\n\nmsg.payload = pld\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2690,
        "y": 220,
        "wires": [
            [
                "007e3f295fd1f5cf"
            ]
        ]
    },
    {
        "id": "c0348d8dce407905",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2520,
        "y": 220,
        "wires": [
            [
                "4b4d6e063466e4a0"
            ]
        ]
    },
    {
        "id": "007e3f295fd1f5cf",
        "type": "MSSQL",
        "z": "8e16e90ee80d1796",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 2840,
        "y": 220,
        "wires": [
            [
                "ecf9f8b945cdceab"
            ]
        ]
    },
    {
        "id": "bb1247647f398883",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "623eede6ec51e2dc"
            ]
        ]
    },
    {
        "id": "623eede6ec51e2dc",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 98",
        "func": "var m = global.get(\"del_data_chking\");\nvar m_1 = global.get(\"machine_data_update\")\n\nif (m == m_1) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 480,
        "wires": [
            [
                "232fdfbad1298c5e"
            ],
            []
        ]
    },
    {
        "id": "232fdfbad1298c5e",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 99",
        "func": "global.set(\"bypass_deldata\",1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4091d8dc9862302e",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 101",
        "func": "global.set(\"del_data_chking\",0)\nmsg.payload = global.get(\"machine_data_update\")\nvar d = new Date,\n    dformat = [d.getMonth() + 1,\n    d.getDate(),\n    d.getFullYear()].join('/');\nglobal.set(\"pervious_date\", dformat)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b96ccdbd46a445c3",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 93",
        "func": "var m = global.get(\"machine_data_update\");\n;\n\nif (m == 0) {\n    // check if the user has access to execute this function\n\n    return [msg, null];\n\n\n} else {\n    return [null, msg];\n}\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e6b5b663ca30f42b",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 300,
        "wires": [
            [
                "4091d8dc9862302e"
            ]
        ]
    },
    {
        "id": "bfe6fecc2653e1bd",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "9",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 730,
        "y": 480,
        "wires": [
            [
                "e1ef2913afcc46f2"
            ]
        ]
    },
    {
        "id": "9c8e6a8f4d266263",
        "type": "delay",
        "z": "8e16e90ee80d1796",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "2a629c5454002093"
            ]
        ]
    },
    {
        "id": "79d55f5396859e6d",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1640,
        "wires": [
            [
                "ddd69969b5efdb4f",
                "8c7b303d25678996",
                "3cc4280389bc9375",
                "1809944490cefe45",
                "e41842bf4cd2e433",
                "5aa82bc06ef38104",
                "b37296b567eaa37b",
                "cb158bc32739213e",
                "0630d4177dfbe269",
                "6209ded20e086bfd",
                "01caec3155d0f771",
                "9dbfcd80015c2f9e",
                "5e1c884e62f3c515",
                "208f1e5ea6383711",
                "ca58c8ed73ed3e8c",
                "953d7faa52d8474a",
                "87b12f121898f738",
                "638e9838d75b34ec",
                "3633e253a824c9b2",
                "3d346c3804df5368"
            ]
        ]
    },
    {
        "id": "ddd69969b5efdb4f",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "dailyprdt_data_wrte_dne",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1640,
        "wires": [
            [
                "b9e08f50ecdfa2bf"
            ]
        ]
    },
    {
        "id": "b9e08f50ecdfa2bf",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "dailyprdt_data_wrte_dne",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "8c7b303d25678996",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "pervious_date",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1680,
        "wires": [
            [
                "10c131ebd6604403"
            ]
        ]
    },
    {
        "id": "3cc4280389bc9375",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "op_name",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1720,
        "wires": [
            [
                "8bde76817d08ef9d"
            ]
        ]
    },
    {
        "id": "1809944490cefe45",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "product_check_comp",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1760,
        "wires": [
            [
                "09d2b3ed4d7171d7"
            ]
        ]
    },
    {
        "id": "e41842bf4cd2e433",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "run_prod_qty",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "8947fa77a55575f5"
            ]
        ]
    },
    {
        "id": "5aa82bc06ef38104",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "actual_oee",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1840,
        "wires": [
            [
                "8240ebdb5053f778"
            ]
        ]
    },
    {
        "id": "b37296b567eaa37b",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "individual_counter",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1880,
        "wires": [
            [
                "98b170ab1a11d34a"
            ]
        ]
    },
    {
        "id": "8bde76817d08ef9d",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "op_name",
                "pt": "global",
                "to": "NOT MENTIONED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "09d2b3ed4d7171d7",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "product_check_comp",
                "pt": "global",
                "to": "AB",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "8947fa77a55575f5",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "run_prod_qty",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "8240ebdb5053f778",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "actual_oee",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "98b170ab1a11d34a",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "individual_counter",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "cb158bc32739213e",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "CY_TIM",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1920,
        "wires": [
            [
                "7b8183a001f91098"
            ]
        ]
    },
    {
        "id": "7b8183a001f91098",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "CY_TIM",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "10c131ebd6604403",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 125",
        "func": "var now = new Date();\nvar previousDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);\nvar perv = previousDate.toISOString().slice(0, 10);\nglobal.set(\"pervious_date\",perv)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "0630d4177dfbe269",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "CY_TIM",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1960,
        "wires": [
            [
                "815a85c97dbb815f"
            ]
        ]
    },
    {
        "id": "815a85c97dbb815f",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "CY_TIM",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "bcf12b17dcd1aa09",
        "type": "debug",
        "z": "8e16e90ee80d1796",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 280,
        "wires": []
    },
    {
        "id": "6209ded20e086bfd",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "bd_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2000,
        "wires": [
            [
                "ccf01b3a93f07fa6"
            ]
        ]
    },
    {
        "id": "ccf01b3a93f07fa6",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "bd_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "01caec3155d0f771",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "power_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2040,
        "wires": [
            [
                "21cd6c528ef13167"
            ]
        ]
    },
    {
        "id": "21cd6c528ef13167",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "power_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "9dbfcd80015c2f9e",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "qualt_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2080,
        "wires": [
            [
                "e0a8244d1ace4688"
            ]
        ]
    },
    {
        "id": "e0a8244d1ace4688",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "qualt_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "5e1c884e62f3c515",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "orginat_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2120,
        "wires": [
            [
                "890e9b87adbefc37"
            ]
        ]
    },
    {
        "id": "890e9b87adbefc37",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "orginat_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "208f1e5ea6383711",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "setup_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2160,
        "wires": [
            [
                "4d1e5f1ae34b7349"
            ]
        ]
    },
    {
        "id": "4d1e5f1ae34b7349",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "setup_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "ca58c8ed73ed3e8c",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "noload_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2200,
        "wires": [
            [
                "e812a29bbb9d806d"
            ]
        ]
    },
    {
        "id": "e812a29bbb9d806d",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "noload_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "e1ef2913afcc46f2",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "total_count_reset",
        "property": "data_update_counter_reset",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 480,
        "wires": [
            [
                "9c8e6a8f4d266263"
            ]
        ]
    },
    {
        "id": "2a629c5454002093",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "data_update_counter_reset",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "8ba749bb31745762",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "8AM ACTIVE",
        "property": "del_data_chking",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "953d7faa52d8474a",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "rejt_part",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2280,
        "wires": [
            [
                "cb31f2ed347096ac"
            ]
        ]
    },
    {
        "id": "cb31f2ed347096ac",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "rejt_part",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "87b12f121898f738",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "qt_opr_name",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 2240,
        "wires": [
            [
                "4d6122a8ddb82fa2"
            ]
        ]
    },
    {
        "id": "4d6122a8ddb82fa2",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "qt_opr_name",
                "pt": "global",
                "to": "NOT MENTIONED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "705c0df056cf7806",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "439ea4edd9043452"
            ]
        ]
    },
    {
        "id": "439ea4edd9043452",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 131",
        "func": "msg.payload = global.get(\"pervious_date\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 360,
        "wires": [
            [
                "1d33115fb0ab1d3c"
            ]
        ]
    },
    {
        "id": "1d33115fb0ab1d3c",
        "type": "debug",
        "z": "8e16e90ee80d1796",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 360,
        "wires": []
    },
    {
        "id": "638e9838d75b34ec",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "nosample_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 321,
        "y": 2320,
        "wires": [
            [
                "3c816563db6696a1"
            ]
        ]
    },
    {
        "id": "3c816563db6696a1",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "nosample_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "d70c597b3bc4891c",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "nomanpower_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "3633e253a824c9b2",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "nomanpower_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 321,
        "y": 2360,
        "wires": [
            [
                "d70c597b3bc4891c"
            ]
        ]
    },
    {
        "id": "ab029215a19f9e36",
        "type": "change",
        "z": "8e16e90ee80d1796",
        "name": "Set default value",
        "rules": [
            {
                "t": "set",
                "p": "nolifter_loss_1",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "3d346c3804df5368",
        "type": "switch",
        "z": "8e16e90ee80d1796",
        "name": "Is variable undefined?",
        "property": "nolifter_loss_1",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "undefined",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 321,
        "y": 2400,
        "wires": [
            [
                "ab029215a19f9e36"
            ]
        ]
    },
    {
        "id": "202170bc0fd1f298",
        "type": "inject",
        "z": "8e16e90ee80d1796",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.1",
        "topic": "",
        "x": 2730,
        "y": 520,
        "wires": [
            [
                "ecf9f8b945cdceab",
                "4bdf414183c94396"
            ]
        ]
    },
    {
        "id": "4bdf414183c94396",
        "type": "function",
        "z": "8e16e90ee80d1796",
        "name": "function 158",
        "func": "msg.payload = global.get(\"pervious_date\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 420,
        "wires": [
            [
                "c6811528f3755ea5"
            ]
        ]
    },
    {
        "id": "c6811528f3755ea5",
        "type": "debug",
        "z": "8e16e90ee80d1796",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3320,
        "y": 420,
        "wires": []
    },
    {
        "id": "5a0aa2b0c3707642",
        "type": "inject",
        "z": "e30eb1ab591daa50",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "e6cca2e331df1603"
            ]
        ]
    },
    {
        "id": "e6cca2e331df1603",
        "type": "function",
        "z": "e30eb1ab591daa50",
        "name": "Function",
        "func": "var d = new Date();\nvar dformat = d.toLocaleTimeString();\nvar gas = global.get(\"gas_cons\");\nvar production = global.get(\"full_day_counter\");\nvar dtstmp = new Date().toString();\nvar pld = \"INSERT INTO[node_red].[dbo].[GAS_PRODUCTION](TIME,GAS,PRODUCTION)\"      \npld = pld + \"VALUES ('\" + dformat + \"','\" + gas + \"','\" + production + \"')\"\nmsg.payload = pld\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "44f540881d07b0af",
        "type": "MSSQL",
        "z": "e30eb1ab591daa50",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "ba787b173403c978"
            ]
        ]
    },
    {
        "id": "ba787b173403c978",
        "type": "delay",
        "z": "e30eb1ab591daa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 160,
        "wires": [
            [
                "255b65ba96e158e8"
            ]
        ]
    },
    {
        "id": "255b65ba96e158e8",
        "type": "function",
        "z": "e30eb1ab591daa50",
        "name": "Function",
        "func": "var pld = \"SELECT TIME,GAS,PRODUCTION \"\npld = pld + \"FROM [node_red].[dbo].[GAS_PRODUCTION] \"\nmsg.payload = pld + \"ORDER BY TIME\"\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "dff3f89442ea51e8"
            ]
        ]
    },
    {
        "id": "dff3f89442ea51e8",
        "type": "MSSQL",
        "z": "e30eb1ab591daa50",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 880,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e1eaea02142c1289",
        "type": "ui_chart",
        "z": "e30eb1ab591daa50",
        "name": "",
        "group": "",
        "order": 1,
        "width": 29,
        "height": 16,
        "label": "GAS (SCM) VS PRODUCTION NO\"S",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "no data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "50",
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#05e6cc",
            "#0fff13",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1310,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c6fb4493319fccf5",
        "type": "function",
        "z": "e30eb1ab591daa50",
        "name": "function 126",
        "func": "var labels = [];\nvar gas = [];\nvar production = [];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    labels.push(msg.payload[i].TIME);\n    gas.push(msg.payload[i].GAS);\n    production.push(msg.payload[i].PRODUCTION);\n}\n\nmsg.payload = [\n    {\n        \"series\": [\"Gas\", \"Production\"],\n        \"data\": [gas, production],\n        \"labels\": labels\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 160,
        "wires": [
            [
                "e1eaea02142c1289",
                "f33791f424591c28"
            ]
        ]
    },
    {
        "id": "1f587b0eab1a2b8f",
        "type": "inject",
        "z": "e30eb1ab591daa50",
        "d": true,
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "40 08 * * *",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "374e4e26fb3dc90a"
            ]
        ]
    },
    {
        "id": "374e4e26fb3dc90a",
        "type": "function",
        "z": "e30eb1ab591daa50",
        "name": "DELETE",
        "func": "//DELETE FROM table_name WHERE condition\n//var delt_item = global.get(\"erase_selected\");\n\nvar pld = \" DELETE FROM [node_red].[dbo].[GAS_PRODUCTION] \" \n    \n//pld = pld + \" WHERE TIME = '\" + delt_item + \"' \"\nmsg.payload = pld\nreturn msg;\n\n\n//[node_red].[dbo].\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "feb0c98786d0779d"
            ]
        ]
    },
    {
        "id": "feb0c98786d0779d",
        "type": "MSSQL",
        "z": "e30eb1ab591daa50",
        "mssqlCN": "ceaa8cf7da044584",
        "name": "MSSQL",
        "query": "",
        "outField": "payload",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "ba787b173403c978"
            ]
        ]
    },
    {
        "id": "f33791f424591c28",
        "type": "debug",
        "z": "e30eb1ab591daa50",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 200,
        "wires": []
    },
    {
        "id": "0d912ef2ad1ce4d5",
        "type": "function",
        "z": "e30eb1ab591daa50",
        "name": "function 129",
        "func": "var g = require('csv')\nmsg.payload = g\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "aab203fc8f19f759",
        "type": "inject",
        "z": "e30eb1ab591daa50",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 570,
        "y": 480,
        "wires": [
            [
                "0d912ef2ad1ce4d5"
            ]
        ]
    },
    {
        "id": "e6c0c40598ffae24",
        "type": "inject",
        "z": "abb6305e8142e8fe",
        "name": "Every 5 sec",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 450,
        "y": 340,
        "wires": [
            [
                "fb40f34e8336956d",
                "5dd58a2f0bbd83a7"
            ]
        ]
    },
    {
        "id": "fb40f34e8336956d",
        "type": "function",
        "z": "abb6305e8142e8fe",
        "name": "Build SQL Query",
        "func": "//var pld = \"SELECT TOP 10 \" //NO_LOAD,TOTAL_DOWN_TIME \"\n\n\n//pld = pld + \"FROM [Furnace].[dbo].[QUENCHING] \"\n\n//pld = pld + \"WHERE TIME = '\" + ontime + \" ' \";\n//pld = pld + \"WHERE TIME BETWEEN '\" + ontime + \" ' AND ' \" + offtime + \"' ORDER BY TIME \";\n//pld = pld + \" ORDER BY Time_Stamp DESC \";\n\n//pld = pld + \"VALUES ('\" + gk + \"','\" + dformat + \"')\"\n//msg.payload = pld\n//return msg;\n\nmsg.payload = \"SELECT TOP 10 * FROM TEST ORDER BY ID DESC\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [
            [
                "641b60a6bd4f9d4e"
            ]
        ]
    },
    {
        "id": "641b60a6bd4f9d4e",
        "type": "MSSQL",
        "z": "abb6305e8142e8fe",
        "mssqlCN": "9c332921d88cdcee",
        "name": "Query SQL Server",
        "query": "",
        "outField": "payload",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "778c5e9510e62318",
                "ac64fd09826b36ac"
            ]
        ]
    },
    {
        "id": "778c5e9510e62318",
        "type": "function",
        "z": "abb6305e8142e8fe",
        "name": "Format Data",
        "func": "msg.payload = {\n  columns: Object.keys(msg.payload[0] || {}),\n  rows: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "d32a7055fe218ceb"
            ]
        ]
    },
    {
        "id": "d32a7055fe218ceb",
        "type": "ui_template",
        "z": "abb6305e8142e8fe",
        "group": "",
        "name": "Live Table",
        "order": 1,
        "width": 12,
        "height": 8,
        "format": "<table border=\"1\" style=\"width:100%; text-align:center;\">\n  <tr>\n    <th ng-repeat=\"col in msg.payload.columns\">{{col}}</th>\n  </tr>\n  <tr ng-repeat=\"row in msg.payload.rows\">\n    <td ng-repeat=\"col in msg.payload.columns\">{{row[col]}}</td>\n  </tr>\n</table>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1240,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "ac64fd09826b36ac",
        "type": "debug",
        "z": "abb6305e8142e8fe",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 440,
        "wires": []
    },
    {
        "id": "5dd58a2f0bbd83a7",
        "type": "ui_template",
        "z": "abb6305e8142e8fe",
        "group": "",
        "name": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<template>\n    <div id=\"card-container\" style=\"perspective: 1000px;\">\n        <div id=\"flip-card\" style=\"transition: transform 0.6s; transform-style: preserve-3d;\">\n            <canvas id=\"myChart\"></canvas>\n        </div>\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n        let chart;\n    let flipping = false;\n\n    const createChart = (labels, data) => {\n      const ctx = document.getElementById('myChart').getContext('2d');\n      chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels,\n          datasets: [{\n            label: 'Data',\n            data,\n            backgroundColor: '#3399ff'\n          }]\n        },\n        options: {\n          responsive: true,\n          animation: { duration: 0 },\n          scales: {\n            y: { beginAtZero: true }\n          }\n        }\n      });\n    };\n\n    const flipAndUpdate = (labels, data) => {\n      const card = document.getElementById('flip-card');\n      if (flipping) return;\n      flipping = true;\n\n      card.style.transform = 'rotateY(180deg)';\n      setTimeout(() => {\n        chart.destroy();\n        createChart(labels, data);\n        card.style.transform = 'rotateY(0deg)';\n        flipping = false;\n      }, 600); // Match transition time\n    };\n\n    // First chart\n    setTimeout(() => {\n      createChart(['A', 'B', 'C'], [5, 10, 3]);\n    }, 100);\n\n    // Listen to new data from Node-RED\n    (function(scope) {\n      scope.$watch('msg.payload', function(payload) {\n        if (payload && payload.labels && payload.data) {\n          flipAndUpdate(payload.labels, payload.data);\n        }\n      });\n    })(scope);\n    </script>\n</template>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "ec21203d0b123c75",
        "type": "inject",
        "z": "65e97843b2a58628",
        "name": "Rotate View",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "dd0f91bd9c161e74"
            ]
        ]
    },
    {
        "id": "dd0f91bd9c161e74",
        "type": "function",
        "z": "65e97843b2a58628",
        "name": "Cycle Station",
        "func": "const stations = ['A', 'B', 'C'];\nlet index = flow.get('stationIndex') || 0;\n\nlet station = stations[index];\nflow.set('stationIndex', (index + 1) % stations.length);\n\nlet qr = 'QR' + Math.floor(Math.random() * 1000000);\nlet status = Math.random() > 0.5 ? 'PASS' : 'FAIL';\nlet time = new Date().toLocaleString();\n\nmsg.payload = {\n    station: station,\n    qr: qr,\n    status: status,\n    time: time\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 340,
        "wires": [
            [
                "3e79787a127d408b"
            ]
        ]
    },
    {
        "id": "3e79787a127d408b",
        "type": "ui_template",
        "z": "65e97843b2a58628",
        "group": "",
        "name": "Card View",
        "order": 1,
        "width": 12,
        "height": 8,
        "format": "<div style=\"text-align:center; transition: all 0.5s ease; border: 1px solid #ccc; border-radius: 12px; padding: 20px; background: #f5f5f5;\">\n  <h2 style=\"color:#333;\">Station {{msg.payload.station}}</h2>\n  <h3>QR Code: <span style=\"color: #0074D9;\">{{msg.payload.qr}}</span></h3>\n  <h3>Status: <span style=\"color: {{msg.payload.status === 'PASS' ? 'green' : 'red'}}\">{{msg.payload.status}}</span></h3>\n  <p><i>{{msg.payload.time}}</i></p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "0e1e06fea609fcbe",
        "type": "inject",
        "z": "65e97843b2a58628",
        "name": "Rotate View",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 440,
        "wires": [
            [
                "a11fc8f160e3d4a5"
            ]
        ]
    },
    {
        "id": "a11fc8f160e3d4a5",
        "type": "function",
        "z": "65e97843b2a58628",
        "name": "Cycle Station",
        "func": "let stations = ['A', 'B', 'C'];\nlet index = flow.get('stationIndex') || 0;\nlet nextStation = stations[index];\nflow.set('stationIndex', (index + 1) % stations.length);\n\nlet qr = 'QR' + Math.floor(Math.random()*1000000);\nlet status = Math.random() > 0.5 ? 'PASS' : 'FAIL';\nlet time = new Date().toLocaleString();\n\nmsg.payload = {\n    station: nextStation,\n    qr: qr,\n    status: status,\n    time: time\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 440,
        "wires": [
            [
                "130d47ceb2ec4b86"
            ]
        ]
    },
    {
        "id": "130d47ceb2ec4b86",
        "type": "ui_template",
        "z": "65e97843b2a58628",
        "group": "",
        "name": "Card View",
        "order": 1,
        "width": 12,
        "height": 8,
        "format": "<div style=\"text-align:center; transition: all 0.5s ease; border: 1px solid #ccc; border-radius: 12px; padding: 20px; background: #f5f5f5;\">\n  <h2 style=\"color:#333;\">Station {{msg.payload.station}}</h2>\n  <h3>QR Code: <span style=\"color: #0074D9;\">{{msg.payload.qr}}</span></h3>\n  <h3>Status: <span ng-style=\"{'color': msg.payload.status === 'PASS' ? 'green' : 'red'}\">{{msg.payload.status}}</span></h3>\n  <p><i>{{msg.payload.time}}</i></p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 810,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "336ebcd5af0db91f",
        "type": "inject",
        "z": "65e97843b2a58628",
        "name": "New value",
        "props": [
            {
                "p": "new_value"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Test-QR-Value",
        "payloadType": "str",
        "x": 300,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "817769291de043b2",
        "type": "function",
        "z": "65e97843b2a58628",
        "name": "Check count ≥ 8?",
        "func": "let count = msg.payload[0].rowcount;\nmsg.value = msg.new_value;\n\nif (count >= 8) {\n    msg.topic = \"DELETE TOP(1) FROM LineData ORDER BY created_at ASC\";\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "x": 700,
        "y": 640,
        "wires": [
            [],
            [
                "d3daa05d0f760a8e"
            ]
        ]
    },
    {
        "id": "d3daa05d0f760a8e",
        "type": "function",
        "z": "65e97843b2a58628",
        "name": "Insert New",
        "func": "msg.topic = \"INSERT INTO LineData (value) VALUES (@value)\";\nmsg.payload = { value: msg.value };\nreturn msg;",
        "outputs": 1,
        "x": 930,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "34f4292e97e186ea",
        "type": "inject",
        "z": "65e97843b2a58628",
        "name": "Inject Data",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "906c075a4690f2ff"
            ]
        ]
    },
    {
        "id": "906c075a4690f2ff",
        "type": "function",
        "z": "65e97843b2a58628",
        "name": "Prepare Chart & Title",
        "func": "const labels = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"];\nconst values = [120, 150, 180, 170, 200];\n\nlet chartMsgs = [];\n\nfor (let i = 0; i < labels.length; i++) {\n    chartMsgs.push({\n        topic: labels[i],\n        payload: values[i]\n    });\n}\n\nlet titleMsg = {\n    payload: \"📊 Production Chart (Mon–Fri)\"\n};\n\nreturn [chartMsgs, titleMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 180,
        "wires": [
            [
                "f568ee79dfa8a680"
            ],
            [
                "1bef8237524a6fa5"
            ]
        ]
    },
    {
        "id": "f568ee79dfa8a680",
        "type": "ui_chart",
        "z": "65e97843b2a58628",
        "name": "Production Chart",
        "group": "dcab96ebc240fe47",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "bar",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "Waiting for data...",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#0088cc",
            "#e67e22",
            "#2ecc71"
        ],
        "outputs": 1,
        "x": 930,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1bef8237524a6fa5",
        "type": "ui_text",
        "z": "65e97843b2a58628",
        "group": "dcab96ebc240fe47",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Chart Title",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 940,
        "y": 200,
        "wires": []
    },
    {
        "id": "3645927546067f28",
        "type": "mqtt out",
        "z": "65e97843b2a58628",
        "name": "",
        "topic": "sensors/livingroom/temp",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "be8d26a7941d5db5",
        "x": 550,
        "y": 2180,
        "wires": []
    },
    {
        "id": "22ceb2ba85df5e11",
        "type": "inject",
        "z": "65e97843b2a58628",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "22",
        "payloadType": "num",
        "x": 370,
        "y": 2180,
        "wires": [
            [
                "3645927546067f28"
            ]
        ]
    },
    {
        "id": "d81b41ed3c882a3a",
        "type": "mqtt in",
        "z": "65e97843b2a58628",
        "name": "",
        "topic": "sensors/livingroom/temp",
        "qos": "2",
        "broker": "be8d26a7941d5db5",
        "inputs": 0,
        "x": 390,
        "y": 2260,
        "wires": [
            [
                "058b0c4da1131eec"
            ]
        ]
    },
    {
        "id": "058b0c4da1131eec",
        "type": "debug",
        "z": "65e97843b2a58628",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 590,
        "y": 2260,
        "wires": []
    },
    {
        "id": "6a266fb454444728",
        "type": "mqtt out",
        "z": "65e97843b2a58628",
        "name": "",
        "topic": "PLC/D10",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "63c67740abac5291",
        "x": 860,
        "y": 1000,
        "wires": []
    },
    {
        "id": "810ec44590b21e74",
        "type": "inject",
        "z": "65e97843b2a58628",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "6a266fb454444728"
            ]
        ]
    },
    {
        "id": "ad69403f0508380b",
        "type": "debug",
        "z": "65e97843b2a58628",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1080,
        "wires": []
    },
    {
        "id": "9743c8338137af01",
        "type": "aedes broker",
        "z": "65e97843b2a58628",
        "name": "",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "dburl": "",
        "usetls": false,
        "x": 470,
        "y": 860,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7fcca7e2e9fbba03",
        "type": "inject",
        "z": "3cb915a0b2d8453d",
        "name": "Group 1 Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"Group 1 Production\",\"labels\":[\"Line A\",\"Line B\"],\"values\":[100,150]}",
        "payloadType": "json",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "2b6378e289946cb2"
            ]
        ]
    },
    {
        "id": "b934579fd46bb427",
        "type": "inject",
        "z": "3cb915a0b2d8453d",
        "name": "Group 2 Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"Group 2 Production\",\"labels\":[\"Line X\",\"Line Y\",\"Line Z\"],\"values\":[90,120,80]}",
        "payloadType": "json",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "76b32c7e8a662289"
            ]
        ]
    },
    {
        "id": "2b6378e289946cb2",
        "type": "ui_template",
        "z": "3cb915a0b2d8453d",
        "group": "124fec707e10b8e3",
        "name": "Bar Chart - Group 1",
        "order": 1,
        "width": 12,
        "height": 7,
        "format": "<canvas id=\"chartGroup1\" width=\"930\" height=\"330\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (!data || !data.labels || !data.values) return;\n\n        const canvasId = 'chartGroup1';\n        const chartVar = 'myChartGroup1';\n\n        const ctx = document.getElementById(canvasId).getContext('2d');\n\n        if (window[chartVar]) {\n            window[chartVar].destroy();\n        }\n\n        window[chartVar] = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: data.labels,\n                datasets: [{\n                    label: data.label || 'Production',\n                    data: data.values,\n                    backgroundColor: data.colors || [\n                        '#4285F4', '#FB8C00', '#34A853'\n                    ]\n                }]\n            },\n            options: {\n                title: {\n                    display: !!data.title,\n                    text: data.title || '',\n                    fontColor: '#ffffff',\n                    fontSize: 18\n                },\n                plugins: {\n                    datalabels: {\n                        color: '#fff',\n                        anchor: 'end',\n                        align: 'start',\n                        font: {\n                            weight: 'bold',\n                            size: 14\n                        },\n                        formatter: function(value) {\n                            return value;\n                        }\n                    }\n                },\n                legend: {\n                    display: false\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            fontColor: '#ffffff'\n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: '#ffffff'\n                        }\n                    }]\n                }\n            },\n            plugins: [ChartDataLabels]\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 420,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "76b32c7e8a662289",
        "type": "ui_template",
        "z": "3cb915a0b2d8453d",
        "group": "64fae91ec85ab0a7",
        "name": "Bar Chart - Group 2",
        "order": 1,
        "width": 12,
        "height": 7,
        "format": "<canvas id=\"chartGroup2\" width=\"930\" height=\"330\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0\"></script>\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(data) {\n        if (!data || !data.labels || !data.values) return;\n\n        const canvasId = 'chartGroup2';\n        const chartVar = 'myChartGroup2';\n\n        const ctx = document.getElementById(canvasId).getContext('2d');\n\n        if (window[chartVar]) {\n            window[chartVar].destroy();\n        }\n\n        window[chartVar] = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: data.labels,\n                datasets: [{\n                    label: data.label || 'Production',\n                    data: data.values,\n                    backgroundColor: data.colors || [\n                        '#AECBFA', '#EA4335', '#34A853'\n                    ]\n                }]\n            },\n            options: {\n                title: {\n                    display: !!data.title,\n                    text: data.title || '',\n                    fontColor: '#ffffff',\n                    fontSize: 18\n                },\n                plugins: {\n                    datalabels: {\n                        color: '#fff',\n                        anchor: 'end',\n                        align: 'start',\n                        font: {\n                            weight: 'bold',\n                            size: 14\n                        },\n                        formatter: function(value) {\n                            return value;\n                        }\n                    }\n                },\n                legend: {\n                    display: false\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            fontColor: '#ffffff'\n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: '#ffffff'\n                        }\n                    }]\n                }\n            },\n            plugins: [ChartDataLabels]\n        });\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 430,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "698a42ddd13b427c",
        "type": "MC Read",
        "z": "3cb915a0b2d8453d",
        "name": "Mitshubishi_read",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "DSTR5001,16",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 810,
        "y": 440,
        "wires": [
            [
                "69174499519e3aec"
            ]
        ]
    },
    {
        "id": "b76ca5f63cb78da8",
        "type": "inject",
        "z": "3cb915a0b2d8453d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "connect",
        "payloadType": "msg",
        "x": 610,
        "y": 380,
        "wires": [
            [
                "698a42ddd13b427c",
                "38d4b535df0bebfd",
                "3edcd545283700f3",
                "7b7d7b265617816a",
                "010fc5cb2a8f126e",
                "ca60d1a2c2945e4e"
            ]
        ]
    },
    {
        "id": "38d4b535df0bebfd",
        "type": "MC Read",
        "z": "3cb915a0b2d8453d",
        "name": "Mitshubishi_read",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "DSTR5009,17",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 810,
        "y": 500,
        "wires": [
            [
                "fe43c2bd816090c0"
            ]
        ]
    },
    {
        "id": "3edcd545283700f3",
        "type": "MC Read",
        "z": "3cb915a0b2d8453d",
        "name": "Mitshubishi_read",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "DSTR5018,17",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 810,
        "y": 560,
        "wires": [
            [
                "af82bd62fabb07ca"
            ]
        ]
    },
    {
        "id": "69174499519e3aec",
        "type": "debug",
        "z": "3cb915a0b2d8453d",
        "name": "STRING_DATA0",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "fe43c2bd816090c0",
        "type": "debug",
        "z": "3cb915a0b2d8453d",
        "name": "STRING_DATA1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 500,
        "wires": []
    },
    {
        "id": "af82bd62fabb07ca",
        "type": "debug",
        "z": "3cb915a0b2d8453d",
        "name": "STRING_DATA2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 560,
        "wires": []
    },
    {
        "id": "7b7d7b265617816a",
        "type": "MC Read",
        "z": "3cb915a0b2d8453d",
        "name": "Mitshubishi_read",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "DDINT4096,10",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 810,
        "y": 620,
        "wires": [
            [
                "ed4e44434cf209ee"
            ]
        ]
    },
    {
        "id": "ed4e44434cf209ee",
        "type": "debug",
        "z": "3cb915a0b2d8453d",
        "name": "DOUBLE INTEGER DATA",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 620,
        "wires": []
    },
    {
        "id": "010fc5cb2a8f126e",
        "type": "MC Read",
        "z": "3cb915a0b2d8453d",
        "name": "Mitshubishi_read",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "D0",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 810,
        "y": 680,
        "wires": [
            [
                "191777f0b64447f8"
            ]
        ]
    },
    {
        "id": "191777f0b64447f8",
        "type": "debug",
        "z": "3cb915a0b2d8453d",
        "name": "SINGLE DEVICE DATA",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 680,
        "wires": []
    },
    {
        "id": "ca60d1a2c2945e4e",
        "type": "MC Read",
        "z": "3cb915a0b2d8453d",
        "name": "Mitshubishi_read",
        "topic": "",
        "connection": "03701c89bca626fe",
        "address": "M3600",
        "addressType": "str",
        "outputFormat": "1",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 810,
        "y": 740,
        "wires": [
            [
                "7e19a84f8a2288ee"
            ]
        ]
    },
    {
        "id": "7e19a84f8a2288ee",
        "type": "debug",
        "z": "3cb915a0b2d8453d",
        "name": "BIT DATA",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 740,
        "wires": []
    },
    {
        "id": "497fd4a7e2eb1ee9",
        "type": "comment",
        "z": "3cb915a0b2d8453d",
        "name": "DATA FORMAT ",
        "info": "INT DATA DINT0,10 WHERE 0 IS STARTING POINT D0 AND 10 IS LENGTH.\nDINT DATA DDINT0,10.\nUINT DATA DUINT0,10.",
        "x": 1280,
        "y": 620,
        "wires": []
    }
]